var search_data = {"index":{"searchIndex":["azure","core","auth","authorizer","sharedkey","sharedkeylite","signer","default","error","filteredservice","http","debugfilter","httperror","httpfilter","httprequest","httpresponse","mockresponse","retrypolicy","signerfilter","logger","loggerx","service","signedservice","utility","version","error","error","httpresponsehelper","ipaddr","string","address_prefix()","apply_body_headers()","apply_io_headers()","apply_miscellaneous_headers()","apply_string_io_headers()","body()","body=()","call()","call()","call()","call()","call()","call()","call()","call()","canonicalized_headers()","canonicalized_resource()","default_headers()","enable_winrm?()","error()","error()","error()","error_with_exit()","error_with_exit()","exception()","exception_message()","exception_message()","export_der()","export_fingerprint()","generate_uri()","get_certificate()","headers()","http_setup()","info()","info()","initialize_external_logger()","initialize_external_logger()","initialize_external_logger()","inspect()","locate_file()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse_json_response()","parse_response()","parse_unknown_response()","parse_xml_response()","private?()","public?()","random_string()","set_up_response()","should_retry?()","sign()","sign()","sign()","sign_request()","signable_string()","signable_string()","status_code()","success()","success()","success?()","to_hash()","to_s()","valid?()","validate_address_space()","validate_ip_and_prefix()","warn()","warn()","with_filter()","with_filter()","xml_content()"],"longSearchIndex":["azure","azure::core","azure::core::auth","azure::core::auth::authorizer","azure::core::auth::sharedkey","azure::core::auth::sharedkeylite","azure::core::auth::signer","azure::core::default","azure::core::error","azure::core::filteredservice","azure::core::http","azure::core::http::debugfilter","azure::core::http::httperror","azure::core::http::httpfilter","azure::core::http::httprequest","azure::core::http::httpresponse","azure::core::http::httpresponse::mockresponse","azure::core::http::retrypolicy","azure::core::http::signerfilter","azure::core::logger","azure::core::loggerx","azure::core::service","azure::core::signedservice","azure::core::utility","azure::core::version","azure::error","azure::error::error","azure::httpresponsehelper","ipaddr","string","ipaddr::address_prefix()","azure::core::http::httprequest#apply_body_headers()","azure::core::http::httprequest#apply_io_headers()","azure::core::http::httprequest#apply_miscellaneous_headers()","azure::core::http::httprequest#apply_string_io_headers()","azure::core::http::httpresponse#body()","azure::core::http::httprequest#body=()","azure::core::filteredservice#call()","azure::core::http::debugfilter#call()","azure::core::http::httpfilter#call()","azure::core::http::httprequest#call()","azure::core::http::retrypolicy#call()","azure::core::http::signerfilter#call()","azure::core::service#call()","azure::core::signedservice#call()","azure::core::auth::sharedkey#canonicalized_headers()","azure::core::auth::sharedkey#canonicalized_resource()","azure::core::http::httprequest#default_headers()","azure::core::utility#enable_winrm?()","azure::core::http::httpresponse#error()","azure::core::logger::error()","azure::core::logger::error()","azure::core::logger::error_with_exit()","azure::core::logger::error_with_exit()","azure::core::http::httpresponse#exception()","azure::core::logger::exception_message()","azure::core::logger::exception_message()","azure::core::utility#export_der()","azure::core::utility#export_fingerprint()","azure::core::service#generate_uri()","azure::core::utility#get_certificate()","azure::core::http::httpresponse#headers()","azure::core::http::httprequest#http_setup()","azure::core::logger::info()","azure::core::logger::info()","azure::core::logger::initialize_external_logger()","azure::core::logger::initialize_external_logger()","azure::core::utility#initialize_external_logger()","azure::core::http::httperror#inspect()","azure::core::utility#locate_file()","azure::core::auth::sharedkey#name()","azure::core::auth::sharedkeylite#name()","azure::core::auth::sharedkey::new()","azure::core::auth::signer::new()","azure::core::filteredservice::new()","azure::core::http::httperror::new()","azure::core::http::httpfilter::new()","azure::core::http::httprequest::new()","azure::core::http::httpresponse::new()","azure::core::http::httpresponse::mockresponse::new()","azure::core::http::retrypolicy::new()","azure::core::http::signerfilter::new()","azure::core::service::new()","azure::core::signedservice::new()","azure::error::error::new()","azure::core::http::httperror#parse_json_response()","azure::core::http::httperror#parse_response()","azure::core::http::httperror#parse_unknown_response()","azure::core::http::httperror#parse_xml_response()","ipaddr#private?()","ipaddr#public?()","azure::core::utility#random_string()","azure::httpresponsehelper#set_up_response()","azure::core::http::retrypolicy#should_retry?()","azure::core::auth::authorizer#sign()","azure::core::auth::sharedkey#sign()","azure::core::auth::signer#sign()","azure::core::auth::sharedkey#sign_request()","azure::core::auth::sharedkey#signable_string()","azure::core::auth::sharedkeylite#signable_string()","azure::core::http::httpresponse#status_code()","azure::core::logger::success()","azure::core::logger::success()","azure::core::http::httpresponse#success?()","azure::core::http::httpresponse::mockresponse#to_hash()","azure::core::version::to_s()","ipaddr::valid?()","ipaddr::validate_address_space()","ipaddr::validate_ip_and_prefix()","azure::core::logger::warn()","azure::core::logger::warn()","azure::core::filteredservice#with_filter()","azure::core::http::httprequest#with_filter()","azure::core::utility#xml_content()"],"info":[["Azure","","Azure.html","",""],["Azure::Core","","Azure/Core.html","",""],["Azure::Core::Auth","","Azure/Core/Auth.html","",""],["Azure::Core::Auth::Authorizer","","Azure/Core/Auth/Authorizer.html","",""],["Azure::Core::Auth::SharedKey","","Azure/Core/Auth/SharedKey.html","",""],["Azure::Core::Auth::SharedKeyLite","","Azure/Core/Auth/SharedKeyLite.html","",""],["Azure::Core::Auth::Signer","","Azure/Core/Auth/Signer.html","","<p>Utility class to sign strings with HMAC-256 and then encode the signed\nstring using Base64.\n"],["Azure::Core::Default","","Azure/Core/Default.html","",""],["Azure::Core::Error","","Azure/Core/Error.html","","<p>Superclass for errors generated from this library, so people can just\nrescue this for generic error handling …\n"],["Azure::Core::FilteredService","","Azure/Core/FilteredService.html","","<p>A base class for Service implementations\n"],["Azure::Core::Http","","Azure/Core/Http.html","",""],["Azure::Core::Http::DebugFilter","","Azure/Core/Http/DebugFilter.html","","<p>A HttpFilter implementation that displays information about the request and\nresponse for debugging\n"],["Azure::Core::Http::HTTPError","","Azure/Core/Http/HTTPError.html","","<p>Public: Class for handling all HTTP response errors\n"],["Azure::Core::Http::HttpFilter","","Azure/Core/Http/HttpFilter.html","","<p>A filter which can modify the HTTP pipeline both before and after\nrequests/responses. Multiple filters …\n"],["Azure::Core::Http::HttpRequest","","Azure/Core/Http/HttpRequest.html","","<p>Represents a HTTP request can perform synchronous queries to a HTTP server,\nreturning a HttpResponse …\n"],["Azure::Core::Http::HttpResponse","","Azure/Core/Http/HttpResponse.html","","<p>A small proxy to clean up the API of Net::HTTPResponse.\n"],["Azure::Core::Http::HttpResponse::MockResponse","","Azure/Core/Http/HttpResponse/MockResponse.html","","<p>TODO: This needs to be deleted and HttpError needs to be refactored to not\nrely on HttpResponse. The …\n"],["Azure::Core::Http::RetryPolicy","","Azure/Core/Http/RetryPolicy.html","","<p>A HttpFilter implementation that handles retrying based on a specific\npolicy when HTTP layer errors occur …\n"],["Azure::Core::Http::SignerFilter","","Azure/Core/Http/SignerFilter.html","","<p>A HttpFilter implementation that creates a authorization signature which is\nadded to the request headers …\n"],["Azure::Core::Logger","","Azure/Core/Logger.html","","<p>Logger\n"],["Azure::Core::Loggerx","","Azure/Core/Loggerx.html","","<p>Logger\n"],["Azure::Core::Service","","Azure/Core/Service.html","","<p>A base class for Service implementations\n"],["Azure::Core::SignedService","","Azure/Core/SignedService.html","","<p>A base class for Service implementations\n"],["Azure::Core::Utility","","Azure/Core/Utility.html","",""],["Azure::Core::Version","","Azure/Core/Version.html","",""],["Azure::Error","","Azure/Error.html","",""],["Azure::Error::Error","","Azure/Error/Error.html","","<p>Azure Error\n"],["Azure::HttpResponseHelper","","Azure/HttpResponseHelper.html","",""],["IPAddr","","IPAddr.html","","<p>Code validate private/public IP acceptable ranges.\n"],["String","","String.html","",""],["address_prefix","IPAddr","IPAddr.html#method-c-address_prefix","(ip, cidr)",""],["apply_body_headers","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-apply_body_headers","()",""],["apply_io_headers","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-apply_io_headers","()",""],["apply_miscellaneous_headers","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-apply_miscellaneous_headers","()",""],["apply_string_io_headers","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-apply_string_io_headers","()",""],["body","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-i-body","()","<p>Public: Get the response body.\n<p>Returns a String.\n"],["body=","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-body-3D","(body)",""],["call","Azure::Core::FilteredService","Azure/Core/FilteredService.html#method-i-call","(method, uri, body=nil, headers=nil, options={})",""],["call","Azure::Core::Http::DebugFilter","Azure/Core/Http/DebugFilter.html#method-i-call","(req, _next)",""],["call","Azure::Core::Http::HttpFilter","Azure/Core/Http/HttpFilter.html#method-i-call","(request, _next)","<p>Executes the filter\n<p>request - HttpRequest. The request _next   - An object that implements\n.call (no params) …\n"],["call","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-call","()","<p>Sends request to HTTP server and returns a HttpResponse\n<p>@return [HttpResponse]\n"],["call","Azure::Core::Http::RetryPolicy","Azure/Core/Http/RetryPolicy.html#method-i-call","(req, _next)","<p>Overrides the base class implementation of call to implement a retry loop\nthat uses should_retry? to …\n"],["call","Azure::Core::Http::SignerFilter","Azure/Core/Http/SignerFilter.html#method-i-call","(req, _next)",""],["call","Azure::Core::Service","Azure/Core/Service.html#method-i-call","(method, uri, body=nil, headers={})",""],["call","Azure::Core::SignedService","Azure/Core/SignedService.html#method-i-call","(method, uri, body=nil, headers=nil, options={})",""],["canonicalized_headers","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-i-canonicalized_headers","(headers)","<p>Calculate the Canonicalized Headers string for a request.\n<p>@param headers    [Hash] HTTP request headers. …\n"],["canonicalized_resource","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-i-canonicalized_resource","(uri)","<p>Calculate the Canonicalized Resource string for a request.\n<p>@param uri        [URI] URI of the request …\n"],["default_headers","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-default_headers","(current_time)","<p>Build a default headers Hash\n"],["enable_winrm?","Azure::Core::Utility","Azure/Core/Utility.html#method-i-enable_winrm-3F","(winrm_transport)",""],["error","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-i-error","()",""],["error","Azure::Core::Logger","Azure/Core/Logger.html#method-c-error","(msg)",""],["error","Azure::Core::Logger","Azure/Core/Logger.html#method-c-error","(msg)",""],["error_with_exit","Azure::Core::Logger","Azure/Core/Logger.html#method-c-error_with_exit","(msg)",""],["error_with_exit","Azure::Core::Logger","Azure/Core/Logger.html#method-c-error_with_exit","(msg)",""],["exception","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-i-exception","()","<p>Public: Get an error that wraps this HTTP response, as long as this\nresponse was unsuccessful. This method …\n"],["exception_message","Azure::Core::Logger","Azure/Core/Logger.html#method-c-exception_message","(msg)",""],["exception_message","Azure::Core::Logger","Azure/Core/Logger.html#method-c-exception_message","(msg)",""],["export_der","Azure::Core::Utility","Azure/Core/Utility.html#method-i-export_der","(cert, key, pass = nil, name = nil)",""],["export_fingerprint","Azure::Core::Utility","Azure/Core/Utility.html#method-i-export_fingerprint","(certificate)",""],["generate_uri","Azure::Core::Service","Azure/Core/Service.html#method-i-generate_uri","(path='', query={})",""],["get_certificate","Azure::Core::Utility","Azure/Core/Utility.html#method-i-get_certificate","(private_key_file)",""],["headers","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-i-headers","()","<p>Public: Get all the response headers as a Hash.\n<p>Returns a Hash.\n"],["http_setup","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-http_setup","()",""],["info","Azure::Core::Logger","Azure/Core/Logger.html#method-c-info","(msg)",""],["info","Azure::Core::Logger","Azure/Core/Logger.html#method-c-info","(msg)",""],["initialize_external_logger","Azure::Core::Logger","Azure/Core/Logger.html#method-c-initialize_external_logger","(logger)",""],["initialize_external_logger","Azure::Core::Logger","Azure/Core/Logger.html#method-c-initialize_external_logger","(logger)",""],["initialize_external_logger","Azure::Core::Utility","Azure/Core/Utility.html#method-i-initialize_external_logger","(logger)",""],["inspect","Azure::Core::Http::HTTPError","Azure/Core/Http/HTTPError.html#method-i-inspect","()",""],["locate_file","Azure::Core::Utility","Azure/Core/Utility.html#method-i-locate_file","(name)",""],["name","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-i-name","()","<p>The name of the strategy.\n<p>@return [String]\n"],["name","Azure::Core::Auth::SharedKeyLite","Azure/Core/Auth/SharedKeyLite.html#method-i-name","()","<p>The name of the strategy.\n<p>@return [String]\n"],["new","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-c-new","(account_name=Azure.storage_account_name, access_key=Azure.storage_access_key)","<p>Initialize the Signer.\n<p>@param account_name [String] The account name. Defaults to the one in the\n\n<pre>global ...</pre>\n"],["new","Azure::Core::Auth::Signer","Azure/Core/Auth/Signer.html#method-c-new","(access_key)","<p>Initialize the Signer.\n<p>@param access_key [String] The access_key encoded in Base64.\n"],["new","Azure::Core::FilteredService","Azure/Core/FilteredService.html#method-c-new","(host='', options={})","<p>Create a new instance of the FilteredService\n<p>@param host     [String] The hostname. (optional, Default …\n"],["new","Azure::Core::Http::HTTPError","Azure/Core/Http/HTTPError.html#method-c-new","(http_response)","<p>Public: Initialize an error\n<p>http_response - An Azure::Core::HttpResponse\n"],["new","Azure::Core::Http::HttpFilter","Azure/Core/Http/HttpFilter.html#method-c-new","(&block)","<p>Initialize a HttpFilter\n<p>&amp;block - An inline block which implements the filter.\n<p>The inline block should …\n"],["new","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-c-new","(method, uri, options_or_body = {})","<p>Public: Create the HttpRequest\n<p>@param method   [Symbol] The HTTP method to use (:get, :post, :put, :del, …\n"],["new","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-c-new","(http_response, uri='')","<p>Public: Initialize a new response.\n<p>http_response - A Net::HTTPResponse.\n"],["new","Azure::Core::Http::HttpResponse::MockResponse","Azure/Core/Http/HttpResponse/MockResponse.html#method-c-new","(code, body, headers)",""],["new","Azure::Core::Http::RetryPolicy","Azure/Core/Http/RetryPolicy.html#method-c-new","(&block)",""],["new","Azure::Core::Http::SignerFilter","Azure/Core/Http/SignerFilter.html#method-c-new","(signer)",""],["new","Azure::Core::Service","Azure/Core/Service.html#method-c-new","(host='', options = {})","<p>Create a new instance of the Service\n<p>@param host     [String] The hostname. (optional, Default empty) …\n"],["new","Azure::Core::SignedService","Azure/Core/SignedService.html#method-c-new","(signer=nil, account_name=nil, options={})","<p>Create a new instance of the SignedService\n<p>@param signer         [Azure::Core::Auth::Signer]. An implementation …\n"],["new","Azure::Error::Error","Azure/Error/Error.html#method-c-new","(type, status, description)",""],["parse_json_response","Azure::Core::Http::HTTPError","Azure/Core/Http/HTTPError.html#method-i-parse_json_response","()",""],["parse_response","Azure::Core::Http::HTTPError","Azure/Core/Http/HTTPError.html#method-i-parse_response","()","<p>Extract the relevant information from the response&#39;s body. If the\nresponse body is not an XML, we …\n"],["parse_unknown_response","Azure::Core::Http::HTTPError","Azure/Core/Http/HTTPError.html#method-i-parse_unknown_response","()",""],["parse_xml_response","Azure::Core::Http::HTTPError","Azure/Core/Http/HTTPError.html#method-i-parse_xml_response","()",""],["private?","IPAddr","IPAddr.html#method-i-private-3F","()",""],["public?","IPAddr","IPAddr.html#method-i-public-3F","()",""],["random_string","Azure::Core::Utility","Azure/Core/Utility.html#method-i-random_string","(str = 'azure', no_of_char = 5)",""],["set_up_response","Azure::HttpResponseHelper","Azure/HttpResponseHelper.html#method-i-set_up_response","(method, url, conn, headers ,body)","\n<pre>Sends request to HTTP server and returns a Faraday::Response\n@param method   [Symbol] The HTTP method ...</pre>\n"],["should_retry?","Azure::Core::Http::RetryPolicy","Azure/Core/Http/RetryPolicy.html#method-i-should_retry-3F","(response, retry_data)","<p>Determines if the HTTP request should continue retrying\n<p>response - HttpResponse. The response from the …\n"],["sign","Azure::Core::Auth::Authorizer","Azure/Core/Auth/Authorizer.html#method-i-sign","(request, signer)","<p>Public: Signs an HTTP request before it&#39;s made, by adding the\nAuthorization header\n<p>request - An Azure::Core::HttpRequest …\n"],["sign","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-i-sign","(method, uri, headers)","<p>Create the signature for the request parameters\n<p>@param method     [Symbol] HTTP request method. @param …\n"],["sign","Azure::Core::Auth::Signer","Azure/Core/Auth/Signer.html#method-i-sign","(body)","<p>Generate an HMAC signature.\n<p>@param body [String] The string to sign.\n<p>@return [String] a Base64 String signed …\n"],["sign_request","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-i-sign_request","(req)","<p>Sign the request\n<p>@param req    [Azure::Core::Http::HttpRequest] HTTP request to sign\n<p>@return       [Azure::Core::Http::HttpRequest] …\n"],["signable_string","Azure::Core::Auth::SharedKey","Azure/Core/Auth/SharedKey.html#method-i-signable_string","(method, uri, headers)","<p>Generate the string to sign.\n<p>@param method     [Symbol] HTTP request method. @param uri        [URI]  …\n"],["signable_string","Azure::Core::Auth::SharedKeyLite","Azure/Core/Auth/SharedKeyLite.html#method-i-signable_string","(method, uri, headers)","<p>Generate the string to sign.\n<p>@param method     [Symbol] The HTTP request method. @param uri        [URI]\n…\n"],["status_code","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-i-status_code","()","<p>Public: Get the response status code.\n<p>Returns a Fixnum.\n"],["success","Azure::Core::Logger","Azure/Core/Logger.html#method-c-success","(msg)",""],["success","Azure::Core::Logger","Azure/Core/Logger.html#method-c-success","(msg)",""],["success?","Azure::Core::Http::HttpResponse","Azure/Core/Http/HttpResponse.html#method-i-success-3F","()","<p>Public: Check if this response was successful. A request is considered\nsuccessful if the response is …\n"],["to_hash","Azure::Core::Http::HttpResponse::MockResponse","Azure/Core/Http/HttpResponse/MockResponse.html#method-i-to_hash","()",""],["to_s","Azure::Core::Version","Azure/Core/Version.html#method-c-to_s","()","<p>@return [String]\n"],["valid?","IPAddr","IPAddr.html#method-c-valid-3F","(ip)",""],["validate_address_space","IPAddr","IPAddr.html#method-c-validate_address_space","(ip)",""],["validate_ip_and_prefix","IPAddr","IPAddr.html#method-c-validate_ip_and_prefix","(ip, cidr)",""],["warn","Azure::Core::Logger","Azure/Core/Logger.html#method-c-warn","(msg)",""],["warn","Azure::Core::Logger","Azure/Core/Logger.html#method-c-warn","(msg)",""],["with_filter","Azure::Core::FilteredService","Azure/Core/FilteredService.html#method-i-with_filter","(filter=nil, &block)",""],["with_filter","Azure::Core::Http::HttpRequest","Azure/Core/Http/HttpRequest.html#method-i-with_filter","(filter=nil, options={}, &block)","<p>Public: Applies a HttpFilter to the HTTP Pipeline\n<p>filter - Any object that responds to .call(req, _next) …\n"],["xml_content","Azure::Core::Utility","Azure/Core/Utility.html#method-i-xml_content","(xml, key, default = '')",""]]}}