var search_data = {"index":{"searchIndex":["array","date","hash","mocha","api","anyinstancemethod","anyinstancereceiver","argumentiterator","arraymethods","backtracefilter","cardinality","central","changestatesideeffect","classmethod","classmethods","anyinstance","configuration","datemethods","debug","defaultname","defaultreceiver","deprecation","detection","minitest","testunit","exceptionraiser","expectation","expectationerror","expectationerrorfactory","expectationlist","hashmethods","hooks","impersonatinganyinstancename","impersonatingname","instateorderingconstraint","instancemethod","integration","assertioncounter","minitest","adapter","nothing","version13","runmethodpatch","version140","runmethodpatch","version141","runmethodpatch","version142to172","runmethodpatch","version200","runmethodpatch","version201to222","runmethodpatch","version2110to2111","runmethodpatch","version2112to320","runmethodpatch","version230to2101","runmethodpatch","monkeypatcher","testunit","adapter","gemversion200","runmethodpatch","gemversion201to202","runmethodpatch","gemversion203to220","runmethodpatch","gemversion230to250","runmethodpatch","nothing","rubyversion185andbelow","runmethodpatch","rubyversion186andabove","runmethodpatch","logger","methodmatcher","mock","mockery","modulemethod","modulemethods","multipleyields","name","noyields","objectmethods","objectreceiver","parametermatchers","allof","anyof","anyparameters","anything","base","equals","equivalenturi","hasentries","hasentry","haskey","hasvalue","includes","instanceof","isa","kindof","not","optionally","regexpmatches","respondswith","yamlequivalent","parametersmatcher","prettyparameters","returnvalues","sequence","insequenceorderingconstraint","singlereturnvalue","singleyield","statemachine","state","statepredicate","stubbingerror","thrower","timemethods","unexpectedinvocation","yieldparameters","object","time","&()","+()","+()","not()","__expectations__()","__expects__()","__stubs__()","__verified__?()","activate()","activate()","activate()","activate()","activate()","active?()","active?()","add()","add()","add_in_sequence_ordering_constraint()","add_mock()","add_ordering_constraint()","add_side_effect()","add_state_machine()","after_teardown()","all_expectations()","all_of()","allow()","allow?()","allowed_any_number_of_times?()","allows_invocation_now?()","allows_invocation_now?()","any?()","any_expectations?()","any_instance()","any_of()","any_parameters()","anything()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","applicable_to?()","apply()","at_least()","at_least()","at_least_once()","at_most()","at_most()","at_most_once()","become()","before_setup()","before_teardown()","build()","build()","change_config()","configuration()","constrain_as_next_in_sequence()","define_new_method()","define_new_method()","definition_target()","definition_target()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","each()","each()","each()","each()","ensure_method_not_already_defined()","equals()","equivalent_uri()","evaluate()","evaluate()","evaluate()","exactly()","expectations()","expects()","expects()","explode()","filtered()","full_description()","handle_mocha_expectation_error()","has_entries()","has_entry()","has_equivalent_query_string()","has_key()","has_value()","hide_original_method()","hide_original_method()","in_correct_order?()","in_sequence()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","includes()","increment()","infinite?()","inspect()","inspect()","instance()","instance_of()","invocations_allowed?()","invocations_allowed?()","invoke()","is()","is_a()","is_not()","kind_of()","length()","logger()","match()","match?()","match?()","match?()","match_allowing_invocation()","matchers()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_method?()","matches_method?()","matching_expectations()","method_exists?()","method_exists?()","method_exists?()","method_missing()","method_signature()","method_visibility()","method_visibility()","mocha()","mocha()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_inspect()","mocha_setup()","mocha_teardown()","mocha_verify()","mock()","mock()","mock()","mock_impersonating()","mock_impersonating_any_instance_of()","mocks()","mocks()","mocks()","mocks()","multiple_add()","multiple_yields()","named_mock()","needs_verifying?()","never()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_state_machine()","next()","next_invocation()","on_stubbing()","on_stubbing_method_on_nil()","on_stubbing_method_on_non_mock_object()","on_stubbing_method_unnecessarily()","on_stubbing_non_existent_method()","on_stubbing_non_public_method()","once()","optionally()","parameters_match?()","perform()","perform_side_effects()","pretty()","prevent()","prevent?()","puts()","quacks_like()","quacks_like_instance_of()","raises()","regexp_matches()","remove_all_matching_method()","remove_new_method()","remove_new_method()","remove_outer_array_braces!()","remove_outer_hash_braces!()","reset()","reset_configuration()","reset_instance()","reset_mocha()","reset_mocha()","reset_mocha()","respond_to?()","responds_like()","responds_like_instance_of()","responds_with()","restore_original_method()","restore_original_method()","returns()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","satisfied?()","satisfied?()","satisfied_expectations()","satisfied_to_index?()","sequence()","short_description()","starts_as()","state_machines()","states()","stub()","stub()","stub()","stub_everything()","stub_everything()","stubba()","stubba_method()","stubba_method()","stubba_method()","stubba_method()","stubba_object()","stubba_object()","stubs()","stubs()","teardown()","teardown()","temporarily_change_config()","testcase()","testcase()","then()","throws()","times()","times()","times()","to_a()","to_matcher()","to_matcher()","to_s()","to_set()","translate()","twice()","unnamed_mock()","unsatisfied_expectations()","unstub()","unstub()","unstub()","unstub()","unstub_all()","used?()","used?()","verified?()","verified?()","verified?()","verify()","verify()","version()","version()","warn()","warn_when()","warn_when?()","warning()","when()","with()","yaml_equivalent()","yields()","|()"],"longSearchIndex":["array","date","hash","mocha","mocha::api","mocha::anyinstancemethod","mocha::anyinstancereceiver","mocha::argumentiterator","mocha::arraymethods","mocha::backtracefilter","mocha::cardinality","mocha::central","mocha::changestatesideeffect","mocha::classmethod","mocha::classmethods","mocha::classmethods::anyinstance","mocha::configuration","mocha::datemethods","mocha::debug","mocha::defaultname","mocha::defaultreceiver","mocha::deprecation","mocha::detection","mocha::detection::minitest","mocha::detection::testunit","mocha::exceptionraiser","mocha::expectation","mocha::expectationerror","mocha::expectationerrorfactory","mocha::expectationlist","mocha::hashmethods","mocha::hooks","mocha::impersonatinganyinstancename","mocha::impersonatingname","mocha::instateorderingconstraint","mocha::instancemethod","mocha::integration","mocha::integration::assertioncounter","mocha::integration::minitest","mocha::integration::minitest::adapter","mocha::integration::minitest::nothing","mocha::integration::minitest::version13","mocha::integration::minitest::version13::runmethodpatch","mocha::integration::minitest::version140","mocha::integration::minitest::version140::runmethodpatch","mocha::integration::minitest::version141","mocha::integration::minitest::version141::runmethodpatch","mocha::integration::minitest::version142to172","mocha::integration::minitest::version142to172::runmethodpatch","mocha::integration::minitest::version200","mocha::integration::minitest::version200::runmethodpatch","mocha::integration::minitest::version201to222","mocha::integration::minitest::version201to222::runmethodpatch","mocha::integration::minitest::version2110to2111","mocha::integration::minitest::version2110to2111::runmethodpatch","mocha::integration::minitest::version2112to320","mocha::integration::minitest::version2112to320::runmethodpatch","mocha::integration::minitest::version230to2101","mocha::integration::minitest::version230to2101::runmethodpatch","mocha::integration::monkeypatcher","mocha::integration::testunit","mocha::integration::testunit::adapter","mocha::integration::testunit::gemversion200","mocha::integration::testunit::gemversion200::runmethodpatch","mocha::integration::testunit::gemversion201to202","mocha::integration::testunit::gemversion201to202::runmethodpatch","mocha::integration::testunit::gemversion203to220","mocha::integration::testunit::gemversion203to220::runmethodpatch","mocha::integration::testunit::gemversion230to250","mocha::integration::testunit::gemversion230to250::runmethodpatch","mocha::integration::testunit::nothing","mocha::integration::testunit::rubyversion185andbelow","mocha::integration::testunit::rubyversion185andbelow::runmethodpatch","mocha::integration::testunit::rubyversion186andabove","mocha::integration::testunit::rubyversion186andabove::runmethodpatch","mocha::logger","mocha::methodmatcher","mocha::mock","mocha::mockery","mocha::modulemethod","mocha::modulemethods","mocha::multipleyields","mocha::name","mocha::noyields","mocha::objectmethods","mocha::objectreceiver","mocha::parametermatchers","mocha::parametermatchers::allof","mocha::parametermatchers::anyof","mocha::parametermatchers::anyparameters","mocha::parametermatchers::anything","mocha::parametermatchers::base","mocha::parametermatchers::equals","mocha::parametermatchers::equivalenturi","mocha::parametermatchers::hasentries","mocha::parametermatchers::hasentry","mocha::parametermatchers::haskey","mocha::parametermatchers::hasvalue","mocha::parametermatchers::includes","mocha::parametermatchers::instanceof","mocha::parametermatchers::isa","mocha::parametermatchers::kindof","mocha::parametermatchers::not","mocha::parametermatchers::optionally","mocha::parametermatchers::regexpmatches","mocha::parametermatchers::respondswith","mocha::parametermatchers::yamlequivalent","mocha::parametersmatcher","mocha::prettyparameters","mocha::returnvalues","mocha::sequence","mocha::sequence::insequenceorderingconstraint","mocha::singlereturnvalue","mocha::singleyield","mocha::statemachine","mocha::statemachine::state","mocha::statemachine::statepredicate","mocha::stubbingerror","mocha::thrower","mocha::timemethods","mocha::unexpectedinvocation","mocha::yieldparameters","object","time","mocha::parametermatchers::base#&()","mocha::expectationlist#+()","mocha::returnvalues#+()","mocha::parametermatchers#not()","mocha::mock#__expectations__()","mocha::mock#__expects__()","mocha::mock#__stubs__()","mocha::mock#__verified__?()","mocha::activate()","mocha::integration::activate()","mocha::integration::minitest::activate()","mocha::integration::testunit::activate()","mocha::statemachine::state#activate()","mocha::statemachine::state#active?()","mocha::statemachine::statepredicate#active?()","mocha::expectationlist#add()","mocha::yieldparameters#add()","mocha::expectation#add_in_sequence_ordering_constraint()","mocha::mockery#add_mock()","mocha::expectation#add_ordering_constraint()","mocha::expectation#add_side_effect()","mocha::mockery#add_state_machine()","mocha::integration::minitest::adapter#after_teardown()","mocha::mock#all_expectations()","mocha::parametermatchers#all_of()","mocha::configuration::allow()","mocha::configuration::allow?()","mocha::cardinality#allowed_any_number_of_times?()","mocha::instateorderingconstraint#allows_invocation_now?()","mocha::sequence::insequenceorderingconstraint#allows_invocation_now?()","mocha::expectationlist#any?()","mocha::mock#any_expectations?()","mocha::classmethods#any_instance()","mocha::parametermatchers#any_of()","mocha::parametermatchers#any_parameters()","mocha::parametermatchers#anything()","mocha::integration::minitest::adapter::applicable_to?()","mocha::integration::minitest::nothing::applicable_to?()","mocha::integration::minitest::version13::applicable_to?()","mocha::integration::minitest::version140::applicable_to?()","mocha::integration::minitest::version141::applicable_to?()","mocha::integration::minitest::version142to172::applicable_to?()","mocha::integration::minitest::version200::applicable_to?()","mocha::integration::minitest::version201to222::applicable_to?()","mocha::integration::minitest::version2110to2111::applicable_to?()","mocha::integration::minitest::version2112to320::applicable_to?()","mocha::integration::minitest::version230to2101::applicable_to?()","mocha::integration::testunit::adapter::applicable_to?()","mocha::integration::testunit::gemversion200::applicable_to?()","mocha::integration::testunit::gemversion201to202::applicable_to?()","mocha::integration::testunit::gemversion203to220::applicable_to?()","mocha::integration::testunit::gemversion230to250::applicable_to?()","mocha::integration::testunit::nothing::applicable_to?()","mocha::integration::testunit::rubyversion185andbelow::applicable_to?()","mocha::integration::testunit::rubyversion186andabove::applicable_to?()","mocha::integration::monkeypatcher::apply()","mocha::cardinality::at_least()","mocha::expectation#at_least()","mocha::expectation#at_least_once()","mocha::cardinality::at_most()","mocha::expectation#at_most()","mocha::expectation#at_most_once()","mocha::statemachine#become()","mocha::integration::minitest::adapter#before_setup()","mocha::integration::minitest::adapter#before_teardown()","mocha::expectationerrorfactory::build()","mocha::returnvalues::build()","mocha::configuration::change_config()","mocha::configuration::configuration()","mocha::sequence#constrain_as_next_in_sequence()","mocha::anyinstancemethod#define_new_method()","mocha::classmethod#define_new_method()","mocha::anyinstancemethod#definition_target()","mocha::classmethod#definition_target()","mocha::integration::minitest::adapter::description()","mocha::integration::minitest::nothing::description()","mocha::integration::minitest::version13::description()","mocha::integration::minitest::version140::description()","mocha::integration::minitest::version141::description()","mocha::integration::minitest::version142to172::description()","mocha::integration::minitest::version200::description()","mocha::integration::minitest::version201to222::description()","mocha::integration::minitest::version2110to2111::description()","mocha::integration::minitest::version2112to320::description()","mocha::integration::minitest::version230to2101::description()","mocha::integration::testunit::adapter::description()","mocha::integration::testunit::gemversion200::description()","mocha::integration::testunit::gemversion201to202::description()","mocha::integration::testunit::gemversion203to220::description()","mocha::integration::testunit::gemversion230to250::description()","mocha::integration::testunit::nothing::description()","mocha::integration::testunit::rubyversion185andbelow::description()","mocha::integration::testunit::rubyversion186andabove::description()","mocha::argumentiterator#each()","mocha::multipleyields#each()","mocha::noyields#each()","mocha::singleyield#each()","mocha::mock#ensure_method_not_already_defined()","mocha::parametermatchers#equals()","mocha::parametermatchers#equivalent_uri()","mocha::exceptionraiser#evaluate()","mocha::singlereturnvalue#evaluate()","mocha::thrower#evaluate()","mocha::cardinality::exactly()","mocha::mockery#expectations()","mocha::mock#expects()","mocha::objectmethods#expects()","mocha::parametermatchers::equivalenturi#explode()","mocha::backtracefilter#filtered()","mocha::unexpectedinvocation#full_description()","mocha::integration::testunit::adapter#handle_mocha_expectation_error()","mocha::parametermatchers#has_entries()","mocha::parametermatchers#has_entry()","mocha::parametermatchers#has_equivalent_query_string()","mocha::parametermatchers#has_key()","mocha::parametermatchers#has_value()","mocha::anyinstancemethod#hide_original_method()","mocha::classmethod#hide_original_method()","mocha::expectation#in_correct_order?()","mocha::expectation#in_sequence()","mocha::api::included()","mocha::integration::minitest::adapter::included()","mocha::integration::minitest::nothing::included()","mocha::integration::minitest::version13::included()","mocha::integration::minitest::version140::included()","mocha::integration::minitest::version141::included()","mocha::integration::minitest::version142to172::included()","mocha::integration::minitest::version200::included()","mocha::integration::minitest::version201to222::included()","mocha::integration::minitest::version2110to2111::included()","mocha::integration::minitest::version2112to320::included()","mocha::integration::minitest::version230to2101::included()","mocha::integration::testunit::adapter::included()","mocha::integration::testunit::gemversion200::included()","mocha::integration::testunit::gemversion201to202::included()","mocha::integration::testunit::gemversion203to220::included()","mocha::integration::testunit::gemversion230to250::included()","mocha::integration::testunit::nothing::included()","mocha::integration::testunit::rubyversion185andbelow::included()","mocha::integration::testunit::rubyversion186andabove::included()","mocha::parametermatchers#includes()","mocha::integration::assertioncounter#increment()","mocha::cardinality#infinite?()","mocha::expectation#inspect()","mocha::mock#inspect()","mocha::mockery::instance()","mocha::parametermatchers#instance_of()","mocha::cardinality#invocations_allowed?()","mocha::expectation#invocations_allowed?()","mocha::expectation#invoke()","mocha::statemachine#is()","mocha::parametermatchers#is_a()","mocha::statemachine#is_not()","mocha::parametermatchers#kind_of()","mocha::expectationlist#length()","mocha::mockery#logger()","mocha::expectationlist#match()","mocha::expectation#match?()","mocha::methodmatcher#match?()","mocha::parametersmatcher#match?()","mocha::expectationlist#match_allowing_invocation()","mocha::parametersmatcher#matchers()","mocha::classmethod#matches?()","mocha::parametermatchers::allof#matches?()","mocha::parametermatchers::anyof#matches?()","mocha::parametermatchers::anyparameters#matches?()","mocha::parametermatchers::anything#matches?()","mocha::parametermatchers::equals#matches?()","mocha::parametermatchers::equivalenturi#matches?()","mocha::parametermatchers::hasentries#matches?()","mocha::parametermatchers::hasentry#matches?()","mocha::parametermatchers::haskey#matches?()","mocha::parametermatchers::hasvalue#matches?()","mocha::parametermatchers::includes#matches?()","mocha::parametermatchers::instanceof#matches?()","mocha::parametermatchers::isa#matches?()","mocha::parametermatchers::kindof#matches?()","mocha::parametermatchers::not#matches?()","mocha::parametermatchers::optionally#matches?()","mocha::parametermatchers::regexpmatches#matches?()","mocha::parametermatchers::respondswith#matches?()","mocha::parametermatchers::yamlequivalent#matches?()","mocha::expectation#matches_method?()","mocha::expectationlist#matches_method?()","mocha::expectationlist#matching_expectations()","mocha::classmethods::anyinstance#method_exists?()","mocha::modulemethod#method_exists?()","mocha::objectmethods#method_exists?()","mocha::mock#method_missing()","mocha::expectation#method_signature()","mocha::anyinstancemethod#method_visibility()","mocha::classmethod#method_visibility()","mocha::classmethods::anyinstance#mocha()","mocha::objectmethods#mocha()","mocha::arraymethods#mocha_inspect()","mocha::cardinality#mocha_inspect()","mocha::changestatesideeffect#mocha_inspect()","mocha::datemethods#mocha_inspect()","mocha::defaultname#mocha_inspect()","mocha::expectation#mocha_inspect()","mocha::hashmethods#mocha_inspect()","mocha::impersonatinganyinstancename#mocha_inspect()","mocha::impersonatingname#mocha_inspect()","mocha::instateorderingconstraint#mocha_inspect()","mocha::methodmatcher#mocha_inspect()","mocha::mock#mocha_inspect()","mocha::mockery#mocha_inspect()","mocha::name#mocha_inspect()","mocha::objectmethods#mocha_inspect()","mocha::parametermatchers::allof#mocha_inspect()","mocha::parametermatchers::anyof#mocha_inspect()","mocha::parametermatchers::anyparameters#mocha_inspect()","mocha::parametermatchers::anything#mocha_inspect()","mocha::parametermatchers::equals#mocha_inspect()","mocha::parametermatchers::equivalenturi#mocha_inspect()","mocha::parametermatchers::hasentries#mocha_inspect()","mocha::parametermatchers::hasentry#mocha_inspect()","mocha::parametermatchers::haskey#mocha_inspect()","mocha::parametermatchers::hasvalue#mocha_inspect()","mocha::parametermatchers::includes#mocha_inspect()","mocha::parametermatchers::instanceof#mocha_inspect()","mocha::parametermatchers::isa#mocha_inspect()","mocha::parametermatchers::kindof#mocha_inspect()","mocha::parametermatchers::not#mocha_inspect()","mocha::parametermatchers::optionally#mocha_inspect()","mocha::parametermatchers::regexpmatches#mocha_inspect()","mocha::parametermatchers::respondswith#mocha_inspect()","mocha::parametermatchers::yamlequivalent#mocha_inspect()","mocha::parametersmatcher#mocha_inspect()","mocha::sequence#mocha_inspect()","mocha::sequence::insequenceorderingconstraint#mocha_inspect()","mocha::statemachine#mocha_inspect()","mocha::statemachine::state#mocha_inspect()","mocha::statemachine::statepredicate#mocha_inspect()","mocha::timemethods#mocha_inspect()","mocha::hooks#mocha_setup()","mocha::hooks#mocha_teardown()","mocha::hooks#mocha_verify()","mocha::api#mock()","mocha::anyinstancemethod#mock()","mocha::classmethod#mock()","mocha::mockery#mock_impersonating()","mocha::mockery#mock_impersonating_any_instance_of()","mocha::anyinstancereceiver#mocks()","mocha::defaultreceiver#mocks()","mocha::mockery#mocks()","mocha::objectreceiver#mocks()","mocha::yieldparameters#multiple_add()","mocha::expectation#multiple_yields()","mocha::mockery#named_mock()","mocha::cardinality#needs_verifying?()","mocha::expectation#never()","mocha::anyinstancereceiver::new()","mocha::argumentiterator::new()","mocha::backtracefilter::new()","mocha::cardinality::new()","mocha::central::new()","mocha::changestatesideeffect::new()","mocha::classmethod::new()","mocha::classmethods::anyinstance::new()","mocha::defaultname::new()","mocha::defaultreceiver::new()","mocha::exceptionraiser::new()","mocha::expectation::new()","mocha::expectationlist::new()","mocha::impersonatinganyinstancename::new()","mocha::impersonatingname::new()","mocha::instateorderingconstraint::new()","mocha::integration::assertioncounter::new()","mocha::logger::new()","mocha::methodmatcher::new()","mocha::mock::new()","mocha::multipleyields::new()","mocha::name::new()","mocha::objectreceiver::new()","mocha::parametermatchers::allof::new()","mocha::parametermatchers::anyof::new()","mocha::parametermatchers::equals::new()","mocha::parametermatchers::equivalenturi::new()","mocha::parametermatchers::hasentries::new()","mocha::parametermatchers::hasentry::new()","mocha::parametermatchers::haskey::new()","mocha::parametermatchers::hasvalue::new()","mocha::parametermatchers::includes::new()","mocha::parametermatchers::instanceof::new()","mocha::parametermatchers::isa::new()","mocha::parametermatchers::kindof::new()","mocha::parametermatchers::not::new()","mocha::parametermatchers::optionally::new()","mocha::parametermatchers::regexpmatches::new()","mocha::parametermatchers::respondswith::new()","mocha::parametermatchers::yamlequivalent::new()","mocha::parametersmatcher::new()","mocha::prettyparameters::new()","mocha::returnvalues::new()","mocha::sequence::new()","mocha::sequence::insequenceorderingconstraint::new()","mocha::singlereturnvalue::new()","mocha::singleyield::new()","mocha::statemachine::new()","mocha::statemachine::state::new()","mocha::statemachine::statepredicate::new()","mocha::stubbingerror::new()","mocha::thrower::new()","mocha::unexpectedinvocation::new()","mocha::yieldparameters::new()","mocha::mockery#new_state_machine()","mocha::returnvalues#next()","mocha::yieldparameters#next_invocation()","mocha::mockery#on_stubbing()","mocha::mockery#on_stubbing_method_on_nil()","mocha::mockery#on_stubbing_method_on_non_mock_object()","mocha::mockery#on_stubbing_method_unnecessarily()","mocha::mockery#on_stubbing_non_existent_method()","mocha::mockery#on_stubbing_non_public_method()","mocha::expectation#once()","mocha::parametermatchers#optionally()","mocha::parametersmatcher#parameters_match?()","mocha::changestatesideeffect#perform()","mocha::expectation#perform_side_effects()","mocha::prettyparameters#pretty()","mocha::configuration::prevent()","mocha::configuration::prevent?()","mocha::debug::puts()","mocha::mock#quacks_like()","mocha::mock#quacks_like_instance_of()","mocha::expectation#raises()","mocha::parametermatchers#regexp_matches()","mocha::expectationlist#remove_all_matching_method()","mocha::anyinstancemethod#remove_new_method()","mocha::classmethod#remove_new_method()","mocha::prettyparameters#remove_outer_array_braces!()","mocha::prettyparameters#remove_outer_hash_braces!()","mocha::mockery#reset()","mocha::configuration::reset_configuration()","mocha::mockery::reset_instance()","mocha::anyinstancemethod#reset_mocha()","mocha::classmethod#reset_mocha()","mocha::objectmethods#reset_mocha()","mocha::mock#respond_to?()","mocha::mock#responds_like()","mocha::mock#responds_like_instance_of()","mocha::parametermatchers#responds_with()","mocha::anyinstancemethod#restore_original_method()","mocha::classmethod#restore_original_method()","mocha::expectation#returns()","mocha::integration::minitest::version13::runmethodpatch#run()","mocha::integration::minitest::version140::runmethodpatch#run()","mocha::integration::minitest::version141::runmethodpatch#run()","mocha::integration::minitest::version142to172::runmethodpatch#run()","mocha::integration::minitest::version200::runmethodpatch#run()","mocha::integration::minitest::version201to222::runmethodpatch#run()","mocha::integration::minitest::version2110to2111::runmethodpatch#run()","mocha::integration::minitest::version2112to320::runmethodpatch#run()","mocha::integration::minitest::version230to2101::runmethodpatch#run()","mocha::integration::testunit::gemversion200::runmethodpatch#run()","mocha::integration::testunit::gemversion201to202::runmethodpatch#run()","mocha::integration::testunit::gemversion203to220::runmethodpatch#run()","mocha::integration::testunit::gemversion230to250::runmethodpatch#run()","mocha::integration::testunit::rubyversion185andbelow::runmethodpatch#run()","mocha::integration::testunit::rubyversion186andabove::runmethodpatch#run()","mocha::cardinality#satisfied?()","mocha::expectation#satisfied?()","mocha::mockery#satisfied_expectations()","mocha::sequence#satisfied_to_index?()","mocha::api#sequence()","mocha::unexpectedinvocation#short_description()","mocha::statemachine#starts_as()","mocha::mockery#state_machines()","mocha::api#states()","mocha::api#stub()","mocha::central#stub()","mocha::classmethod#stub()","mocha::api#stub_everything()","mocha::mock#stub_everything()","mocha::mockery#stubba()","mocha::classmethods#stubba_method()","mocha::classmethods::anyinstance#stubba_method()","mocha::modulemethods#stubba_method()","mocha::objectmethods#stubba_method()","mocha::classmethods::anyinstance#stubba_object()","mocha::objectmethods#stubba_object()","mocha::mock#stubs()","mocha::objectmethods#stubs()","mocha::mockery#teardown()","mocha::mockery::teardown()","mocha::configuration::temporarily_change_config()","mocha::detection::minitest::testcase()","mocha::detection::testunit::testcase()","mocha::expectation#then()","mocha::expectation#throws()","mocha::cardinality#times()","mocha::cardinality::times()","mocha::expectation#times()","mocha::expectationlist#to_a()","mocha::objectmethods#to_matcher()","mocha::parametermatchers::base#to_matcher()","mocha::classmethod#to_s()","mocha::expectationlist#to_set()","mocha::integration::minitest::translate()","mocha::expectation#twice()","mocha::mockery#unnamed_mock()","mocha::mockery#unsatisfied_expectations()","mocha::central#unstub()","mocha::classmethod#unstub()","mocha::mock#unstub()","mocha::objectmethods#unstub()","mocha::central#unstub_all()","mocha::cardinality#used?()","mocha::expectation#used?()","mocha::cardinality#verified?()","mocha::expectation#verified?()","mocha::expectationlist#verified?()","mocha::mockery#verify()","mocha::mockery::verify()","mocha::detection::minitest::version()","mocha::detection::testunit::version()","mocha::logger#warn()","mocha::configuration::warn_when()","mocha::configuration::warn_when?()","mocha::deprecation::warning()","mocha::expectation#when()","mocha::expectation#with()","mocha::parametermatchers#yaml_equivalent()","mocha::expectation#yields()","mocha::parametermatchers::base#|()"],"info":[["Array","","Array.html","",""],["Date","","Date.html","",""],["Hash","","Hash.html","",""],["Mocha","","Mocha.html","",""],["Mocha::API","","Mocha/API.html","","<p>Methods added to <code>Test::Unit::TestCase</code>,\n<code>MiniTest::Unit::TestCase</code> or equivalent.\n"],["Mocha::AnyInstanceMethod","","Mocha/AnyInstanceMethod.html","",""],["Mocha::AnyInstanceReceiver","","Mocha/AnyInstanceReceiver.html","",""],["Mocha::ArgumentIterator","","Mocha/ArgumentIterator.html","",""],["Mocha::ArrayMethods","","Mocha/ArrayMethods.html","",""],["Mocha::BacktraceFilter","","Mocha/BacktraceFilter.html","",""],["Mocha::Cardinality","","Mocha/Cardinality.html","",""],["Mocha::Central","","Mocha/Central.html","",""],["Mocha::ChangeStateSideEffect","","Mocha/ChangeStateSideEffect.html","",""],["Mocha::ClassMethod","","Mocha/ClassMethod.html","",""],["Mocha::ClassMethods","","Mocha/ClassMethods.html","","<p>Methods added to all classes to allow mocking and stubbing on real (i.e.\nnon-mock) objects.\n"],["Mocha::ClassMethods::AnyInstance","","Mocha/ClassMethods/AnyInstance.html","","<p>@private\n"],["Mocha::Configuration","","Mocha/Configuration.html","","<p>Configuration settings.\n"],["Mocha::DateMethods","","Mocha/DateMethods.html","",""],["Mocha::Debug","","Mocha/Debug.html","",""],["Mocha::DefaultName","","Mocha/DefaultName.html","",""],["Mocha::DefaultReceiver","","Mocha/DefaultReceiver.html","",""],["Mocha::Deprecation","","Mocha/Deprecation.html","",""],["Mocha::Detection","","Mocha/Detection.html","",""],["Mocha::Detection::MiniTest","","Mocha/Detection/MiniTest.html","",""],["Mocha::Detection::TestUnit","","Mocha/Detection/TestUnit.html","",""],["Mocha::ExceptionRaiser","","Mocha/ExceptionRaiser.html","",""],["Mocha::Expectation","","Mocha/Expectation.html","","<p>Methods on expectations returned from {Mock#expects}, {Mock#stubs},\n{ObjectMethods#expects} and {ObjectMethods#stubs}. …\n"],["Mocha::ExpectationError","","Mocha/ExpectationError.html","","<p>Default exception class raised when an unexpected invocation or an\nunsatisfied expectation occurs.\n<p>Authors …\n"],["Mocha::ExpectationErrorFactory","","Mocha/ExpectationErrorFactory.html","","<p>This factory determines what class of exception should be raised when Mocha\ndetects a test failure.\n<p>This …\n"],["Mocha::ExpectationList","","Mocha/ExpectationList.html","",""],["Mocha::HashMethods","","Mocha/HashMethods.html","",""],["Mocha::Hooks","","Mocha/Hooks.html","","<p>Integration hooks for test library authors.\n<p>The methods in this module should be called from test libraries …\n"],["Mocha::ImpersonatingAnyInstanceName","","Mocha/ImpersonatingAnyInstanceName.html","",""],["Mocha::ImpersonatingName","","Mocha/ImpersonatingName.html","",""],["Mocha::InStateOrderingConstraint","","Mocha/InStateOrderingConstraint.html","",""],["Mocha::InstanceMethod","","Mocha/InstanceMethod.html","",""],["Mocha::Integration","","Mocha/Integration.html","",""],["Mocha::Integration::AssertionCounter","","Mocha/Integration/AssertionCounter.html","",""],["Mocha::Integration::MiniTest","","Mocha/Integration/MiniTest.html","",""],["Mocha::Integration::MiniTest::Adapter","","Mocha/Integration/MiniTest/Adapter.html","","<p>Integrates Mocha into recent versions of MiniTest.\n<p>See the source code for an example of how to integrate …\n"],["Mocha::Integration::MiniTest::Nothing","","Mocha/Integration/MiniTest/Nothing.html","",""],["Mocha::Integration::MiniTest::Version13","","Mocha/Integration/MiniTest/Version13.html","",""],["Mocha::Integration::MiniTest::Version13::RunMethodPatch","","Mocha/Integration/MiniTest/Version13/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version140","","Mocha/Integration/MiniTest/Version140.html","",""],["Mocha::Integration::MiniTest::Version140::RunMethodPatch","","Mocha/Integration/MiniTest/Version140/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version141","","Mocha/Integration/MiniTest/Version141.html","",""],["Mocha::Integration::MiniTest::Version141::RunMethodPatch","","Mocha/Integration/MiniTest/Version141/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version142To172","","Mocha/Integration/MiniTest/Version142To172.html","",""],["Mocha::Integration::MiniTest::Version142To172::RunMethodPatch","","Mocha/Integration/MiniTest/Version142To172/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version200","","Mocha/Integration/MiniTest/Version200.html","",""],["Mocha::Integration::MiniTest::Version200::RunMethodPatch","","Mocha/Integration/MiniTest/Version200/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version201To222","","Mocha/Integration/MiniTest/Version201To222.html","",""],["Mocha::Integration::MiniTest::Version201To222::RunMethodPatch","","Mocha/Integration/MiniTest/Version201To222/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version2110To2111","","Mocha/Integration/MiniTest/Version2110To2111.html","",""],["Mocha::Integration::MiniTest::Version2110To2111::RunMethodPatch","","Mocha/Integration/MiniTest/Version2110To2111/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version2112To320","","Mocha/Integration/MiniTest/Version2112To320.html","",""],["Mocha::Integration::MiniTest::Version2112To320::RunMethodPatch","","Mocha/Integration/MiniTest/Version2112To320/RunMethodPatch.html","",""],["Mocha::Integration::MiniTest::Version230To2101","","Mocha/Integration/MiniTest/Version230To2101.html","",""],["Mocha::Integration::MiniTest::Version230To2101::RunMethodPatch","","Mocha/Integration/MiniTest/Version230To2101/RunMethodPatch.html","",""],["Mocha::Integration::MonkeyPatcher","","Mocha/Integration/MonkeyPatcher.html","",""],["Mocha::Integration::TestUnit","","Mocha/Integration/TestUnit.html","",""],["Mocha::Integration::TestUnit::Adapter","","Mocha/Integration/TestUnit/Adapter.html","","<p>Integrates Mocha into recent versions of Test::Unit.\n<p>See the source code for an example of how to integrate …\n"],["Mocha::Integration::TestUnit::GemVersion200","","Mocha/Integration/TestUnit/GemVersion200.html","",""],["Mocha::Integration::TestUnit::GemVersion200::RunMethodPatch","","Mocha/Integration/TestUnit/GemVersion200/RunMethodPatch.html","",""],["Mocha::Integration::TestUnit::GemVersion201To202","","Mocha/Integration/TestUnit/GemVersion201To202.html","",""],["Mocha::Integration::TestUnit::GemVersion201To202::RunMethodPatch","","Mocha/Integration/TestUnit/GemVersion201To202/RunMethodPatch.html","",""],["Mocha::Integration::TestUnit::GemVersion203To220","","Mocha/Integration/TestUnit/GemVersion203To220.html","",""],["Mocha::Integration::TestUnit::GemVersion203To220::RunMethodPatch","","Mocha/Integration/TestUnit/GemVersion203To220/RunMethodPatch.html","",""],["Mocha::Integration::TestUnit::GemVersion230To250","","Mocha/Integration/TestUnit/GemVersion230To250.html","",""],["Mocha::Integration::TestUnit::GemVersion230To250::RunMethodPatch","","Mocha/Integration/TestUnit/GemVersion230To250/RunMethodPatch.html","",""],["Mocha::Integration::TestUnit::Nothing","","Mocha/Integration/TestUnit/Nothing.html","",""],["Mocha::Integration::TestUnit::RubyVersion185AndBelow","","Mocha/Integration/TestUnit/RubyVersion185AndBelow.html","",""],["Mocha::Integration::TestUnit::RubyVersion185AndBelow::RunMethodPatch","","Mocha/Integration/TestUnit/RubyVersion185AndBelow/RunMethodPatch.html","",""],["Mocha::Integration::TestUnit::RubyVersion186AndAbove","","Mocha/Integration/TestUnit/RubyVersion186AndAbove.html","",""],["Mocha::Integration::TestUnit::RubyVersion186AndAbove::RunMethodPatch","","Mocha/Integration/TestUnit/RubyVersion186AndAbove/RunMethodPatch.html","",""],["Mocha::Logger","","Mocha/Logger.html","",""],["Mocha::MethodMatcher","","Mocha/MethodMatcher.html","",""],["Mocha::Mock","","Mocha/Mock.html","","<p>Traditional mock object.\n<p>All methods return an {Expectation} which can be further modified by\nmethods …\n"],["Mocha::Mockery","","Mocha/Mockery.html","",""],["Mocha::ModuleMethod","","Mocha/ModuleMethod.html","",""],["Mocha::ModuleMethods","","Mocha/ModuleMethods.html","","<p>@private\n"],["Mocha::MultipleYields","","Mocha/MultipleYields.html","",""],["Mocha::Name","","Mocha/Name.html","",""],["Mocha::NoYields","","Mocha/NoYields.html","",""],["Mocha::ObjectMethods","","Mocha/ObjectMethods.html","","<p>Methods added to all objects to allow mocking and stubbing on real (i.e.\nnon-mock) objects.\n<p>Both {#expects} …\n"],["Mocha::ObjectReceiver","","Mocha/ObjectReceiver.html","",""],["Mocha::ParameterMatchers","","Mocha/ParameterMatchers.html","","<p>Used as parameters for {Expectation#with} to restrict the parameter values\nwhich will match the expectation. …\n"],["Mocha::ParameterMatchers::AllOf","","Mocha/ParameterMatchers/AllOf.html","","<p>Parameter matcher which combines a number of other matchers using a logical\nAND.\n"],["Mocha::ParameterMatchers::AnyOf","","Mocha/ParameterMatchers/AnyOf.html","","<p>Parameter matcher which combines a number of other matchers using a logical\nOR.\n"],["Mocha::ParameterMatchers::AnyParameters","","Mocha/ParameterMatchers/AnyParameters.html","","<p>Parameter matcher which always matches whatever the parameters.\n"],["Mocha::ParameterMatchers::Anything","","Mocha/ParameterMatchers/Anything.html","","<p>Parameter matcher which always matches a single parameter.\n"],["Mocha::ParameterMatchers::Base","","Mocha/ParameterMatchers/Base.html","","<p>@abstract Subclass and implement <code>#matches?</code> and\n<code>#mocha_inspect</code> to define a custom matcher. Also add a …\n"],["Mocha::ParameterMatchers::Equals","","Mocha/ParameterMatchers/Equals.html","","<p>Parameter matcher which matches when actual parameter equals expected\nvalue.\n"],["Mocha::ParameterMatchers::EquivalentUri","","Mocha/ParameterMatchers/EquivalentUri.html","","<p>Parameter matcher which matches URIs with equivalent query strings.\n"],["Mocha::ParameterMatchers::HasEntries","","Mocha/ParameterMatchers/HasEntries.html","","<p>Parameter matcher which matches when actual parameter contains all expected\n<code>Hash</code> entries.\n"],["Mocha::ParameterMatchers::HasEntry","","Mocha/ParameterMatchers/HasEntry.html","","<p>Parameter matcher which matches when actual parameter contains expected\n<code>Hash</code> entry.\n"],["Mocha::ParameterMatchers::HasKey","","Mocha/ParameterMatchers/HasKey.html","","<p>Parameter matcher which matches when actual parameter contains\n<code>Hash</code> entry with expected key.\n"],["Mocha::ParameterMatchers::HasValue","","Mocha/ParameterMatchers/HasValue.html","","<p>Parameter matcher which matches when actual parameter contains\n<code>Hash</code> entry with expected value.\n"],["Mocha::ParameterMatchers::Includes","","Mocha/ParameterMatchers/Includes.html","","<p>Parameter matcher which matches when actual parameter includes expected\nvalues.\n"],["Mocha::ParameterMatchers::InstanceOf","","Mocha/ParameterMatchers/InstanceOf.html","","<p>Parameter matcher which matches when actual parameter is an instance of the\nspecified class.\n"],["Mocha::ParameterMatchers::IsA","","Mocha/ParameterMatchers/IsA.html","","<p>Parameter matcher which matches when actual parameter is a specific class.\n"],["Mocha::ParameterMatchers::KindOf","","Mocha/ParameterMatchers/KindOf.html","","<p>Parameter matcher which matches when actual parameter is a kind of\nspecified class.\n"],["Mocha::ParameterMatchers::Not","","Mocha/ParameterMatchers/Not.html","","<p>Parameter matcher which inverts the logic of the specified matcher using a\nlogical NOT operation.\n"],["Mocha::ParameterMatchers::Optionally","","Mocha/ParameterMatchers/Optionally.html","","<p>Parameter matcher which allows optional parameters to be specified.\n"],["Mocha::ParameterMatchers::RegexpMatches","","Mocha/ParameterMatchers/RegexpMatches.html","","<p>Parameter matcher which matches if specified regular expression matches\nactual paramter.\n"],["Mocha::ParameterMatchers::RespondsWith","","Mocha/ParameterMatchers/RespondsWith.html","","<p>Parameter matcher which matches if actual parameter returns expected result\nwhen specified method is …\n"],["Mocha::ParameterMatchers::YamlEquivalent","","Mocha/ParameterMatchers/YamlEquivalent.html","","<p>Parameter matcher which matches if actual parameter is YAML equivalent of\nspecified object.\n"],["Mocha::ParametersMatcher","","Mocha/ParametersMatcher.html","",""],["Mocha::PrettyParameters","","Mocha/PrettyParameters.html","",""],["Mocha::ReturnValues","","Mocha/ReturnValues.html","",""],["Mocha::Sequence","","Mocha/Sequence.html","","<p>Used to constrain the order in which expectations can occur.\n<p>@see API#sequence @see Expectation#in_sequence …\n"],["Mocha::Sequence::InSequenceOrderingConstraint","","Mocha/Sequence/InSequenceOrderingConstraint.html","","<p>@private\n"],["Mocha::SingleReturnValue","","Mocha/SingleReturnValue.html","",""],["Mocha::SingleYield","","Mocha/SingleYield.html","",""],["Mocha::StateMachine","","Mocha/StateMachine.html","","<p>A state machine that is used to constrain the order of invocations. An\ninvocation can be constrained …\n"],["Mocha::StateMachine::State","","Mocha/StateMachine/State.html","","<p>Provides a mechanism to change the state of a {StateMachine} at some point\nin the future.\n"],["Mocha::StateMachine::StatePredicate","","Mocha/StateMachine/StatePredicate.html","","<p>Provides the ability to determine whether a {StateMachine} is in a\nspecified state at some point in the …\n"],["Mocha::StubbingError","","Mocha/StubbingError.html","","<p>Exception raised when stubbing a particular method is not allowed.\n<p>@see Configuration.prevent\n"],["Mocha::Thrower","","Mocha/Thrower.html","",""],["Mocha::TimeMethods","","Mocha/TimeMethods.html","",""],["Mocha::UnexpectedInvocation","","Mocha/UnexpectedInvocation.html","","<p>Exception raised when an unexpected method is invoked\n"],["Mocha::YieldParameters","","Mocha/YieldParameters.html","",""],["Object","","Object.html","","<p>@private\n"],["Time","","Time.html","",""],["&","Mocha::ParameterMatchers::Base","Mocha/ParameterMatchers/Base.html#method-i-26","(matcher)","<p>A shorthand way of combining two matchers when both must match.\n<p>Returns a new {AllOf} parameter matcher …\n"],["+","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-2B","(other)",""],["+","Mocha::ReturnValues","Mocha/ReturnValues.html#method-i-2B","(other)",""],["Not","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-Not","(matcher)","<p>Matches if <code>matcher</code> does <strong>not</strong> match.\n<p>@param [Base] matcher matcher whose logic to invert. @return [Not] …\n"],["__expectations__","Mocha::Mock","Mocha/Mock.html#method-i-__expectations__","()","<p>@private\n"],["__expects__","Mocha::Mock","Mocha/Mock.html#method-i-__expects__","(method_name_or_hash, backtrace = nil)",""],["__stubs__","Mocha::Mock","Mocha/Mock.html#method-i-__stubs__","(method_name_or_hash, backtrace = nil)",""],["__verified__?","Mocha::Mock","Mocha/Mock.html#method-i-__verified__-3F","(assertion_counter = nil)","<p>@private\n"],["activate","Mocha","Mocha.html#method-c-activate","()",""],["activate","Mocha::Integration","Mocha/Integration.html#method-c-activate","()",""],["activate","Mocha::Integration::MiniTest","Mocha/Integration/MiniTest.html#method-c-activate","()",""],["activate","Mocha::Integration::TestUnit","Mocha/Integration/TestUnit.html#method-c-activate","()",""],["activate","Mocha::StateMachine::State","Mocha/StateMachine/State.html#method-i-activate","()","<p>@private\n"],["active?","Mocha::StateMachine::State","Mocha/StateMachine/State.html#method-i-active-3F","()","<p>@private\n"],["active?","Mocha::StateMachine::StatePredicate","Mocha/StateMachine/StatePredicate.html#method-i-active-3F","()","<p>@private\n"],["add","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-add","(expectation)",""],["add","Mocha::YieldParameters","Mocha/YieldParameters.html#method-i-add","(*parameters)",""],["add_in_sequence_ordering_constraint","Mocha::Expectation","Mocha/Expectation.html#method-i-add_in_sequence_ordering_constraint","(sequence)","<p>@private\n"],["add_mock","Mocha::Mockery","Mocha/Mockery.html#method-i-add_mock","(mock)",""],["add_ordering_constraint","Mocha::Expectation","Mocha/Expectation.html#method-i-add_ordering_constraint","(ordering_constraint)","<p>@private\n"],["add_side_effect","Mocha::Expectation","Mocha/Expectation.html#method-i-add_side_effect","(side_effect)","<p>@private\n"],["add_state_machine","Mocha::Mockery","Mocha/Mockery.html#method-i-add_state_machine","(state_machine)",""],["after_teardown","Mocha::Integration::MiniTest::Adapter","Mocha/Integration/MiniTest/Adapter.html#method-i-after_teardown","()","<p>@private\n"],["all_expectations","Mocha::Mock","Mocha/Mock.html#method-i-all_expectations","()","<p>@private\n"],["all_of","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-all_of","(*matchers)","<p>Matches if all <code>matchers</code> match.\n<p>@param [*Array&lt;Base&gt;] parameter_matchers parameter matchers. @return\n…\n"],["allow","Mocha::Configuration","Mocha/Configuration.html#method-c-allow","(action, &block)","<p>Allow the specified <code>action</code>.\n<p>@param [Symbol] action one of <code>:stubbing_method_unnecessarily</code>,\n<code>:stubbing_method_on_non_mock_object</code> …\n"],["allow?","Mocha::Configuration","Mocha/Configuration.html#method-c-allow-3F","(action)","<p>@private\n"],["allowed_any_number_of_times?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-allowed_any_number_of_times-3F","()",""],["allows_invocation_now?","Mocha::InStateOrderingConstraint","Mocha/InStateOrderingConstraint.html#method-i-allows_invocation_now-3F","()",""],["allows_invocation_now?","Mocha::Sequence::InSequenceOrderingConstraint","Mocha/Sequence/InSequenceOrderingConstraint.html#method-i-allows_invocation_now-3F","()",""],["any?","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-any-3F","()",""],["any_expectations?","Mocha::Mock","Mocha/Mock.html#method-i-any_expectations-3F","()","<p>@private\n"],["any_instance","Mocha::ClassMethods","Mocha/ClassMethods.html#method-i-any_instance","()","<p>@return [Mock] a mock object which will detect calls to any instance of\nthis class. @raise [StubbingError] …\n"],["any_of","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-any_of","(*matchers)","<p>Matches if any <code>matchers</code> match.\n<p>@param [*Array&lt;Base&gt;] parameter_matchers parameter matchers. @return\n…\n"],["any_parameters","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-any_parameters","()","<p>Matches any parameters. This is used as the default for a newly built\nexpectation.\n<p>@return [AnyParameters] …\n"],["anything","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-anything","()","<p>Matches any object.\n<p>@return [Anything] parameter matcher.\n<p>@see Expectation#with\n"],["applicable_to?","Mocha::Integration::MiniTest::Adapter","Mocha/Integration/MiniTest/Adapter.html#method-c-applicable_to-3F","(mini_test_version)","<p>@private\n"],["applicable_to?","Mocha::Integration::MiniTest::Nothing","Mocha/Integration/MiniTest/Nothing.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)",""],["applicable_to?","Mocha::Integration::MiniTest::Version13","Mocha/Integration/MiniTest/Version13.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version140","Mocha/Integration/MiniTest/Version140.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version141","Mocha/Integration/MiniTest/Version141.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version142To172","Mocha/Integration/MiniTest/Version142To172.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version200","Mocha/Integration/MiniTest/Version200.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version201To222","Mocha/Integration/MiniTest/Version201To222.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version2110To2111","Mocha/Integration/MiniTest/Version2110To2111.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version2112To320","Mocha/Integration/MiniTest/Version2112To320.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::MiniTest::Version230To2101","Mocha/Integration/MiniTest/Version230To2101.html#method-c-applicable_to-3F","(mini_test_version)",""],["applicable_to?","Mocha::Integration::TestUnit::Adapter","Mocha/Integration/TestUnit/Adapter.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)","<p>@private\n"],["applicable_to?","Mocha::Integration::TestUnit::GemVersion200","Mocha/Integration/TestUnit/GemVersion200.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)",""],["applicable_to?","Mocha::Integration::TestUnit::GemVersion201To202","Mocha/Integration/TestUnit/GemVersion201To202.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)",""],["applicable_to?","Mocha::Integration::TestUnit::GemVersion203To220","Mocha/Integration/TestUnit/GemVersion203To220.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)",""],["applicable_to?","Mocha::Integration::TestUnit::GemVersion230To250","Mocha/Integration/TestUnit/GemVersion230To250.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)",""],["applicable_to?","Mocha::Integration::TestUnit::Nothing","Mocha/Integration/TestUnit/Nothing.html#method-c-applicable_to-3F","(test_unit_version, ruby_version = nil)",""],["applicable_to?","Mocha::Integration::TestUnit::RubyVersion185AndBelow","Mocha/Integration/TestUnit/RubyVersion185AndBelow.html#method-c-applicable_to-3F","(test_unit_version, ruby_version)",""],["applicable_to?","Mocha::Integration::TestUnit::RubyVersion186AndAbove","Mocha/Integration/TestUnit/RubyVersion186AndAbove.html#method-c-applicable_to-3F","(test_unit_version, ruby_version)",""],["apply","Mocha::Integration::MonkeyPatcher","Mocha/Integration/MonkeyPatcher.html#method-c-apply","(mod, run_method_patch)",""],["at_least","Mocha::Cardinality","Mocha/Cardinality.html#method-c-at_least","(count)",""],["at_least","Mocha::Expectation","Mocha/Expectation.html#method-i-at_least","(minimum_number_of_times)","<p>Modifies expectation so that the expected method must be called at least a\n<code>minimum_number_of_times</code>.\n<p>@param …\n"],["at_least_once","Mocha::Expectation","Mocha/Expectation.html#method-i-at_least_once","()","<p>Modifies expectation so that the expected method must be called at least\nonce.\n<p>@return [Expectation] the …\n"],["at_most","Mocha::Cardinality","Mocha/Cardinality.html#method-c-at_most","(count)",""],["at_most","Mocha::Expectation","Mocha/Expectation.html#method-i-at_most","(maximum_number_of_times)","<p>Modifies expectation so that the expected method must be called at most a\n<code>maximum_number_of_times</code>.\n<p>@param …\n"],["at_most_once","Mocha::Expectation","Mocha/Expectation.html#method-i-at_most_once","()","<p>Modifies expectation so that the expected method must be called at most\nonce.\n<p>@return [Expectation] the …\n"],["become","Mocha::StateMachine","Mocha/StateMachine.html#method-i-become","(next_state_name)","<p>Put the {StateMachine} into the <code>next_state_name</code>.\n<p>@param [String] next_state_name name of new state\n"],["before_setup","Mocha::Integration::MiniTest::Adapter","Mocha/Integration/MiniTest/Adapter.html#method-i-before_setup","()","<p>@private\n"],["before_teardown","Mocha::Integration::MiniTest::Adapter","Mocha/Integration/MiniTest/Adapter.html#method-i-before_teardown","()","<p>@private\n"],["build","Mocha::ExpectationErrorFactory","Mocha/ExpectationErrorFactory.html#method-c-build","(message = nil, backtrace = [])","<p>@private\n"],["build","Mocha::ReturnValues","Mocha/ReturnValues.html#method-c-build","(*values)",""],["change_config","Mocha::Configuration","Mocha/Configuration.html#method-c-change_config","(action, new_value, &block)","<p>@private\n"],["configuration","Mocha::Configuration","Mocha/Configuration.html#method-c-configuration","()","<p>@private\n"],["constrain_as_next_in_sequence","Mocha::Sequence","Mocha/Sequence.html#method-i-constrain_as_next_in_sequence","(expectation)","<p>@private\n"],["define_new_method","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-define_new_method","()",""],["define_new_method","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-define_new_method","()",""],["definition_target","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-definition_target","()",""],["definition_target","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-definition_target","()",""],["description","Mocha::Integration::MiniTest::Adapter","Mocha/Integration/MiniTest/Adapter.html#method-c-description","()","<p>@private\n"],["description","Mocha::Integration::MiniTest::Nothing","Mocha/Integration/MiniTest/Nothing.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version13","Mocha/Integration/MiniTest/Version13.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version140","Mocha/Integration/MiniTest/Version140.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version141","Mocha/Integration/MiniTest/Version141.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version142To172","Mocha/Integration/MiniTest/Version142To172.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version200","Mocha/Integration/MiniTest/Version200.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version201To222","Mocha/Integration/MiniTest/Version201To222.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version2110To2111","Mocha/Integration/MiniTest/Version2110To2111.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version2112To320","Mocha/Integration/MiniTest/Version2112To320.html#method-c-description","()",""],["description","Mocha::Integration::MiniTest::Version230To2101","Mocha/Integration/MiniTest/Version230To2101.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::Adapter","Mocha/Integration/TestUnit/Adapter.html#method-c-description","()","<p>@private\n"],["description","Mocha::Integration::TestUnit::GemVersion200","Mocha/Integration/TestUnit/GemVersion200.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::GemVersion201To202","Mocha/Integration/TestUnit/GemVersion201To202.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::GemVersion203To220","Mocha/Integration/TestUnit/GemVersion203To220.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::GemVersion230To250","Mocha/Integration/TestUnit/GemVersion230To250.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::Nothing","Mocha/Integration/TestUnit/Nothing.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::RubyVersion185AndBelow","Mocha/Integration/TestUnit/RubyVersion185AndBelow.html#method-c-description","()",""],["description","Mocha::Integration::TestUnit::RubyVersion186AndAbove","Mocha/Integration/TestUnit/RubyVersion186AndAbove.html#method-c-description","()",""],["each","Mocha::ArgumentIterator","Mocha/ArgumentIterator.html#method-i-each","(&block)",""],["each","Mocha::MultipleYields","Mocha/MultipleYields.html#method-i-each","()",""],["each","Mocha::NoYields","Mocha/NoYields.html#method-i-each","()",""],["each","Mocha::SingleYield","Mocha/SingleYield.html#method-i-each","()",""],["ensure_method_not_already_defined","Mocha::Mock","Mocha/Mock.html#method-i-ensure_method_not_already_defined","(method_name)","<p>@private\n"],["equals","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-equals","(value)","<p>Matches any <code>Object</code> equalling <code>value</code>.\n<p>@param [Object] value expected value. @return [Equals] parameter matcher. …\n"],["equivalent_uri","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-equivalent_uri","(uri)","<p>Matches a URI without regard to the ordering of parameters in the query\nstring.\n<p>@param [String] uri URI …\n"],["evaluate","Mocha::ExceptionRaiser","Mocha/ExceptionRaiser.html#method-i-evaluate","()",""],["evaluate","Mocha::SingleReturnValue","Mocha/SingleReturnValue.html#method-i-evaluate","()",""],["evaluate","Mocha::Thrower","Mocha/Thrower.html#method-i-evaluate","()",""],["exactly","Mocha::Cardinality","Mocha/Cardinality.html#method-c-exactly","(count)",""],["expectations","Mocha::Mockery","Mocha/Mockery.html#method-i-expectations","()",""],["expects","Mocha::Mock","Mocha/Mock.html#method-i-expects","(method_name_or_hash, backtrace = nil)","<p>Adds an expectation that the specified method must be called exactly once\nwith any parameters.\n<p>@param …\n"],["expects","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-expects","(expected_methods_vs_return_values)","<p>Adds an expectation that the specified method must be called exactly once\nwith any parameters.\n<p>The original …\n"],["explode","Mocha::ParameterMatchers::EquivalentUri","Mocha/ParameterMatchers/EquivalentUri.html#method-i-explode","(uri)","<p>@private\n"],["filtered","Mocha::BacktraceFilter","Mocha/BacktraceFilter.html#method-i-filtered","(backtrace)",""],["full_description","Mocha::UnexpectedInvocation","Mocha/UnexpectedInvocation.html#method-i-full_description","()","<p>@private\n"],["handle_mocha_expectation_error","Mocha::Integration::TestUnit::Adapter","Mocha/Integration/TestUnit/Adapter.html#method-i-handle_mocha_expectation_error","(e)","<p>@private\n"],["has_entries","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-has_entries","(entries)","<p>Matches <code>Hash</code> containing all <code>entries</code>.\n<p>@param [Hash] entries expected <code>Hash</code> entries. @return\n[HasEntries] …\n"],["has_entry","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-has_entry","(*options)","<p>Matches <code>Hash</code> containing entry with <code>key</code> and\n<code>value</code>.\n<p>@overload def has_entry(key, value)\n\n<pre>@param [Object] key ...</pre>\n"],["has_equivalent_query_string","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-has_equivalent_query_string","(uri)","<p>@deprecated Use {#equivalent_uri} instead.\n"],["has_key","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-has_key","(key)","<p>Matches <code>Hash</code> containing <code>key</code>.\n<p>@param [Object] key expected key. @return [HasKey] parameter matcher.\n<p>@see …\n"],["has_value","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-has_value","(value)","<p>Matches <code>Hash</code> containing <code>value</code>.\n<p>@param [Object] value expected value. @return [HasValue] parameter matcher.\n…\n"],["hide_original_method","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-hide_original_method","()",""],["hide_original_method","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-hide_original_method","()",""],["in_correct_order?","Mocha::Expectation","Mocha/Expectation.html#method-i-in_correct_order-3F","()","<p>@private\n"],["in_sequence","Mocha::Expectation","Mocha/Expectation.html#method-i-in_sequence","(*sequences)","<p>Constrains the expectation so that it must be invoked at the current point\nin the <code>sequence</code>.\n<p>To expect …\n"],["included","Mocha::API","Mocha/API.html#method-c-included","(mod)","<p>@private\n"],["included","Mocha::Integration::MiniTest::Adapter","Mocha/Integration/MiniTest/Adapter.html#method-c-included","(mod)","<p>@private\n"],["included","Mocha::Integration::MiniTest::Nothing","Mocha/Integration/MiniTest/Nothing.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version13","Mocha/Integration/MiniTest/Version13.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version140","Mocha/Integration/MiniTest/Version140.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version141","Mocha/Integration/MiniTest/Version141.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version142To172","Mocha/Integration/MiniTest/Version142To172.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version200","Mocha/Integration/MiniTest/Version200.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version201To222","Mocha/Integration/MiniTest/Version201To222.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version2110To2111","Mocha/Integration/MiniTest/Version2110To2111.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version2112To320","Mocha/Integration/MiniTest/Version2112To320.html#method-c-included","(mod)",""],["included","Mocha::Integration::MiniTest::Version230To2101","Mocha/Integration/MiniTest/Version230To2101.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::Adapter","Mocha/Integration/TestUnit/Adapter.html#method-c-included","(mod)","<p>@private\n"],["included","Mocha::Integration::TestUnit::GemVersion200","Mocha/Integration/TestUnit/GemVersion200.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::GemVersion201To202","Mocha/Integration/TestUnit/GemVersion201To202.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::GemVersion203To220","Mocha/Integration/TestUnit/GemVersion203To220.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::GemVersion230To250","Mocha/Integration/TestUnit/GemVersion230To250.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::Nothing","Mocha/Integration/TestUnit/Nothing.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::RubyVersion185AndBelow","Mocha/Integration/TestUnit/RubyVersion185AndBelow.html#method-c-included","(mod)",""],["included","Mocha::Integration::TestUnit::RubyVersion186AndAbove","Mocha/Integration/TestUnit/RubyVersion186AndAbove.html#method-c-included","(mod)",""],["includes","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-includes","(*items)","<p>Matches any object that responds with <code>true</code> to +include?(item)+\nfor all items.\n<p>@param [*Array] items expected …\n"],["increment","Mocha::Integration::AssertionCounter","Mocha/Integration/AssertionCounter.html#method-i-increment","()",""],["infinite?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-infinite-3F","(number)",""],["inspect","Mocha::Expectation","Mocha/Expectation.html#method-i-inspect","()","<p>@private\n"],["inspect","Mocha::Mock","Mocha/Mock.html#method-i-inspect","()","<p>@private\n"],["instance","Mocha::Mockery","Mocha/Mockery.html#method-c-instance","()",""],["instance_of","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-instance_of","(klass)","<p>Matches any object that is an instance of <code>klass</code>\n<p>@param [Class] klass expected class. @return [InstanceOf] …\n"],["invocations_allowed?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-invocations_allowed-3F","(invocation_count)",""],["invocations_allowed?","Mocha::Expectation","Mocha/Expectation.html#method-i-invocations_allowed-3F","()","<p>@private\n"],["invoke","Mocha::Expectation","Mocha/Expectation.html#method-i-invoke","()","<p>@private\n"],["is","Mocha::StateMachine","Mocha/StateMachine.html#method-i-is","(state_name)","<p>Provides a mechanism to change the {StateMachine} into the state specified\nby <code>state_name</code> at some point …\n"],["is_a","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-is_a","(klass)","<p>Matches any object that is a <code>klass</code>.\n<p>@param [Class] klass expected class. @return [IsA] parameter matcher. …\n"],["is_not","Mocha::StateMachine","Mocha/StateMachine.html#method-i-is_not","(state_name)","<p>Provides a mechanism to determine whether the {StateMachine} is not in the\nstate specified by <code>state_name</code> …\n"],["kind_of","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-kind_of","(klass)","<p>Matches any <code>Object</code> that is a kind of <code>klass</code>.\n<p>@param [Class] klass expected class. @return [KindOf] parameter …\n"],["length","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-length","()",""],["logger","Mocha::Mockery","Mocha/Mockery.html#method-i-logger","()",""],["match","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-match","(method_name, *arguments)",""],["match?","Mocha::Expectation","Mocha/Expectation.html#method-i-match-3F","(actual_method_name, *actual_parameters)","<p>@private\n"],["match?","Mocha::MethodMatcher","Mocha/MethodMatcher.html#method-i-match-3F","(actual_method_name)",""],["match?","Mocha::ParametersMatcher","Mocha/ParametersMatcher.html#method-i-match-3F","(actual_parameters = [])",""],["match_allowing_invocation","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-match_allowing_invocation","(method_name, *arguments)",""],["matchers","Mocha::ParametersMatcher","Mocha/ParametersMatcher.html#method-i-matchers","()",""],["matches?","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-matches-3F","(other)",""],["matches?","Mocha::ParameterMatchers::AllOf","Mocha/ParameterMatchers/AllOf.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::AnyOf","Mocha/ParameterMatchers/AnyOf.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::AnyParameters","Mocha/ParameterMatchers/AnyParameters.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::Anything","Mocha/ParameterMatchers/Anything.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::Equals","Mocha/ParameterMatchers/Equals.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::EquivalentUri","Mocha/ParameterMatchers/EquivalentUri.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::HasEntries","Mocha/ParameterMatchers/HasEntries.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::HasEntry","Mocha/ParameterMatchers/HasEntry.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::HasKey","Mocha/ParameterMatchers/HasKey.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::HasValue","Mocha/ParameterMatchers/HasValue.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::Includes","Mocha/ParameterMatchers/Includes.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::InstanceOf","Mocha/ParameterMatchers/InstanceOf.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::IsA","Mocha/ParameterMatchers/IsA.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::KindOf","Mocha/ParameterMatchers/KindOf.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::Not","Mocha/ParameterMatchers/Not.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::Optionally","Mocha/ParameterMatchers/Optionally.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::RegexpMatches","Mocha/ParameterMatchers/RegexpMatches.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::RespondsWith","Mocha/ParameterMatchers/RespondsWith.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches?","Mocha::ParameterMatchers::YamlEquivalent","Mocha/ParameterMatchers/YamlEquivalent.html#method-i-matches-3F","(available_parameters)","<p>@private\n"],["matches_method?","Mocha::Expectation","Mocha/Expectation.html#method-i-matches_method-3F","(method_name)","<p>@private\n"],["matches_method?","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-matches_method-3F","(method_name)",""],["matching_expectations","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-matching_expectations","(method_name, *arguments)",""],["method_exists?","Mocha::ClassMethods::AnyInstance","Mocha/ClassMethods/AnyInstance.html#method-i-method_exists-3F","(method, include_public_methods = true)",""],["method_exists?","Mocha::ModuleMethod","Mocha/ModuleMethod.html#method-i-method_exists-3F","(method)",""],["method_exists?","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-method_exists-3F","(method, include_public_methods = true)","<p>@private\n"],["method_missing","Mocha::Mock","Mocha/Mock.html#method-i-method_missing","(symbol, *arguments, &block)","<p>@private\n"],["method_signature","Mocha::Expectation","Mocha/Expectation.html#method-i-method_signature","()","<p>@private\n"],["method_visibility","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-method_visibility","(method)",""],["method_visibility","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-method_visibility","(method)",""],["mocha","Mocha::ClassMethods::AnyInstance","Mocha/ClassMethods/AnyInstance.html#method-i-mocha","()",""],["mocha","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-mocha","()","<p>@private\n"],["mocha_inspect","Mocha::ArrayMethods","Mocha/ArrayMethods.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::Cardinality","Mocha/Cardinality.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::ChangeStateSideEffect","Mocha/ChangeStateSideEffect.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::DateMethods","Mocha/DateMethods.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::DefaultName","Mocha/DefaultName.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::Expectation","Mocha/Expectation.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::HashMethods","Mocha/HashMethods.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::ImpersonatingAnyInstanceName","Mocha/ImpersonatingAnyInstanceName.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::ImpersonatingName","Mocha/ImpersonatingName.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::InStateOrderingConstraint","Mocha/InStateOrderingConstraint.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::MethodMatcher","Mocha/MethodMatcher.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::Mock","Mocha/Mock.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::Mockery","Mocha/Mockery.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::Name","Mocha/Name.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::ParameterMatchers::AllOf","Mocha/ParameterMatchers/AllOf.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::AnyOf","Mocha/ParameterMatchers/AnyOf.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::AnyParameters","Mocha/ParameterMatchers/AnyParameters.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::Anything","Mocha/ParameterMatchers/Anything.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::Equals","Mocha/ParameterMatchers/Equals.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::EquivalentUri","Mocha/ParameterMatchers/EquivalentUri.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::HasEntries","Mocha/ParameterMatchers/HasEntries.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::HasEntry","Mocha/ParameterMatchers/HasEntry.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::HasKey","Mocha/ParameterMatchers/HasKey.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::HasValue","Mocha/ParameterMatchers/HasValue.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::Includes","Mocha/ParameterMatchers/Includes.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::InstanceOf","Mocha/ParameterMatchers/InstanceOf.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::IsA","Mocha/ParameterMatchers/IsA.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::KindOf","Mocha/ParameterMatchers/KindOf.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::Not","Mocha/ParameterMatchers/Not.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::Optionally","Mocha/ParameterMatchers/Optionally.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::RegexpMatches","Mocha/ParameterMatchers/RegexpMatches.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::RespondsWith","Mocha/ParameterMatchers/RespondsWith.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParameterMatchers::YamlEquivalent","Mocha/ParameterMatchers/YamlEquivalent.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::ParametersMatcher","Mocha/ParametersMatcher.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::Sequence","Mocha/Sequence.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::Sequence::InSequenceOrderingConstraint","Mocha/Sequence/InSequenceOrderingConstraint.html#method-i-mocha_inspect","()",""],["mocha_inspect","Mocha::StateMachine","Mocha/StateMachine.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::StateMachine::State","Mocha/StateMachine/State.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::StateMachine::StatePredicate","Mocha/StateMachine/StatePredicate.html#method-i-mocha_inspect","()","<p>@private\n"],["mocha_inspect","Mocha::TimeMethods","Mocha/TimeMethods.html#method-i-mocha_inspect","()",""],["mocha_setup","Mocha::Hooks","Mocha/Hooks.html#method-i-mocha_setup","()","<p>Prepares Mocha before a test (only for use by authors of test libraries).\n<p>This method should be called …\n"],["mocha_teardown","Mocha::Hooks","Mocha/Hooks.html#method-i-mocha_teardown","()","<p>Resets Mocha after a test (only for use by authors of test libraries).\n<p>This method should be called after …\n"],["mocha_verify","Mocha::Hooks","Mocha/Hooks.html#method-i-mocha_verify","(assertion_counter = nil)","<p>Verifies that all mock expectations have been met (only for use by authors\nof test libraries).\n<p>This is …\n"],["mock","Mocha::API","Mocha/API.html#method-i-mock","(*arguments, &block)","<p>Builds a new mock object\n<p>@param [String] name identifies mock object in error messages. @param\n[Hash] …\n"],["mock","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-mock","()",""],["mock","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-mock","()",""],["mock_impersonating","Mocha::Mockery","Mocha/Mockery.html#method-i-mock_impersonating","(object, &block)",""],["mock_impersonating_any_instance_of","Mocha::Mockery","Mocha/Mockery.html#method-i-mock_impersonating_any_instance_of","(klass, &block)",""],["mocks","Mocha::AnyInstanceReceiver","Mocha/AnyInstanceReceiver.html#method-i-mocks","()",""],["mocks","Mocha::DefaultReceiver","Mocha/DefaultReceiver.html#method-i-mocks","()",""],["mocks","Mocha::Mockery","Mocha/Mockery.html#method-i-mocks","()",""],["mocks","Mocha::ObjectReceiver","Mocha/ObjectReceiver.html#method-i-mocks","()",""],["multiple_add","Mocha::YieldParameters","Mocha/YieldParameters.html#method-i-multiple_add","(*parameter_groups)",""],["multiple_yields","Mocha::Expectation","Mocha/Expectation.html#method-i-multiple_yields","(*parameter_groups)","<p>Modifies expectation so that when the expected method is called, it yields\nmultiple times per invocation …\n"],["named_mock","Mocha::Mockery","Mocha/Mockery.html#method-i-named_mock","(name, &block)",""],["needs_verifying?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-needs_verifying-3F","()",""],["never","Mocha::Expectation","Mocha/Expectation.html#method-i-never","()","<p>Modifies expectation so that the expected method must never be called.\n<p>@return [Expectation] the same …\n"],["new","Mocha::AnyInstanceReceiver","Mocha/AnyInstanceReceiver.html#method-c-new","(klass)",""],["new","Mocha::ArgumentIterator","Mocha/ArgumentIterator.html#method-c-new","(argument)",""],["new","Mocha::BacktraceFilter","Mocha/BacktraceFilter.html#method-c-new","(lib_directory = LIB_DIRECTORY)",""],["new","Mocha::Cardinality","Mocha/Cardinality.html#method-c-new","(required, maximum)",""],["new","Mocha::Central","Mocha/Central.html#method-c-new","()",""],["new","Mocha::ChangeStateSideEffect","Mocha/ChangeStateSideEffect.html#method-c-new","(state)",""],["new","Mocha::ClassMethod","Mocha/ClassMethod.html#method-c-new","(stubbee, method)",""],["new","Mocha::ClassMethods::AnyInstance","Mocha/ClassMethods/AnyInstance.html#method-c-new","(klass)",""],["new","Mocha::DefaultName","Mocha/DefaultName.html#method-c-new","(mock)",""],["new","Mocha::DefaultReceiver","Mocha/DefaultReceiver.html#method-c-new","(mock)",""],["new","Mocha::ExceptionRaiser","Mocha/ExceptionRaiser.html#method-c-new","(exception, message)",""],["new","Mocha::Expectation","Mocha/Expectation.html#method-c-new","(mock, expected_method_name, backtrace = nil)","<p>@private\n"],["new","Mocha::ExpectationList","Mocha/ExpectationList.html#method-c-new","(expectations = [])",""],["new","Mocha::ImpersonatingAnyInstanceName","Mocha/ImpersonatingAnyInstanceName.html#method-c-new","(klass)",""],["new","Mocha::ImpersonatingName","Mocha/ImpersonatingName.html#method-c-new","(object)",""],["new","Mocha::InStateOrderingConstraint","Mocha/InStateOrderingConstraint.html#method-c-new","(state_predicate)",""],["new","Mocha::Integration::AssertionCounter","Mocha/Integration/AssertionCounter.html#method-c-new","(test_case)",""],["new","Mocha::Logger","Mocha/Logger.html#method-c-new","(io)",""],["new","Mocha::MethodMatcher","Mocha/MethodMatcher.html#method-c-new","(expected_method_name)",""],["new","Mocha::Mock","Mocha/Mock.html#method-c-new","(mockery, name = nil, receiver = nil, &block)","<p>@private\n"],["new","Mocha::MultipleYields","Mocha/MultipleYields.html#method-c-new","(*parameter_groups)",""],["new","Mocha::Name","Mocha/Name.html#method-c-new","(name)",""],["new","Mocha::ObjectReceiver","Mocha/ObjectReceiver.html#method-c-new","(object)",""],["new","Mocha::ParameterMatchers::AllOf","Mocha/ParameterMatchers/AllOf.html#method-c-new","(*matchers)","<p>@private\n"],["new","Mocha::ParameterMatchers::AnyOf","Mocha/ParameterMatchers/AnyOf.html#method-c-new","(*matchers)","<p>@private\n"],["new","Mocha::ParameterMatchers::Equals","Mocha/ParameterMatchers/Equals.html#method-c-new","(value)","<p>@private\n"],["new","Mocha::ParameterMatchers::EquivalentUri","Mocha/ParameterMatchers/EquivalentUri.html#method-c-new","(uri)","<p>@private\n"],["new","Mocha::ParameterMatchers::HasEntries","Mocha/ParameterMatchers/HasEntries.html#method-c-new","(entries)","<p>@private\n"],["new","Mocha::ParameterMatchers::HasEntry","Mocha/ParameterMatchers/HasEntry.html#method-c-new","(key, value)","<p>@private\n"],["new","Mocha::ParameterMatchers::HasKey","Mocha/ParameterMatchers/HasKey.html#method-c-new","(key)","<p>@private\n"],["new","Mocha::ParameterMatchers::HasValue","Mocha/ParameterMatchers/HasValue.html#method-c-new","(value)","<p>@private\n"],["new","Mocha::ParameterMatchers::Includes","Mocha/ParameterMatchers/Includes.html#method-c-new","(*items)","<p>@private\n"],["new","Mocha::ParameterMatchers::InstanceOf","Mocha/ParameterMatchers/InstanceOf.html#method-c-new","(klass)","<p>@private\n"],["new","Mocha::ParameterMatchers::IsA","Mocha/ParameterMatchers/IsA.html#method-c-new","(klass)","<p>@private\n"],["new","Mocha::ParameterMatchers::KindOf","Mocha/ParameterMatchers/KindOf.html#method-c-new","(klass)","<p>@private\n"],["new","Mocha::ParameterMatchers::Not","Mocha/ParameterMatchers/Not.html#method-c-new","(matcher)","<p>@private\n"],["new","Mocha::ParameterMatchers::Optionally","Mocha/ParameterMatchers/Optionally.html#method-c-new","(*parameters)","<p>@private\n"],["new","Mocha::ParameterMatchers::RegexpMatches","Mocha/ParameterMatchers/RegexpMatches.html#method-c-new","(regexp)","<p>@private\n"],["new","Mocha::ParameterMatchers::RespondsWith","Mocha/ParameterMatchers/RespondsWith.html#method-c-new","(message, result)","<p>@private\n"],["new","Mocha::ParameterMatchers::YamlEquivalent","Mocha/ParameterMatchers/YamlEquivalent.html#method-c-new","(object)","<p>@private\n"],["new","Mocha::ParametersMatcher","Mocha/ParametersMatcher.html#method-c-new","(expected_parameters = [ParameterMatchers::AnyParameters.new], &matching_block)",""],["new","Mocha::PrettyParameters","Mocha/PrettyParameters.html#method-c-new","(params)",""],["new","Mocha::ReturnValues","Mocha/ReturnValues.html#method-c-new","(*values)",""],["new","Mocha::Sequence","Mocha/Sequence.html#method-c-new","(name)","<p>@private\n"],["new","Mocha::Sequence::InSequenceOrderingConstraint","Mocha/Sequence/InSequenceOrderingConstraint.html#method-c-new","(sequence, index)",""],["new","Mocha::SingleReturnValue","Mocha/SingleReturnValue.html#method-c-new","(value)",""],["new","Mocha::SingleYield","Mocha/SingleYield.html#method-c-new","(*parameters)",""],["new","Mocha::StateMachine","Mocha/StateMachine.html#method-c-new","(name)","<p>@private\n"],["new","Mocha::StateMachine::State","Mocha/StateMachine/State.html#method-c-new","(state_machine, state)","<p>@private\n"],["new","Mocha::StateMachine::StatePredicate","Mocha/StateMachine/StatePredicate.html#method-c-new","(state_machine, state)","<p>@private\n"],["new","Mocha::StubbingError","Mocha/StubbingError.html#method-c-new","(message = nil, backtrace = [])","<p>@private\n"],["new","Mocha::Thrower","Mocha/Thrower.html#method-c-new","(tag, object = nil)",""],["new","Mocha::UnexpectedInvocation","Mocha/UnexpectedInvocation.html#method-c-new","(mock, symbol, *arguments)","<p>@private\n"],["new","Mocha::YieldParameters","Mocha/YieldParameters.html#method-c-new","()",""],["new_state_machine","Mocha::Mockery","Mocha/Mockery.html#method-i-new_state_machine","(name)",""],["next","Mocha::ReturnValues","Mocha/ReturnValues.html#method-i-next","()",""],["next_invocation","Mocha::YieldParameters","Mocha/YieldParameters.html#method-i-next_invocation","()",""],["on_stubbing","Mocha::Mockery","Mocha/Mockery.html#method-i-on_stubbing","(object, method)",""],["on_stubbing_method_on_nil","Mocha::Mockery","Mocha/Mockery.html#method-i-on_stubbing_method_on_nil","(object, method)",""],["on_stubbing_method_on_non_mock_object","Mocha::Mockery","Mocha/Mockery.html#method-i-on_stubbing_method_on_non_mock_object","(object, method)",""],["on_stubbing_method_unnecessarily","Mocha::Mockery","Mocha/Mockery.html#method-i-on_stubbing_method_unnecessarily","(expectation)",""],["on_stubbing_non_existent_method","Mocha::Mockery","Mocha/Mockery.html#method-i-on_stubbing_non_existent_method","(object, method)",""],["on_stubbing_non_public_method","Mocha::Mockery","Mocha/Mockery.html#method-i-on_stubbing_non_public_method","(object, method)",""],["once","Mocha::Expectation","Mocha/Expectation.html#method-i-once","()","<p>Modifies expectation so that the expected method must be called exactly\nonce.\n<p>Note that this is the default …\n"],["optionally","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-optionally","(*matchers)","<p>Matches optional parameters if available.\n<p>@param [*Array&lt;Base&gt;] matchers matchers for optional parameters. …\n"],["parameters_match?","Mocha::ParametersMatcher","Mocha/ParametersMatcher.html#method-i-parameters_match-3F","(actual_parameters)",""],["perform","Mocha::ChangeStateSideEffect","Mocha/ChangeStateSideEffect.html#method-i-perform","()",""],["perform_side_effects","Mocha::Expectation","Mocha/Expectation.html#method-i-perform_side_effects","()","<p>@private\n"],["pretty","Mocha::PrettyParameters","Mocha/PrettyParameters.html#method-i-pretty","()",""],["prevent","Mocha::Configuration","Mocha/Configuration.html#method-c-prevent","(action, &block)","<p>Raise a {StubbingError} if if the specified <code>action</code> is\nattempted.\n<p>@param [Symbol] action one of <code>:stubbing_method_unnecessarily</code> …\n"],["prevent?","Mocha::Configuration","Mocha/Configuration.html#method-c-prevent-3F","(action)","<p>@private\n"],["puts","Mocha::Debug","Mocha/Debug.html#method-c-puts","(message)",""],["quacks_like","Mocha::Mock","Mocha/Mock.html#method-i-quacks_like","(responder)",""],["quacks_like_instance_of","Mocha::Mock","Mocha/Mock.html#method-i-quacks_like_instance_of","(responder_class)",""],["raises","Mocha::Expectation","Mocha/Expectation.html#method-i-raises","(exception = RuntimeError, message = nil)","<p>Modifies expectation so that when the expected method is called, it raises\nthe specified <code>exception</code> with …\n"],["regexp_matches","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-regexp_matches","(regexp)","<p>Matches any object that matches <code>regexp</code>.\n<p>@param [Regexp] regexp regular expression to match. @return [RegexpMatches]\n…\n"],["remove_all_matching_method","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-remove_all_matching_method","(method_name)",""],["remove_new_method","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-remove_new_method","()",""],["remove_new_method","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-remove_new_method","()",""],["remove_outer_array_braces!","Mocha::PrettyParameters","Mocha/PrettyParameters.html#method-i-remove_outer_array_braces-21","()",""],["remove_outer_hash_braces!","Mocha::PrettyParameters","Mocha/PrettyParameters.html#method-i-remove_outer_hash_braces-21","()",""],["reset","Mocha::Mockery","Mocha/Mockery.html#method-i-reset","()",""],["reset_configuration","Mocha::Configuration","Mocha/Configuration.html#method-c-reset_configuration","()","<p>@private\n"],["reset_instance","Mocha::Mockery","Mocha/Mockery.html#method-c-reset_instance","()",""],["reset_mocha","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-reset_mocha","()",""],["reset_mocha","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-reset_mocha","()",""],["reset_mocha","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-reset_mocha","()","<p>@private\n"],["respond_to?","Mocha::Mock","Mocha/Mock.html#method-i-respond_to-3F","(symbol, include_private = false)","<p>@private\n"],["responds_like","Mocha::Mock","Mocha/Mock.html#method-i-responds_like","(responder)","<p>Constrains the {Mock} instance so that it can only expect or stub methods\nto which <code>responder</code> responds. …\n"],["responds_like_instance_of","Mocha::Mock","Mocha/Mock.html#method-i-responds_like_instance_of","(responder_class)","<p>Constrains the {Mock} instance so that it can only expect or stub methods\nto which an instance of the …\n"],["responds_with","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-responds_with","(message, result)","<p>Matches any object that responds to <code>message</code> with\n<code>result</code>. To put it another way, it tests the quack, not …\n"],["restore_original_method","Mocha::AnyInstanceMethod","Mocha/AnyInstanceMethod.html#method-i-restore_original_method","()",""],["restore_original_method","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-restore_original_method","()",""],["returns","Mocha::Expectation","Mocha/Expectation.html#method-i-returns","(*values)","<p>Modifies expectation so that when the expected method is called, it returns\nthe specified <code>value</code>.\n<p>@return …\n"],["run","Mocha::Integration::MiniTest::Version13::RunMethodPatch","Mocha/Integration/MiniTest/Version13/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version140::RunMethodPatch","Mocha/Integration/MiniTest/Version140/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version141::RunMethodPatch","Mocha/Integration/MiniTest/Version141/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version142To172::RunMethodPatch","Mocha/Integration/MiniTest/Version142To172/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version200::RunMethodPatch","Mocha/Integration/MiniTest/Version200/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version201To222::RunMethodPatch","Mocha/Integration/MiniTest/Version201To222/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version2110To2111::RunMethodPatch","Mocha/Integration/MiniTest/Version2110To2111/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version2112To320::RunMethodPatch","Mocha/Integration/MiniTest/Version2112To320/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::MiniTest::Version230To2101::RunMethodPatch","Mocha/Integration/MiniTest/Version230To2101/RunMethodPatch.html#method-i-run","(runner)",""],["run","Mocha::Integration::TestUnit::GemVersion200::RunMethodPatch","Mocha/Integration/TestUnit/GemVersion200/RunMethodPatch.html#method-i-run","(result)",""],["run","Mocha::Integration::TestUnit::GemVersion201To202::RunMethodPatch","Mocha/Integration/TestUnit/GemVersion201To202/RunMethodPatch.html#method-i-run","(result)",""],["run","Mocha::Integration::TestUnit::GemVersion203To220::RunMethodPatch","Mocha/Integration/TestUnit/GemVersion203To220/RunMethodPatch.html#method-i-run","(result)",""],["run","Mocha::Integration::TestUnit::GemVersion230To250::RunMethodPatch","Mocha/Integration/TestUnit/GemVersion230To250/RunMethodPatch.html#method-i-run","(result)",""],["run","Mocha::Integration::TestUnit::RubyVersion185AndBelow::RunMethodPatch","Mocha/Integration/TestUnit/RubyVersion185AndBelow/RunMethodPatch.html#method-i-run","(result)",""],["run","Mocha::Integration::TestUnit::RubyVersion186AndAbove::RunMethodPatch","Mocha/Integration/TestUnit/RubyVersion186AndAbove/RunMethodPatch.html#method-i-run","(result)",""],["satisfied?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-satisfied-3F","(invocations_so_far)",""],["satisfied?","Mocha::Expectation","Mocha/Expectation.html#method-i-satisfied-3F","()","<p>@private\n"],["satisfied_expectations","Mocha::Mockery","Mocha/Mockery.html#method-i-satisfied_expectations","()",""],["satisfied_to_index?","Mocha::Sequence","Mocha/Sequence.html#method-i-satisfied_to_index-3F","(index)","<p>@private\n"],["sequence","Mocha::API","Mocha/API.html#method-i-sequence","(name)","<p>Builds a new sequence which can be used to constrain the order in which\nexpectations can occur.\n<p>Specify …\n"],["short_description","Mocha::UnexpectedInvocation","Mocha/UnexpectedInvocation.html#method-i-short_description","()","<p>@private\n"],["starts_as","Mocha::StateMachine","Mocha/StateMachine.html#method-i-starts_as","(initial_state_name)","<p>Put the {StateMachine} into the state specified by\n<code>initial_state_name</code>.\n<p>@param [String] initial_state_name …\n"],["state_machines","Mocha::Mockery","Mocha/Mockery.html#method-i-state_machines","()",""],["states","Mocha::API","Mocha/API.html#method-i-states","(name)","<p>Builds a new state machine which can be used to constrain the order in\nwhich expectations can occur. …\n"],["stub","Mocha::API","Mocha/API.html#method-i-stub","(*arguments, &block)","<p>Builds a new mock object\n<p>@param [String] name identifies mock object in error messages. @param\n[Hash] …\n"],["stub","Mocha::Central","Mocha/Central.html#method-i-stub","(method)",""],["stub","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-stub","()",""],["stub_everything","Mocha::API","Mocha/API.html#method-i-stub_everything","(*arguments, &block)","<p>Builds a mock object that accepts calls to any method. By default it will\nreturn <code>nil</code> for any method call. …\n"],["stub_everything","Mocha::Mock","Mocha/Mock.html#method-i-stub_everything","()","<p>@private\n"],["stubba","Mocha::Mockery","Mocha/Mockery.html#method-i-stubba","()",""],["stubba_method","Mocha::ClassMethods","Mocha/ClassMethods.html#method-i-stubba_method","()","<p>@private\n"],["stubba_method","Mocha::ClassMethods::AnyInstance","Mocha/ClassMethods/AnyInstance.html#method-i-stubba_method","()",""],["stubba_method","Mocha::ModuleMethods","Mocha/ModuleMethods.html#method-i-stubba_method","()",""],["stubba_method","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-stubba_method","()","<p>@private\n"],["stubba_object","Mocha::ClassMethods::AnyInstance","Mocha/ClassMethods/AnyInstance.html#method-i-stubba_object","()",""],["stubba_object","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-stubba_object","()","<p>@private\n"],["stubs","Mocha::Mock","Mocha/Mock.html#method-i-stubs","(method_name_or_hash, backtrace = nil)","<p>Adds an expectation that the specified method may be called any number of\ntimes with any parameters. …\n"],["stubs","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-stubs","(stubbed_methods_vs_return_values)","<p>Adds an expectation that the specified method may be called any number of\ntimes with any parameters. …\n"],["teardown","Mocha::Mockery","Mocha/Mockery.html#method-i-teardown","()",""],["teardown","Mocha::Mockery","Mocha/Mockery.html#method-c-teardown","()",""],["temporarily_change_config","Mocha::Configuration","Mocha/Configuration.html#method-c-temporarily_change_config","(action, new_value, &block)","<p>@private\n"],["testcase","Mocha::Detection::MiniTest","Mocha/Detection/MiniTest.html#method-c-testcase","()",""],["testcase","Mocha::Detection::TestUnit","Mocha/Detection/TestUnit.html#method-c-testcase","()",""],["then","Mocha::Expectation","Mocha/Expectation.html#method-i-then","(*parameters)","<p>@overload def then\n\n<pre>Used as syntactic sugar to improve readability. It has no effect on state of the expectation.</pre>\n"],["throws","Mocha::Expectation","Mocha/Expectation.html#method-i-throws","(tag, object = nil)","<p>Modifies expectation so that when the expected method is called, it throws\nthe specified <code>tag</code> with the …\n"],["times","Mocha::Cardinality","Mocha/Cardinality.html#method-i-times","(number)",""],["times","Mocha::Cardinality","Mocha/Cardinality.html#method-c-times","(range_or_count)",""],["times","Mocha::Expectation","Mocha/Expectation.html#method-i-times","(range)","<p>Modifies expectation so that the number of calls to the expected method\nmust be within a specific <code>range</code> …\n"],["to_a","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-to_a","()",""],["to_matcher","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-to_matcher","()","<p>@private\n"],["to_matcher","Mocha::ParameterMatchers::Base","Mocha/ParameterMatchers/Base.html#method-i-to_matcher","()","<p>@private\n"],["to_s","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-to_s","()",""],["to_set","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-to_set","()",""],["translate","Mocha::Integration::MiniTest","Mocha/Integration/MiniTest.html#method-c-translate","(exception)",""],["twice","Mocha::Expectation","Mocha/Expectation.html#method-i-twice","()","<p>Modifies expectation so that the expected method must be called exactly\ntwice.\n<p>@return [Expectation] the …\n"],["unnamed_mock","Mocha::Mockery","Mocha/Mockery.html#method-i-unnamed_mock","(&block)",""],["unsatisfied_expectations","Mocha::Mockery","Mocha/Mockery.html#method-i-unsatisfied_expectations","()",""],["unstub","Mocha::Central","Mocha/Central.html#method-i-unstub","(method)",""],["unstub","Mocha::ClassMethod","Mocha/ClassMethod.html#method-i-unstub","()",""],["unstub","Mocha::Mock","Mocha/Mock.html#method-i-unstub","(method_name)","<p>Removes the specified stubbed method (added by calls to {#expects} or\n{#stubs}) and all expectations …\n"],["unstub","Mocha::ObjectMethods","Mocha/ObjectMethods.html#method-i-unstub","(*method_names)","<p>Removes the specified stubbed methods (added by calls to {#expects} or\n{#stubs}) and all expectations …\n"],["unstub_all","Mocha::Central","Mocha/Central.html#method-i-unstub_all","()",""],["used?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-used-3F","(invocation_count)",""],["used?","Mocha::Expectation","Mocha/Expectation.html#method-i-used-3F","()","<p>@private\n"],["verified?","Mocha::Cardinality","Mocha/Cardinality.html#method-i-verified-3F","(invocation_count)",""],["verified?","Mocha::Expectation","Mocha/Expectation.html#method-i-verified-3F","(assertion_counter = nil)","<p>@private\n"],["verified?","Mocha::ExpectationList","Mocha/ExpectationList.html#method-i-verified-3F","(assertion_counter = nil)",""],["verify","Mocha::Mockery","Mocha/Mockery.html#method-i-verify","(assertion_counter = nil)",""],["verify","Mocha::Mockery","Mocha/Mockery.html#method-c-verify","(*args)",""],["version","Mocha::Detection::MiniTest","Mocha/Detection/MiniTest.html#method-c-version","()",""],["version","Mocha::Detection::TestUnit","Mocha/Detection/TestUnit.html#method-c-version","()",""],["warn","Mocha::Logger","Mocha/Logger.html#method-i-warn","(message)",""],["warn_when","Mocha::Configuration","Mocha/Configuration.html#method-c-warn_when","(action, &block)","<p>Warn if the specified <code>action</code> is attempted.\n<p>@param [Symbol] action one of <code>:stubbing_method_unnecessarily</code> …\n"],["warn_when?","Mocha::Configuration","Mocha/Configuration.html#method-c-warn_when-3F","(action)","<p>@private\n"],["warning","Mocha::Deprecation","Mocha/Deprecation.html#method-c-warning","(message)",""],["when","Mocha::Expectation","Mocha/Expectation.html#method-i-when","(state_predicate)","<p>Constrains the expectation to occur only when the\n<code>state_machine</code> is in the state specified by\n<code>state_name</code> …\n"],["with","Mocha::Expectation","Mocha/Expectation.html#method-i-with","(*expected_parameters, &matching_block)","<p>Modifies expectation so that the expected method must be called with\n<code>expected_parameters</code>.\n<p>May be used …\n"],["yaml_equivalent","Mocha::ParameterMatchers","Mocha/ParameterMatchers.html#method-i-yaml_equivalent","(object)","<p>Matches any YAML that represents the specified <code>object</code>\n<p>@param [Object] object object whose YAML to compare. …\n"],["yields","Mocha::Expectation","Mocha/Expectation.html#method-i-yields","(*parameters)","<p>Modifies expectation so that when the expected method is called, it yields\nwith the specified <code>parameters</code> …\n"],["|","Mocha::ParameterMatchers::Base","Mocha/ParameterMatchers/Base.html#method-i-7C","(matcher)","<p>A shorthand way of combining two matchers when at least one must match.\n<p>Returns a new <code>AnyOf</code> parameter …\n"]]}}