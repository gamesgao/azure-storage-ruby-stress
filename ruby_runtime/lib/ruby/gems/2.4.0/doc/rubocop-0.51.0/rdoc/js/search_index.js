var search_data = {"index":{"searchIndex":["cophelper","heredoc","hostenvironmentsimulatorhelper","object","rubocop","ast","andnode","argsnode","arraynode","binaryoperatornode","blocknode","builder","casenode","collectionnode","conditionalnode","defnode","ensurenode","fornode","hashelementnode","hashelementdelta","hashnode","ifnode","keywordsplatnode","methoddispatchnode","methodidentifierpredicates","modifiernode","node","ornode","pairnode","parameterizednode","predicateoperatornode","regexpnode","resbodynode","sendnode","sexp","supernode","traversal","untilnode","whennode","whilenode","yieldnode","cli","finished","cacheddata","commentconfig","config","configloader","configloaderresolver","configstore","cop","ambiguouscopname","arrayhashindentation","arrayminsize","arraysyntax","autocorrectalignment","autocorrectlogic","badge","invalidbadge","bundler","duplicatedgem","insecureprotocolsource","orderedgems","checkassignment","util","classishlength","codelength","commissioner","configurableenforcedstyle","configurableformatting","configurablemax","configurablenaming","configurablenumbering","cop","corrector","defnode","documentationcomment","duplication","endkeywordalignment","enforcesuperclass","firstelementlinebreak","force","frozenstringliteral","gemspec","ordereddependencies","generator","requirefileinjector","hashalignment","keyalignment","separatoralignment","tablealignment","valuealignment","ignorednode","ignoredpattern","integernode","internalaffairs","deprecatedpositionalarguments","nodetypepredicate","offenselocationkeyword","redundantlocationargument","redundantmessageargument","uselessmessageassertion","layout","accessmodifierindentation","alignarray","alignhash","alignparameters","blockendnewline","caseindentation","closingparenthesisindentation","commentindentation","dotposition","elsealignment","emptylineaftermagiccomment","emptylinebetweendefs","emptylines","emptylinesaroundaccessmodifier","emptylinesaroundbeginbody","emptylinesaroundblockbody","emptylinesaroundbody","emptylinesaroundclassbody","emptylinesaroundexceptionhandlingkeywords","emptylinesaroundmethodbody","emptylinesaroundmodulebody","endofline","extraspacing","firstarrayelementlinebreak","firsthashelementlinebreak","firstmethodargumentlinebreak","firstmethodparameterlinebreak","firstparameterindentation","indentarray","indentassignment","indenthash","indentheredoc","indentationconsistency","indentationwidth","initialindentation","leadingcommentspace","multilinearraybracelayout","multilineassignmentlayout","multilineblocklayout","multilinehashbracelayout","multilinemethodcallbracelayout","multilinemethodcallindentation","multilinemethoddefinitionbracelayout","multilineoperationindentation","rescueensurealignment","spaceaftercolon","spaceaftercomma","spaceaftermethodname","spaceafternot","spaceaftersemicolon","spacearoundblockparameters","spacearoundequalsinparameterdefault","spacearoundkeyword","spacearoundoperators","spacebeforeblockbraces","spacebeforecomma","spacebeforecomment","spacebeforefirstarg","spacebeforesemicolon","spaceinlambdaliteral","spaceinsidearraypercentliteral","spaceinsideblockbraces","spaceinsidebrackets","spaceinsidehashliteralbraces","spaceinsideparens","spaceinsidepercentliteraldelimiters","spaceinsiderangeliteral","spaceinsidestringinterpolation","tab","trailingblanklines","trailingwhitespace","lint","ambiguousblockassociation","ambiguousoperator","ambiguousregexpliteral","assignmentincondition","blockalignment","booleansymbol","circularargumentreference","conditionposition","debugger","defendalignment","deprecatedclassmethods","deprecatedclassmethod","duplicatecasecondition","duplicatemethods","duplicatedkey","eachwithobjectargument","elselayout","emptyensure","emptyexpression","emptyinterpolation","emptywhen","endalignment","endinmethod","ensurereturn","floatoutofrange","formatparametermismatch","handleexceptions","implicitstringconcatenation","ineffectiveaccessmodifier","inheritexception","interpolationcheck","literalascondition","literalininterpolation","loop","multiplecompare","nestedmethoddefinition","nextwithoutaccumulator","nonlocalexitfromiterator","parenthesesasgroupedexpression","percentstringarray","percentsymbolarray","randone","redundantwithindex","redundantwithobject","regexpascondition","requireparentheses","rescueexception","rescuetype","rescuewithouterrorclass","returninvoidcontext","safenavigationchain","scriptpermission","shadowedexception","shadowingouterlocalvariable","stringconversionininterpolation","syntax","underscoreprefixedvariablename","unifiedinteger","unneededdisable","unneededrequirestatement","unneededsplatexpansion","unreachablecode","unusedargument","unusedblockargument","unusedmethodargument","uriescapeunescape","uriregexp","uselessaccessmodifier","uselessassignment","uselesscomparison","uselesselsewithoutrescue","uselesssettercall","methodvariabletracker","void","matchrange","messageannotator","methodcomplexity","methodpreference","metrics","abcsize","blocklength","blocknesting","classlength","cyclomaticcomplexity","linelength","methodlength","modulelength","parameterlists","perceivedcomplexity","minbodylength","multilineexpressionindentation","multilineliteralbracelayout","naming","accessormethodname","asciiidentifiers","binaryoperatorparametername","classandmodulecamelcase","constantname","filename","heredocdelimitercase","heredocdelimiternaming","methodname","predicatename","variablename","variablenumber","negativeconditional","offense","onnormalifunless","orderedgemnode","parentheses","parserdiagnostic","percentarray","percentliteral","performance","caller","casewhensplat","casecmp","comparewithblock","count","detect","doublestartendwith","endwith","fixedsize","flatmap","hasheachmethods","lstriprstrip","rangeinclude","redundantblockcall","redundantmatch","redundantmerge","eachwithobjectinspector","redundantsortby","regexpmatch","reverseeach","sample","size","startwith","stringreplacement","timesmap","unfreezestring","uridefaultparser","precedingfollowingalignment","rails","actionfilter","activesupportaliases","applicationjob","applicationrecord","blank","date","delegate","delegateallowblank","dynamicfindby","enumuniqueness","exit","filepath","findby","findeach","hasandbelongstomany","hasmanyorhasonedependent","httppositionalarguments","notnullcolumn","output","outputsafety","pluralizationgrammar","present","readwriteattribute","relativedateconstant","requestreferer","reversiblemigration","safenavigation","savebang","scopeargs","skipsmodelvalidations","timezone","uniqbeforepluck","unknownenv","validation","registry","rescuenode","safeassignment","safemode","security","eval","jsonload","marshalload","yamlload","severity","spaceafterpunctuation","spacebeforepunctuation","spaceinside","brackets","statementmodifier","stringhelp","stringliteralshelp","style","alias","andor","annotationcomment","arrayjoin","asciicomments","attr","autoresourcecleanup","barepercentliterals","beginblock","blockcomments","blockdelimiters","bracesaroundhashparameters","casecorrector","caseequality","characterliteral","classandmodulechildren","class","classcheck","classmethods","classvars","collectionmethods","colonmethodcall","commandliteral","commentannotation","commentedkeyword","conditionalassignment","conditionalassignmenthelper","conditionalcorrectorhelper","copyright","datetime","defwithparentheses","dir","documentation","documentationmethod","doublenegation","eachforsimpleloop","eachwithobject","emptycasecondition","emptyelse","emptyliteral","emptymethod","encoding","endblock","evenodd","flipflop","for","formatstring","formatstringtoken","frozenstringliteralcomment","globalvars","guardclause","hashsyntax","identicalconditionalbranches","ifcorrector","ifinsideelse","ifunlessmodifier","ifunlessmodifierofifunless","ifwithsemicolon","implicitruntimeerror","infiniteloop","inlinecomment","inversemethods","lambda","lambdacall","lineendconcatenation","methodcallwithargsparentheses","methodcallwithoutargsparentheses","methodcalledondoendblock","methoddefparentheses","methodmissing","minmax","missingelse","mixingrouping","mixinusage","modulefunction","multilineblockchain","multilineifmodifier","multilineifthen","multilinememoization","multilineternaryoperator","multiplecomparison","mutableconstant","negatedif","negatedwhile","nestedmodifier","nestedparenthesizedcalls","nestedternaryoperator","next","nilcomparison","nonnilcheck","not","numericliteralprefix","numericliterals","numericpredicate","onelineconditional","optionhash","optionalarguments","orassignment","parallelassignment","assignmentsorter","genericcorrector","modifiercorrector","rescuecorrector","parenthesesaroundcondition","percentliteraldelimiters","percentqliterals","perlbackrefs","preferredhashmethods","proc","raiseargs","redundantbegin","redundantconditional","redundantexception","redundantfreeze","redundantparentheses","redundantreturn","redundantself","regexpliteral","rescuemodifier","returnnil","safenavigation","selfassignment","semicolon","send","signalexception","singlelineblockparams","singlelinemethods","specialglobalvars","stabbylambdaparentheses","stderrputs","stringliterals","stringliteralsininterpolation","stringmethods","structinheritance","symbolarray","symbolliteral","symbolproc","ternarycorrector","ternaryparentheses","trailingcommainarguments","trailingcommainliteral","trailingunderscorevariable","trivialaccessors","unlesscorrector","unlesselse","unneededcapitalw","unneededinterpolation","unneededpercentq","variableinterpolation","whenthen","whileuntildo","whileuntilmodifier","wordarray","yodacondition","zerolengthpredicate","surroundingspace","targetrailsversion","targetrubyversion","team","toomanylines","trailingcomma","util","variableforce","and","assignment","branch","branchable","case","ensure","exceptionhandler","for","if","logicaloperator","or","reference","rescue","scope","simpleconditional","until","untilpost","variable","variabletable","while","whilepost","error","formatter","baseformatter","clangstyleformatter","colorizable","disabledconfigformatter","disabledlinesformatter","emacsstyleformatter","filelistformatter","formatterset","fuubarstyleformatter","htmlformatter","erbcontext","jsonformatter","offensecountformatter","progressformatter","simpletextformatter","report","tapformatter","textutil","worstoffendersformatter","magiccomment","editorcomment","emacscomment","simplecomment","vimcomment","namesimilarity","nodepattern","compiler","macros","options","optionshelp","optionsvalidator","pathutil","platform","processedsource","rspec","expectoffense","annotatedsource","raketask","remoteconfig","resultcache","runner","infinitecorrectionloop","stringinterpreter","stringutil","jaro","jarowinkler","targetfinder","token","validationerror","version","warning","<=>()","<=>()","==()","==()","==()","==()","==()","[]()","[]()","[]=()","_investigate()","abort()","absolute?()","accept_child_double_quotes?()","accept_first_call?()","accept_first_param?()","accept_left_parenthesis?()","accept_left_square_bracket?()","accept_second_param?()","acceptable?()","acceptable_19_syntax_symbol?()","acceptable_capital_q?()","acceptable_exploded_args?()","acceptable_methods()","acceptable_q?()","accepted_form?()","accepted_if?()","accepted_opening_delimiter?()","access_modifier?()","accesses?()","accessible_variables()","accessor()","accumulator_param_assigned_to?()","act_on_options()","actual_code_range()","actual_indent()","add_arg_offense()","add_boolean_flags()","add_braces()","add_braces()","add_brackets()","add_configuration_options()","add_cop_selection_csv_option()","add_excludes_from_files()","add_excludes_from_higher_level()","add_flags_with_optional_args()","add_formatter()","add_formatting_options()","add_list_options()","add_missing_namespaces()","add_offense()","add_offense_common()","add_offense_deprecated()","add_offense_for_args()","add_offense_for_double_call()","add_offense_for_entire_comment()","add_offense_for_expression()","add_offense_for_misalignment()","add_offense_for_some_cops()","add_offense_for_wrong_style()","add_offense_from_diagnostic()","add_offense_from_error()","add_offenses()","add_offenses_for_unnecessary_spaces()","add_only_options()","add_parentheses()","add_scope()","add_self_to_getters()","add_severity_option()","add_space_before()","add_unneeded_disables()","adjacent_braces()","adjust()","after_leaving_scope()","after_leaving_scope()","after_leaving_scope()","after_leaving_scope()","alias_keyword_possible?()","alias_method_possible?()","align()","align_column()","align_equal_sign()","align_equal_signs()","align_hash_cop_config()","align_with_base_message()","aligned_assignment?()","aligned_char?()","aligned_comments?()","aligned_identical?()","aligned_operator?()","aligned_tok?()","aligned_token?()","aligned_with_adjacent_line?()","aligned_with_any_line?()","aligned_with_any_line_range?()","aligned_with_line?()","aligned_with_next_comment?()","aligned_with_operator?()","aligned_with_previous_comment?()","aligned_with_something?()","aligned_words?()","alignment_base()","alignment_column()","alignment_for()","alignment_for_colons()","alignment_for_hash_rockets()","alignment_node()","all()","all()","all_cop_names()","all_cop_names()","all_disabled?()","all_hash_key?()","all_string_literals?()","allow()","allow_blank_option()","allow_dsl_writers?()","allow_empty?()","allow_for_alignment?()","allow_heredoc?()","allow_inner_backticks?()","allow_inner_slashes?()","allow_multiple_return_values?()","allow_named_underscore_variables()","allow_predicates?()","allow_self()","allow_symlinks_in_cache_location?()","allow_unused_keyword_arguments?()","allow_uri?()","allowed_acronyms()","allowed_ancestor?()","allowed_argument?()","allowed_array_or_hash_element?()","allowed_backtick_literal?()","allowed_block?()","allowed_bracket_array?()","allowed_construct?()","allowed_expression?()","allowed_heredoc()","allowed_if_condition?()","allowed_keyword_argument?()","allowed_lhs?()","allowed_masign?()","allowed_method?()","allowed_method?()","allowed_method_call?()","allowed_method_name?()","allowed_mixed_percent_r?()","allowed_mixed_slash?()","allowed_modifier_if?()","allowed_multiple_expression?()","allowed_omission?()","allowed_on_first_line?()","allowed_parent?()","allowed_parent?()","allowed_percent_q?()","allowed_percent_r_literal?()","allowed_percent_x_literal?()","allowed_reader?()","allowed_rhs?()","allowed_send_node?()","allowed_single_line?()","allowed_slash_literal?()","allowed_statements?()","allowed_ternary?()","allowed_type?()","allowed_uri_position?()","allowed_var?()","allowed_variable?()","allowed_writer?()","alt_start_msg()","alternate_operator()","alternate_operator()","alternative_message()","alternative_message()","alternative_message()","alternative_style()","alternative_style()","alternative_styles()","always_run?()","always_run?()","always_run?()","always_run?()","always_run?()","always_run?()","ambiguous_or_unexpected_style_detected()","ambiguous_style_detected()","analyze()","analyze_cop()","analyze_disabled()","analyze_rest()","analyze_single_line()","ancestor_node()","ancestor_node?()","annotate()","annotate()","annotate_message()","annotate_message()","annotation?()","annotation_range()","any?()","any_assignment?()","any_context_creating_methods?()","any_method_definition?()","any_symlink?()","apply_default_formatter()","arg_to_unparenthesized_call?()","args?()","args_begin()","args_begin()","args_count()","args_end()","args_end()","args_from_env()","args_from_file()","args_include_block_pass?()","args_match?()","args_on_beginning_line?()","argument?()","argument_positions()","argument_range()","arguments()","arguments()","arguments()","arguments?()","arguments?()","arguments?()","arguments_count()","arguments_match?()","arguments_without_parentheses?()","array?()","array_element?()","array_or_range?()","array_splat?()","array_style_detected()","arrow_form?()","arrow_form?()","arrow_lambda_with_args?()","asgn_variable_align_with()","assertions_using_described_class_msg()","assign()","assign_to_variable()","assignment()","assignment()","assignment_corrector()","assignment_method?()","assignment_node()","assignment_on_same_line?()","assignment_rhs_exist?()","assignment_tokens()","assignment_types_match?()","ast_with_comments()","augment_message()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect()","autocorrect?()","autocorrect?()","autocorrect_all_cops()","autocorrect_arguments()","autocorrect_block()","autocorrect_body()","autocorrect_class()","autocorrect_comparison()","autocorrect_enabled?()","autocorrect_forbidden?()","autocorrect_from_percent()","autocorrect_hash_rockets()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_incompatible_with()","autocorrect_insert_lines()","autocorrect_instance()","autocorrect_line()","autocorrect_literal_to_method()","autocorrect_method()","autocorrect_method_to_literal()","autocorrect_modifier()","autocorrect_no_args()","autocorrect_no_mixed_keys()","autocorrect_non_nil()","autocorrect_notice()","autocorrect_other()","autocorrect_range()","autocorrect_remove_lines()","autocorrect_requested?()","autocorrect_ruby19()","autocorrect_single_variable_interpolation()","autocorrect_source()","autocorrect_source_file()","autocorrect_source_with_loop()","autocorrect_to_percent()","autocorrect_unless_nil()","autocorrect_unneeded_disables()","autocorrect_variable_interpolation()","autocorrect_with_args()","autocorrect_words()","autocorrected_value()","autocorrected_value_for_symbol()","avoid_autocorrect?()","avoid_autocorrect?()","avoid_comma()","backtick_literal?()","bad_days()","bad_methods()","bad_methods()","bad_reader_name?()","bad_rhs?()","bad_writer_name?()","badge()","bang_method?()","bareword?()","base64_encoded_logo_image()","base_column()","base_column()","base_column()","base_configs()","base_description()","base_description()","base_dir_for_path_parameters()","base_for_method_definition()","base_if_node()","base_indent_level()","base_indentation()","base_range()","base_range()","base_source()","basic_literal?()","beautify_message()","before_declaring_variable()","begin_correction()","begin_pos()","begin_pos_for_replacement()","begin_range()","begin_source()","belong_to_inner_scope?()","belong_to_outer_scope?()","below_array_length?()","binding()","binding_irb?()","blacklist()","blacklisted_delimiters()","blank_lines_between?()","blank_lines_count_between()","block_arg_string()","block_argument?()","block_argument?()","block_comment_within?()","block_end_align_target()","block_literal?()","block_node()","block_range_with_space()","block_start?()","body()","body()","body()","body()","body()","body()","body()","body_end?()","body_length()","body_node()","boolean_or_empty_cache?()","brace_alignment_style()","brace_alignment_style()","braces?()","braces?()","braces_for_chaining_message()","braces_for_chaining_style?()","braces_will_be_removed?()","braces_with_contents_inside()","bracketed?()","bracketed_array_of?()","brackets?()","branch()","branch_index()","break_line_before()","build_message()","builtin_formatter_class()","cache_name_from_uri()","cache_path()","cache_path_exists?()","cache_path_expired?()","cache_root()","cached_run?()","calculate_range()","call_chain_starts_with_int?()","call_to_persisted?()","callback_methods()","called_on_string?()","calls_super?()","calls_to_report()","camel_case_method?()","candidate_node?()","capture_with_block!()","case_insensitive_out_of_order?()","case_style?()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check_add_column()","check_add_reference()","check_alignment()","check_alignment()","check_and_or()","check_argument()","check_argument()","check_argument()","check_argument()","check_asgn_alignment()","check_assignment()","check_assignment()","check_assignment()","check_assignment()","check_assignment()","check_assignment()","check_assignment()","check_assignment_to_condition()","check_backtick_literal()","check_based_on_longest_key()","check_begin()","check_begin_node()","check_beginning()","check_block_alignment()","check_body()","check_body()","check_both()","check_brace_layout()","check_bracketed_array()","check_bracketed_array()","check_branch()","check_branches()","check_case()","check_case()","check_case_node()","check_change_column_default_node()","check_change_table_node()","check_change_table_offense()","check_child_nodes()","check_child_scope()","check_children_line_break()","check_closing_pipe_space()","check_code_length()","check_comma()","check_compact()","check_compact_style()","check_condition()","check_const_receiver()","check_context_dependent()","check_date_node()","check_deferred_empty_line()","check_defs()","check_defs()","check_defs()","check_directive_line()","check_drop_table_node()","check_each_arg()","check_else()","check_empty()","check_empty_lines_except_namespace()","check_empty_lines_special()","check_end()","check_end_kw_alignment()","check_end_kw_in_node()","check_ending()","check_ending_if()","check_equality_only?()","check_expected_style()","check_exploded()","check_expressions()","check_first()","check_for_active_support_aliases?()","check_for_circular_argument_references()","check_for_comment()","check_for_file_join_with_rails_root()","check_for_infinite_loop()","check_for_interpolation()","check_for_line_terminator_or_opener()","check_for_literal()","check_for_no_comment()","check_for_rails_root_join_with_slash_separated_path()","check_for_unneeded_disables?()","check_for_unused_assignments()","check_grouped_style()","check_if()","check_if()","check_if_node()","check_indentation()","check_inside()","check_inside_pipes()","check_irreversible_schema_statement_node()","check_keyword()","check_left_brace()","check_line()","check_line()","check_literal()","check_localtime()","check_members()","check_method_line_break()","check_method_node()","check_method_node()","check_modifier()","check_multiline_quote_style()","check_name()","check_name()","check_negative_conditional()","check_nested()","check_nested_style()","check_new_line()","check_new_line_offense()","check_new_visibility()","check_no_space()","check_no_space_style_inside_pipes()","check_node()","check_node()","check_node()","check_node()","check_node()","check_node()","check_non_empty()","check_nonzero_length_predicate()","check_opening_pipe_space()","check_operator()","check_optarg()","check_other()","check_other_alignment()","check_pairs()","check_pairs()","check_percent_array()","check_percent_r_literal()","check_percent_x_literal()","check_predicate()","check_remove_column_node()","check_remove_foreign_key_node()","check_return_node()","check_right_brace()","check_right_brace()","check_right_bracket()","check_same_line()","check_same_line_offense()","check_scope()","check_scope()","check_scope()","check_self_receiver()","check_send()","check_send()","check_send()","check_separated_style()","check_slash_literal()","check_source()","check_space()","check_space_style_inside_pipes()","check_style()","check_style!()","check_symmetrical()","check_target_ruby()","check_ternary()","check_time_node()","check_token_set()","check_tokens()","check_unary()","check_uri_line()","check_used_in_conditional()","check_variable()","check_when()","check_when_node()","check_zero_length_predicate()","checkable_layout?()","checkable_layout?()","checksum()","children()","children()","children_offenses()","class_def?()","class_emitter_method?()","class_nodes()","cleanup()","clear()","clear_options()","close_output_files()","closing_brace_on_same_line?()","closing_delimiter()","code()","code_length()","code_length()","collate_corrections()","collect_variable_like_names()","collect_variable_like_names()","collect_variable_like_names()","collection()","colon?()","colon?()","colored_severity_code()","colorize()","column()","column_keywords()","column_length()","column_of()","column_range()","combine_args()","command()","command?()","command_or_kernel_call?()","comment_column()","comment_config()","comment_lines()","comment_lines()","comment_lines?()","comment_on_line?()","comment_only_line?()","comment_range_with_surrounding_space()","commented?()","comments_in_array?()","common_prefix_length()","compact?()","compact_node_name?()","compact_style?()","compare_exceptions()","compare_range()","comparison?()","comparison_method?()","compatible_external_encoding_for?()","compile_arg()","compile_args()","compile_ascend()","compile_capt_ellip()","compile_capture()","compile_ellipsis()","compile_expr()","compile_expr_with_capture_check()","compile_expr_with_captures()","compile_expr_with_index()","compile_funcall()","compile_intersect()","compile_literal()","compile_negation()","compile_nodetype()","compile_param()","compile_predicate()","compile_seq()","compile_seq_tail()","compile_seq_terms()","compile_seq_terms_with_size()","compile_union()","compile_wildcard()","complex_condition?()","complex_content?()","complexity()","complexity()","compute_distance()","compute_distance()","compute_do_source_line_column()","compute_non_zero_distance()","compute_start_col()","concat_length()","cond_range()","condition()","condition()","conditional?()","conditional?()","conditional_assignment?()","conditional_clause?()","conditions()","config_files_in_path()","config_lines()","config_to_allow_offenses()","config_to_allow_offenses=()","configuration_file_for()","configuration_from_file()","configured_indent()","configured_indentation_width()","configured_indentation_width()","configured_indentation_width()","configured_indentation_width()","conflicting_styles_detected()","consecutive_duplicates()","consecutive_lines()","considered_failure?()","consistent_multiline?()","const_receiver?()","const_receiver?()","constructor?()","contain_local_object?()","contains_backtick?()","contains_colons_or_commas?()","contains_cop_matching?()","contains_described_class_msg?()","contains_disallowed_backtick?()","contains_disallowed_slash?()","contains_double_splat?()","contains_guard_clause?()","contains_multiple_levels_of_exceptions?()","contains_preferred_delimiter?()","contains_quotes_or_commas?()","contains_slash?()","contains_splat?()","content()","contents_range()","contiguous_assignment_lines()","convention_on()","convert_hash_data()","cop_config()","cop_config()","cop_config_params()","cop_disabled_line_ranges()","cop_enabled_at_line?()","cop_label()","cop_label()","cop_line_ranges()","cop_name()","cop_name()","cop_range()","cops()","cops()","cops_disabled_in_comments_summary()","cops_of_department()","correct()","correct()","correct()","correct()","correct()","correct_alias_method_to_alias()","correct_alias_to_alias_method()","correct_alias_with_symbol_args()","correct_annotation?()","correct_args()","correct_bracketed()","correct_bracketed()","correct_branches()","correct_by_library()","correct_by_squiggly()","correct_case_delimiters?()","correct_case_when()","correct_delimiters()","correct_dot_position_style?()","correct_if_branches()","correct_implicit()","correct_indentation()","correct_inverse_block()","correct_inverse_selector()","correct_key_value()","correct_key_value_each()","correct_literal_style?()","correct_method()","correct_multiple_elements()","correct_no_value()","correct_not()","correct_operator()","correct_opposite_method()","correct_other()","correct_parenthesized()","correct_percent()","correct_plain_each()","correct_send()","correct_setter()","correct_single_element()","correct_style?()","correct_style?()","correct_style?()","correct_style_detected()","correct_style_detected()","correct_unparenthesized()","correct_validate_type()","correct_when_conditions()","correct_with_parens()","correct_without_parens()","correctable_send?()","corrected()","corrected()","corrected()","corrected?()","corrected_code()","correction()","correction()","correction()","correction()","correction()","correction()","correction()","correction()","correction_compact_to_exploded()","correction_exceeds_line_limit?()","correction_exploded_to_compact()","correction_range()","correction_range()","correction_range()","correction_would_break_code?()","corrections()","count_comments?()","count_format_matches()","count_keyword_args?()","count_matches()","count_percent_matches()","count_stats()","count_stats()","count_transpositions()","countable_format?()","countable_percent?()","create_config()","create_parser()","current_scope()","current_scope_level()","custom_formatter_class()","custom_severity()","danger_chain?()","debug?()","debug?()","debug?()","declaration_with_comment()","declare_variable()","decorated_message()","def_correction()","def_end()","def_modifier?()","def_node?()","def_node_matcher()","def_node_search()","def_start()","default_config()","default_configuration()","default_cop_config()","default_severity()","deferred_message()","define_method_call?()","define_options()","defs()","delegate?()","delete()","delimiter()","delimiter_delta()","delimiter_delta()","delimiter_string()","delimiters()","delimiters()","delta()","deltas()","deltas()","deltas_for_first_pair()","deltas_for_first_pair()","deltas_for_first_pair()","department()","departments()","dependency?()","deprecated_method()","deprecation_check()","describe()","deserialize_offenses()","details()","detect_quote_styles()","detected_style()","detected_style=()","detected_styles()","detected_styles_for_column()","directive_count()","directive_on_source_line?()","directive_parts()","directive_range_in_list()","dirs_to_search()","disabled?()","disabled_line_ranges()","disallowed_literal?()","display_column()","display_cop_names?()","display_error_summary()","display_str()","display_style_guide?()","display_warning_summary()","disqualified_parent?()","distance()","distance()","do?()","do?()","do?()","do?()","do_inspection_loop()","documentation_comment?()","dot?()","dot_method_begin_pos()","dot_method_with_whitespace()","double_colon?()","double_quotes_required?()","double_splat?()","downcase_eq_range()","dsl_writer?()","duplicate_location?()","duplicated_gem_nodes()","duplicates()","duplicates?()","duration_method?()","each()","each()","each_already_disabled()","each_argument_node()","each_bad_alignment()","each_bad_cons()","each_command_or_kernel_call()","each_condition()","each_directive()","each_extra_empty_line()","each_extraneous_space()","each_inspected_file()","each_key()","each_key()","each_line()","each_line_range()","each_match_range()","each_member()","each_mentioned_cop()","each_misplaced_optional_arg()","each_missing_space()","each_missing_space()","each_node()","each_pair()","each_part()","each_redundant_merge()","each_semicolon()","each_style_violation()","each_unnecessary_space_match()","each_unneeded_disable()","each_value()","each_when()","each_wrong_style()","element_assignment?()","elements()","eligible_arguments?()","eligible_method?()","eligible_next_successor?()","eligible_node?()","eligible_node?()","eligible_node?()","eligible_operator?()","eligible_predecessor?()","eligible_receiver?()","eligible_receiver?()","eligible_successor?()","else?()","else?()","else_branch()","else_branch()","elsif?()","elsif_conditional?()","embedded_in_percent_array?()","emit_capture_list()","emit_guard_clause()","emit_method_code()","emit_param_list()","emit_retval()","emit_trailing_params()","empty?()","empty_block?()","empty_body?()","empty_braces?()","empty_check()","empty_else_config()","empty_else_cop_enabled?()","empty_else_style()","empty_expression?()","empty_lines_around?()","empty_literal?()","empty_parentheses?()","empty_style?()","enable_cop?()","enable_rails_cops()","enabled()","enabled_line?()","encoding()","encoding()","encoding()","encoding_line_number()","encoding_omitable?()","encoding_specified?()","encoding_token?()","end_align_target?()","end_followed_by_whitespace_only?()","end_of_line_comment()","end_parentheses()","end_pos()","end_range()","end_range()","end_with_eq?()","ending_delimiter()","ends_in_end?()","ends_with_condition?()","enforce_double_quotes?()","english_name_replacement()","enlist()","ensure_valid_preferred_delimiters()","enumerator_method?()","environments()","eql?()","eql?()","equal_sign?()","escape()","escape_string()","eval_call?()","evaluate_exceptions()","exact_name_match?()","exceeds_line_offset?()","except_syntax?()","excess_leading_space?()","excess_range()","excess_trailing_space?()","excluded_dirs()","excluded_file?()","excluded_methods()","excludes()","executable?()","execute_runner()","exit_body_type?()","expand_elses()","expand_elses()","expand_elsif()","expand_when_branches()","expanded?()","expanded_style?()","expect_matching_definition?()","expect_no_offenses()","expect_offense()","expect_params_after_method_name?()","expect_space?()","expected_column()","expected_fields_count()","expected_indent_offset()","expected_name()","expected_signature?()","explicit?()","explicit_block_local_variable?()","explicit_style?()","expr_replacement()","extra_avoid_comma_info()","extra_details?()","extra_indentation()","extra_space_range()","extract()","extract_arguments()","extract_body()","extract_branches()","extract_branches()","extract_branches()","extract_common_parts()","extract_frozen_string_literal()","extract_frozen_string_literal()","extract_heredoc_lines()","extract_heredocs()","extract_method()","extract_method_chain()","extract_method_chain()","extract_parts()","extract_parts_from_and()","extract_parts_from_if()","extract_rhs()","extract_source()","extract_sources()","extract_tail_branches()","extract_tail_branches()","extract_tail_branches()","fail_due_to()","fail_fast?()","file()","file_checksum()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_finished()","file_keyword?()","file_name_matches_any?()","file_offense_cache()","file_offenses()","file_started()","file_started()","file_started()","file_started()","file_started()","file_to_exclude?()","file_to_include?()","filename_good?()","files()","filter_cop_classes()","filtered_run?()","find()","find_assignment_without_variable_usage()","find_class_or_module()","find_common_characters()","find_excessive_uri_range()","find_files()","find_first_offense()","find_first_possible_offense()","find_last_match()","find_location()","find_matching_receiver_invocation()","find_nested_defs()","find_offending_argument()","find_offending_argument()","find_similar_name()","find_target_files()","find_unneeded()","find_valid_order()","find_variable()","finished()","finished()","finished()","finished()","finished()","finished()","finished()","finished()","finished()","first_argument()","first_argument_returned?()","first_argument_unparenthesized?()","first_by_line()","first_child_requires_empty_line?()","first_comment_line?()","first_empty_line_required_child()","first_line()","first_line()","first_line_comment()","first_non_ascii_chars()","first_non_ascii_chars()","first_offense_range()","first_offense_range()","first_source()","first_token()","fixed_indentation?()","fixed_parameter_indentation?()","flow_expression?()","followed_by_space?()","following_line()","for()","for()","for_all_cops()","for_bad_filename()","for_cop()","force_default_config!()","force_equal_sign_alignment?()","force_exclusion?()","force_hash_rockets?()","force_name()","forces()","forces_for()","format?()","format_arg?()","format_binary()","format_decimal()","format_english_message()","format_hex()","format_list()","format_message()","format_message()","format_message()","format_message()","format_message_from()","format_method?()","format_number()","format_octal()","format_octal_zero_only()","format_source_line_column()","formatter_class()","formatter_set()","found_attr()","found_instance_method()","found_method()","from_file()","from_json()","from_parser_token()","frozen_string_literal()","frozen_string_literal()","frozen_string_literal?()","frozen_string_literal_comment()","frozen_string_literal_comment_exists?()","frozen_string_literal_specified?()","frozen_string_literals_enabled?()","full_options()","functional_block?()","functional_method?()","gem_config_path()","gem_name()","generate()","generated_source()","generated_spec()","get_blocks()","get_dependency_name()","get_param()","get_processed_source()","get_source_range()","good_alignment?()","good_days()","good_methods()","good_methods()","good_methods()","group_mixins()","grouped_duplicates()","grouped_style?()","handle()","handle_disabled_by_default()","handle_error()","handle_exiting_options()","handle_node()","handle_response()","handle_warning()","hash()","hash()","hash()","hash?()","hash_element?()","hash_for_file()","hash_for_location()","hash_for_offense()","hash_literal_as_first_arg?()","hash_literal_with_braces()","hash_rocket?()","hash_rocket?()","hash_rocket_delta()","hash_rocket_delta()","hash_rockets_check()","hash_table_style?()","head()","heredoc?()","heredoc?()","heredoc?()","heredoc?()","heredoc_body()","heredoc_indent_type()","heredoc_lines()","heredoc_literal?()","heredoc_ranges()","hex_bin_dec_literal_type()","highlighted_area()","highlighted_source_line()","highlights()","hightlight_source_tag()","if?()","if_branch()","if_else_children?()","if_style?()","if_without_else?()","ignore_class_methods?()","ignore_cop_directives?()","ignore_empty_blocks?()","ignore_executable_scripts?()","ignore_hash_argument?()","ignore_macros?()","ignore_node()","ignore_offense?()","ignored_by_find_each?()","ignored_line?()","ignored_line?()","ignored_list()","ignored_literal?()","ignored_literal?()","ignored_method?()","ignored_method?()","ignored_method?()","ignored_methods()","ignored_node?()","ignored_nodes()","ignored_patterns()","ignored_range?()","ignored_ranges()","illegal_class_name?()","immutable_literal?()","implements_respond_to_missing?()","implicit_call?()","implicit_concatenation?()","implicit_literal?()","implicit_style?()","in_its_own_process_with()","in_module_or_instance_eval?()","include?()","include_prefix_case?()","include_semantic_changes?()","include_ternary?()","included()","incompatible_options()","incorrect_style()","incorrect_style_detected()","incorrect_style_detected()","incorrect_style_detected()","incorrect_style_detected()","indent()","indent()","indent_for()","indent_level()","indent_one_step?()","indent_width()","indentation()","indentation_consistency_style()","indentation_of_block_start_line()","indentation_to_check?()","indentation_width()","indentation_width()","indentation_width()","indented_body()","indented_body()","indented_else_node()","index_of_first_token()","index_of_last_token()","inefficient_comparison()","ineligible_node?()","infinite_loop?()","inherit_from_remote()","inherited()","inherited()","inherited_file()","inject()","inject_require()","injectable_require_directive()","inline_fix_branch()","insert_after()","insert_before()","insert_notice_before()","inside_comment?()","inside_interpolation?()","inspect_file()","inspect_file()","inspect_files()","inspect_gemfile()","inspect_source()","inspect_source_file()","int_value()","integer_part()","interpolated_quotes?()","interpolation?()","interpret()","interpret_hex()","interpret_octal()","interpret_string_escape()","interpret_string_escapes()","interpret_unicode()","interpreter_directive_comment?()","invalid_exceptions()","invalid_percent_array_context?()","inverse_blocks()","inverse_delimiter()","inverse_keyword()","inverse_keyword()","inverse_keyword()","inverse_methods()","inverse_operator()","inverse_operator()","invert()","invert_expression?()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","investigate()","invoke_custom_processing()","invoke_hook()","irrelevant_line()","iterate_until_no_changes()","join_force?()","join_force?()","join_force?()","join_force?()","join_force?()","join_force?()","join_terms()","joint()","just_first_word_of_sentence?()","key()","key?()","key_delta()","key_delta()","key_delta()","key_delta()","keys()","keys()","keyword()","keyword()","keyword()","keyword()","keyword()","keyword?()","keyword?()","keyword_ancestor?()","keyword_appearance?()","keyword_argument?()","keyword_autocorrect()","keyword_begin_str()","keyword_end_str()","keyword_locations()","keyword_locations_in_ensure()","keyword_locations_in_rescue()","keyword_splat?()","keyword_with_changed_precedence?()","keyword_with_redundant_parentheses?()","keywords?()","kind()","kind()","kind()","kind()","kv_range()","lambda?()","lambda_arg_string()","lambda_node?()","largest_brackets_size()","last_argument()","last_by_line()","last_call_of_method?()","last_element_range_with_trailing_comma()","last_element_trailing_comma_range()","last_end_pos_inside_pipes()","last_expression()","last_line()","last_line_heredoc?()","last_magic_comment()","last_match_used?()","last_special_comment()","lazy?()","leading_comment_lines()","leading_spaces()","left_brace?()","left_hand_operand()","left_side?()","length()","length_in_modifier_form()","less_indented?()","level()","lexical_scope_type()","lhs()","lhs()","lhs_all_match?()","lhs_for_send()","limited_common_prefix_length()","line()","line_after_comment()","line_between?()","line_break_after_left_paren?()","line_break_before_keyword?()","line_count()","line_count_based_block_style?()","line_count_based_message()","line_distance()","line_in_whitelisted_heredoc?()","line_length_cop_enabled?()","line_length_without_directive()","line_numbers_of_inner_nodes()","lines()","lines_between_defs()","lint?()","list_files()","literal_at_end?()","literal_at_start?()","literal_number?()","literal_type()","load()","load_file()","load_yaml_configuration()","loc_to_source_line_column()","logical_operator?()","long_opt_symbol()","longest_line()","longest_line_exceeds_line_limit?()","looks_like_rails_html_safe?()","looks_like_rails_raw?()","looks_like_rails_safe_concat?()","looks_like_trivial_reader?()","lookup_constant()","macro?()","macro_kwbegin_wrapper?()","main_node_offense()","make_excludes_absolute()","map()","mark_method_as_useless()","mark_variable_as_captured_by_block_if_so()","match()","match?()","match?()","match?()","match_acronym?()","match_gvar?()","match_namespace()","match_path?()","match_range()","match_token()","match_uris()","match_with_lvasgn?()","matched_arguments_count?()","matches_ignored_pattern?()","matching_brackets?()","matching_index_range()","matching_range()","matching_ranges()","matching_window()","max()","max=()","max_key_value_pairs()","max_length()","max_line_length()","max_line_length()","max_parameter_name()","max_parameter_name()","max_params()","maximum_empty_lines()","may_jump_to_other_branch?()","may_run_incompletely?()","maybe_print_corrected_source()","meaningful_delimiters?()","merge()","merge()","merge_with_default()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message_for_dup()","message_for_lambda()","message_for_normal_block()","message_for_underscore_prefix()","message_for_useless_assignment()","message_line_modifier()","message_specification()","message_text()","messages()","meta_assignment_node()","metadata_hash()","method?()","method_argument?()","method_argument?()","method_as_param?()","method_call()","method_call_with_changed_precedence?()","method_call_with_redundant_parentheses?()","method_chain()","method_definition?()","method_definition_macros()","method_from_time_class?()","method_name()","method_name()","method_name()","method_name()","method_name()","method_name_matches?()","method_names()","method_send?()","method_send?()","method_suffix()","method_uses_parens?()","method_uses_parens?()","method_with_block?()","method_with_format_args?()","methods()","min_body_length()","min_body_length?()","min_digits()","min_size_config()","minimum_empty_lines()","minimum_severity_to_fail()","minimum_target_rails_version()","minimum_target_ruby_version()","missing_else_style()","missing_parentheses()","missing_parentheses?()","missing_parentheses_corrector()","mixed_delimiters?()","mobilized_cop_classes()","modifier?()","modifier?()","modifier_fits_on_single_line?()","modifier_form?()","modifier_form?()","modifier_op?()","modifier_range()","modifier_replacement()","modifier_statement?()","move_assignment_inside_condition()","move_assignment_inside_condition()","move_assignment_inside_condition()","move_assignment_inside_condition()","move_assignment_outside_condition()","move_branch_inside_condition()","move_branch_inside_condition()","move_branch_inside_condition()","move_comment()","multiline?()","multiline?()","multiline_condition?()","multiple_assignment?()","multiple_assignment_message()","multiple_assignment_node()","multiple_blank_lines_groups?()","name()","name()","name()","name()","name_from_code()","named_mode?()","names()","names_match?()","namespace?()","namespace?()","need_check_localtime?()","needs_conversion?()","needs_escaping?()","needs_reorder?()","needs_whitespace?()","negated?()","negated?()","negated_condition()","negation_method?()","negative_conditional_corrector()","nested_comparison?()","nested_conditional?()","nested_variable_comparison?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_alignment()","new_branch_without_then()","new_condition_with_then()","new_expression()","new_line_needed_before_closing_brace?()","next_capture()","next_line_empty?()","next_match_pos()","next_temp_value()","nil_check()","nil_methods()","nil_style?()","no_acceptable_style!()","no_acceptable_style?()","no_base_message()","no_definition_message()","no_elements_on_same_line?()","no_mixed_keys_check()","no_offense_counts_without_auto_gen_config?()","no_space()","no_space_inside_left_brace()","no_surrounding_space?()","node_body()","node_body()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_parts()","node_search()","node_search_all()","node_search_body()","node_search_first()","nodoc()","nodoc?()","nodoc_comment?()","non_comment_token_line_numbers()","non_complex_expression?()","non_complex_send?()","non_eligible_body?()","non_eligible_condition?()","non_eligible_if?()","non_eligible_node?()","non_equality_operator?()","non_modifier_range()","non_modifier_then?()","non_public?()","non_rails()","non_redundant_merge?()","non_redundant_pairs?()","non_redundant_value_used?()","non_splat?()","non_string_argument?()","non_void_context()","noncommutative_operator?()","not_to_receiver()","notice()","notice_found?()","obsolete_cops()","obsolete_parameter_message()","obsolete_parameters()","octal_literal_type()","octal_zero_only?()","of()","offending_node?()","offending_node?()","offending_range()","offending_range()","offending_range()","offending_range()","offending_range()","offending_range()","offending_selector?()","offending_selector?()","offense()","offense()","offense()","offense()","offense()","offense()","offense()","offense()","offense()","offense?()","offense?()","offense?()","offense?()","offense?()","offense?()","offense?()","offense?()","offense_array_node?()","offense_detected()","offense_for_levels()","offense_for_method()","offense_hash_node?()","offense_location()","offense_message()","offense_message()","offense_node()","offense_range()","offenses()","offenses()","offenses_from_processed_source()","offensive?()","offensive?()","offset()","offset()","offset_provided?()","on_alias()","on_alias()","on_and()","on_and()","on_and()","on_and()","on_and()","on_and()","on_and_asgn()","on_and_asgn()","on_arg()","on_arg()","on_args()","on_args()","on_args()","on_argument()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_array()","on_assignment()","on_attr()","on_begin()","on_begin()","on_begin()","on_begin()","on_begin()","on_begin()","on_begin()","on_binary()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_block()","on_blockarg()","on_blockarg()","on_break()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_case()","on_casgn()","on_casgn()","on_casgn()","on_casgn()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_class()","on_conditionals()","on_const()","on_const()","on_const()","on_csend()","on_cvasgn()","on_cvasgn()","on_cvasgn()","on_cvasgn()","on_cvasgn()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_def()","on_defined?()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_defs()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_dstr()","on_eflipflop()","on_ensure()","on_ensure()","on_ensure()","on_ensure()","on_ensure()","on_erange()","on_float()","on_float()","on_for()","on_for()","on_for()","on_for()","on_gvar()","on_gvar()","on_gvasgn()","on_gvasgn()","on_gvasgn()","on_hash()","on_hash()","on_hash()","on_hash()","on_hash()","on_hash()","on_hash()","on_hash()","on_heredoc()","on_heredoc()","on_heredoc()","on_heredoc()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_if()","on_iflipflop()","on_int()","on_int()","on_irange()","on_ivasgn()","on_ivasgn()","on_ivasgn()","on_ivasgn()","on_kwarg()","on_kwbegin()","on_kwbegin()","on_kwbegin()","on_kwbegin()","on_kwbegin()","on_kwbegin()","on_kwoptarg()","on_kwoptarg()","on_kwoptarg()","on_kwrestarg()","on_lvasgn()","on_lvasgn()","on_lvasgn()","on_lvasgn()","on_lvasgn()","on_masgn()","on_masgn()","on_masgn()","on_masgn()","on_match_current_line()","on_method_def()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_module()","on_next()","on_normal_if_unless()","on_normal_if_unless()","on_normal_if_unless()","on_normal_if_unless()","on_normal_if_unless()","on_nth_ref()","on_op_asgn()","on_op_asgn()","on_optarg()","on_optarg()","on_optarg()","on_or()","on_or()","on_or()","on_or()","on_or()","on_or()","on_or()","on_or_asgn()","on_or_asgn()","on_or_asgn()","on_or_asgn()","on_or_asgn()","on_pair()","on_pair()","on_percent_literal()","on_percent_literal()","on_percent_literal()","on_percent_literal()","on_percent_literal()","on_percent_literal()","on_percent_literal()","on_postexe()","on_postexe()","on_postexe()","on_preexe()","on_preexe()","on_regexp()","on_regexp()","on_regexp()","on_regexp()","on_resbody()","on_resbody()","on_resbody()","on_resbody()","on_resbody()","on_resbody()","on_resbody()","on_resbody()","on_resbody()","on_rescue()","on_rescue()","on_rescue()","on_rescue()","on_rescue()","on_restarg()","on_return()","on_return()","on_return()","on_return()","on_return()","on_same_line?()","on_sclass()","on_sclass()","on_sclass()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_send()","on_special_asgn()","on_splat()","on_str()","on_str()","on_str()","on_str()","on_str()","on_str()","on_str()","on_str()","on_super()","on_super()","on_sym()","on_sym()","on_sym()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until()","on_until_post()","on_until_post()","on_until_post()","on_until_post()","on_when()","on_when()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while()","on_while_post()","on_while_post()","on_while_post()","on_while_post()","on_xstr()","on_xstr()","on_xstr()","on_xstr()","on_xstr()","on_yield()","on_yield()","on_zsuper()","one_child?()","only_begin_arg?()","only_closing_paren_before_comma?()","only_includes_unneeded_disable?()","opening_brace_on_same_line?()","opening_delimiter()","operation_rhs()","operator()","operator()","operator()","operator_assignment?()","operator_assignment_message()","operator_assignment_node()","operator_method?()","operator_rhs?()","operator_with_regular_syntax?()","opposite_kw()","opposite_method?()","opposite_style_detected()","opposite_style_detected()","option()","options_config=()","ordered_offense_counts()","ordered_offense_counts()","other_message()","other_offense_in_same_range?()","output_cop()","output_cop_comments()","output_cop_config()","output_cop_param_comments()","output_exclude_list()","output_exclude_path()","output_offending_files()","output_offenses()","own_line_comment?()","pairs()","pairs_on_same_line?()","parens_allowed?()","parens_required?()","parent_block_node()","parentheses?()","parenthesize?()","parenthesized?()","parenthesized?()","parenthesized_source()","parse()","parse()","parse()","parse()","parse()","parse()","parse_source()","parser_class()","part_of_an_array?()","part_of_ignored_node?()","partial_matcher!()","parts()","path_relative_to_config()","patterns_to_exclude()","patterns_to_include()","percent?()","percent_literal?()","percent_literal?()","persisted_referenced?()","pipe?()","plain_range()","plain_source()","plural_method?()","plural_receiver?()","pluralize()","pluralize()","pop_scope()","positional_arguments()","possible_dsl?()","possible_ellipses()","possibly_include_hidden?()","preceded_by_operator?()","preceding_comment?()","preceding_line()","preceding_lines()","preceding_non_public_modifier?()","preceed?()","predicate_method?()","predicate_prefixes()","predicate_whitelist()","preferred_base_class()","preferred_delimiters()","preferred_delimiters()","preferred_delimiters()","preferred_delimiters_config()","preferred_delimiters_for()","preferred_method()","preferred_method()","preferred_method()","preferred_method()","preferred_methods()","preferred_names()","preferred_string_literal()","prefix_blacklist()","prefixed_method_name()","prepare()","prev_node()","previous_and_current_lines_empty?()","previous_code_line()","previous_declaration()","previous_declaration()","previous_line_empty?()","previous_line_ignoring_comments()","previous_line_ignoring_comments()","primitive_array?()","print_available_cops()","print_cop_details()","print_cops_of_department()","prints_as_self?()","private_or_protected_before()","private_or_protected_delegation()","private_or_protected_inline()","procedural_method?()","process()","process_assignment()","process_assignment_node()","process_binary_operator_assignment()","process_commissioner_errors()","process_control_op()","process_explicit_path()","process_file()","process_logical_operator()","process_logical_operator_assignment()","process_multiple_assignment()","process_source()","progressbar_color()","proper_block_style?()","proper_dot_position?()","proper_method_name()","push_scope()","put_comma()","qualified?()","qualified_cop_name()","qualified_cop_name()","qualified_cop_name()","qualified_name()","qualify_badge()","rackup_config_file?()","rackup_options?()","rails?()","rails_safe_mode?()","rainbow()","raised_to_power_negative_numeric?()","range()","range_between_condition_and_else()","range_between_else_and_end()","range_between_tokens()","range_for_parentheses()","range_of_space_to_the_left()","range_of_space_to_the_right()","range_size()","read_attribute_replacement()","real_column()","receiver()","receiver()","receiver_alignment_base()","redundant_location_argument()","redundant_parentheses?()","redundant_parentheses_enabled?()","reference!()","reference!()","reference_url()","reference_variable()","referenced?()","regex()","regex_matches()","regexp_named_capture?()","register_each_offense()","register_kv_offense()","register_offense()","register_offense()","register_offense()","register_offense()","register_offense()","register_offense()","register_offense()","register_offense()","register_offense()","register_offense()","registered?()","regopt()","regular_method_call?()","regular_method_call_with_arguments?()","regular_operator?()","reindent()","reindent_line()","reindentable_lines()","reject_mutually_exclusive_defaults()","reject_obsolete_cops_and_parameters()","relative_date_method?()","relative_path()","relative_to_receiver_message()","relevant_diagnostic?()","relevant_diagnostic?()","relevant_diagnostic?()","relevant_file?()","relevant_file?()","relevant_node?()","relevant_node?()","relevant_options_digest()","remove()","remove()","remove_braces()","remove_braces_with_whitespace()","remove_brackets()","remove_files()","remove_irrelevant_cops()","remove_leading()","remove_leading_whitespace()","remove_oldest_files()","remove_optarg_equals()","remove_parentheses()","remove_preceding()","remove_second_param()","remove_space_before()","remove_trailing()","remove_trailing_whitespace()","remove_unparenthesized_whitespace()","remove_whitespace_in_branches()","render_html()","reorder_condition()","reordering_correction()","repeated_condition?()","replace()","replace_begin_end_with_modifier()","replace_braces_with_do_end()","replace_branch_assignment()","replace_do_end_with_braces()","replace_method()","replace_source()","replacement()","replacement()","replacement()","replacement()","replacement()","replacement()","replacement()","replacement()","replacement()","replacement_condition()","replacement_method()","replacement_method()","replacement_method()","replacement_method()","replacement_operator()","replacement_range()","replacement_supported?()","report_file()","report_file()","report_file_as_mark()","report_highlighted_area()","report_highlighted_area()","report_line()","report_line()","report_offense()","report_offense()","report_opposing_styles()","report_summary()","report_summary()","report_summary()","request()","require_exists?()","require_for_non_public_methods?()","require_parentheses?()","require_parentheses?()","require_parentheses?()","require_parentheses_when_complex?()","require_path()","require_path_fragments()","requires_bare_percent?()","requires_file_removal?()","requires_interpolation?()","requires_parens?()","requires_parens?()","requires_parentheses?()","requires_percent_q?()","rescue_modifier?()","rescued_exceptions()","reset_callbacks()","reset_errors()","resolve_badge()","resolve_block_method_name()","resolve_inheritance()","resolve_inheritance_from_gems()","resolve_requires()","rest_argument?()","return_of_method_call?()","return_value()","return_value?()","return_value_assigned?()","return_value_chaining?()","return_value_node_of_scope()","return_value_of_scope?()","return_value_used?()","reverse_comparison()","reverse_index()","revert_method_uselessness()","rewrite()","rewrite_with_modifier()","rhs()","right_argument_count?()","right_assignment_node()","right_brace?()","right_brace_and_space()","right_hand_operand()","right_method_name?()","right_receiver?()","right_side?()","root_node?()","rubocop_checksum()","rubocop_directive_comment?()","rubocop_root_file_path()","ruby19_check()","ruby19_no_mixed_keys_check()","ruby_executable?()","ruby_extension?()","ruby_file?()","ruby_filename?()","run()","run()","run()","run_cli()","run_exclusively_with?()","run_hook()","s()","safe_assignment_allowed?()","safe_chain?()","safe_method()","safe_mode?()","safe_navigation_call?()","safe_to_time?()","same_line?()","same_line?()","same_name_assignment?()","sample_arg()","sample_size()","sample_size_for_one_arg()","sample_size_for_two_args()","sanitize_name()","save()","save_in_cache()","scan()","scan_node()","scope()","scope_body()","scope_root()","scope_stack()","scope_type()","scoped_node?()","scoped_node?()","scoping_method_call?()","second_argument()","select()","selected_cops_of_department()","selector_range()","self_receiver?()","self_receiver?()","semantic_alignment_base()","semantic_alignment_node()","semantic_block_style?()","semantic_message()","semantic_operator?()","send_node()","separate_mixins()","separated_style?()","separator_delta()","separator_style?()","serialize_offense()","setter_call_to_local_variable?()","setter_method?()","setter_method?()","setter_method?()","setup_ivars()","setup_subtasks()","shebang?()","shebang?()","shebang_token?()","short_group_regex()","should_align?()","should_align_with_base?()","should_aligned_with_preceding_line?()","should_be_unused?()","should_have_comma?()","should_indent_relative_to_receiver?()","sibling_mixins()","similar_name_message()","similarity()","simple_if_without_break?()","simple_method_arg?()","single_child?()","single_interpolation?()","single_line?()","single_line_as_modifier?()","single_line_condition?()","single_line_conditions_only?()","single_line_ignoring_receiver?()","single_variable_interpolation?()","singular_method?()","singular_receiver?()","singularize()","skip_check?()","skip_children?()","slash_literal?()","slice_source()","slow_compare?()","smallest_percent_size()","smart_loaded_path()","smart_path()","smart_path()","snake_case()","sort!()","sort_by_range()","sorted?()","source()","source_after_highlight()","source_before_highlight()","source_from_regex_constructor()","source_from_regex_literal()","source_line()","source_location()","source_path()","source_range()","source_range()","source_starting_at()","space()","space_after_arrow?()","space_after_missing?()","space_before()","space_before_missing?()","space_between?()","space_detected()","space_forbidden_before_rcurly?()","space_inside_left_brace()","space_inside_right_brace()","space_missing()","space_missing?()","space_missing?()","space_on_any_side?()","space_on_both_sides?()","space_on_each_side?()","space_range()","space_range()","space_required_after?()","space_required_after_lcurly?()","space_required_before?()","space_style_before_rcurly()","space_style_before_rcurly()","spaces_before_left_parenthesis()","spec_path()","special_inner_call_indentation?()","special_keyword?()","special_keyword_arg?()","special_modifier?()","specifics()","specifics()","specified?()","splat_args?()","splat_argument?()","splat_offenses()","splat_variable_before?()","split_comment()","split_token()","sprintf?()","square_brackets?()","stabby_lambda_with_args?()","standard_string_literal?()","start_for_block_node()","start_line_range()","start_of_new_scope?()","start_with_percent_q_variant?()","start_with_shebang?()","started()","started()","started()","started()","started()","started()","started()","started()","started()","started()","starts_with_access_modifier?()","static_method_name()","stderr_gvar?()","stderr_puts_range()","str_content()","str_contents()","string_literal?()","string_literal?()","string_literal_lines()","string_literals_config()","string_source()","string_with_slash?()","stripped_source_upto()","style()","style()","style()","style()","style()","style_detected()","style_for_empty_braces()","style_for_empty_braces()","style_guide_cops_only?()","style_guide_url()","style_parameter_name()","style_parameter_name()","style_parameter_name()","style_parameter_name()","style_parameter_name()","style_parameter_name()","summary()","super?()","support_autocorrect?()","support_target_rails_version?()","support_target_ruby_version?()","supported_styles()","supported_types()","suspicious_name?()","swap_range()","sym_indices?()","symbol_without_quote?()","symbols_contain_spaces?()","symlink_protection_triggered?()","syntactic_alignment_base()","system_call_err?()","tail()","tail()","take_variable_and_default_from_ternary()","take_variable_and_default_from_unless()","target_args()","target_files_in_dir()","target_line()","target_method_lineno()","target_rails_version()","target_rails_version()","target_ruby_source()","target_ruby_version()","target_ruby_version()","target_ruby_version_to_f!()","targets_exception?()","ternary()","ternary?()","ternary_condition?()","then?()","to_assignments()","to_h()","to_h()","to_hash()","to_inspect?()","to_json()","to_modifier_form()","to_module_name()","to_namespace()","to_normal_if()","to_regexp()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_string_literal()","to_supported_styles()","to_symbol_literal()","to_ternary()","todo()","token_after_last_string()","token_ranges()","token_table()","tokenize()","tokens()","tokens()","tokens_for_lines()","top_level_node?()","toplevel_dirs()","total_offense_count()","total_offense_count()","trailing_range?()","transform()","trap_interrupt()","traverse_node()","trivial_accessor_kind()","trivial_delegate?()","trivial_reader?()","trivial_writer?()","tsort_each_child()","tsort_each_node()","two_alternatives?()","type()","unary_plus_non_offense?()","unexpected_double_quotes?()","unexpected_indent_offset()","unexpected_single_quotes?()","unexpected_style_detected()","unimportant_missing_cr?()","union_terms()","unknown_env_name?()","unless?()","unless_and_nil_check?()","unless_condition()","unless_condition()","unless_else_config()","unless_else_cop_enabled?()","unnecessary_comment_offense()","unneeded_brackets?()","unneeded_ranges()","unparenthesized_literal_args?()","unparenthesized_method_call?()","unrecognized_style_detected()","unsafe_autocorrect?()","unsafe_method?()","unused_range()","unused_variables_only?()","unwanted_parentheses()","unwanted_parentheses_corrector()","unwind()","updated_directives()","uri_regexp()","urls()","used?()","used?()","user_vars()","uses_preferred_delimiter?()","valid?()","valid_argument_types?()","valid_exceptions()","valid_line?()","valid_name?()","valid_options?()","valid_syntax?()","valid_uri?()","validate()","validate_compatibility()","validate_config()","validate_config()","validate_config()","validate_cop_list()","validate_enforced_styles()","validate_exclude_limit_option()","validate_options_vs_config()","validate_parallel()","validate_parameter_names()","validate_section_presence()","validate_syntax_cop()","value()","value_delta()","value_delta()","value_delta()","value_delta()","value_used?()","values()","values()","var_nodes()","variable()","variable_alignment?()","variable_exist?()","variable_in_mass_assignment?()","variable_interpolation?()","variable_like_method_invocation?()","variable_name()","variable_type()","variable_used?()","variables_in_node()","variables_in_simple_node()","version()","void_context?()","void_context?()","void_context?()","void_context_method?()","walk()","warm_cache()","warn_about_unrecognized_cops()","when_branch_range()","when_branches()","white_space_range()","whitelist()","whitelist()","whitelist()","whitelisted?()","whitelisted_methods()","whitespace_after?()","whitespace_after?()","whitespace_after_operator?()","whitespace_before?()","whitespace_before_arg()","whitespace_range()","whitespace_range()","whitespace_range()","windows?()","with()","with_color()","with_cop_error_handling()","with_department()","with_department()","with_index_range()","with_object_range()","with_offense_annotations()","with_temp_node()","with_temp_variable()","within?()","within_change_method?()","within_reversible_block?()","without_department()","word_regex()","word_symbol_pair?()","write_attribute_replacement()","write_source()","write_spec()","write_unless_file_exists()","wrong_method_name()","wrong_quotes?()","yaml_safe_load()","yoda_condition?()","license","readme"],"longSearchIndex":["cophelper","heredoc","hostenvironmentsimulatorhelper","object","rubocop","rubocop::ast","rubocop::ast::andnode","rubocop::ast::argsnode","rubocop::ast::arraynode","rubocop::ast::binaryoperatornode","rubocop::ast::blocknode","rubocop::ast::builder","rubocop::ast::casenode","rubocop::ast::collectionnode","rubocop::ast::conditionalnode","rubocop::ast::defnode","rubocop::ast::ensurenode","rubocop::ast::fornode","rubocop::ast::hashelementnode","rubocop::ast::hashelementnode::hashelementdelta","rubocop::ast::hashnode","rubocop::ast::ifnode","rubocop::ast::keywordsplatnode","rubocop::ast::methoddispatchnode","rubocop::ast::methodidentifierpredicates","rubocop::ast::modifiernode","rubocop::ast::node","rubocop::ast::ornode","rubocop::ast::pairnode","rubocop::ast::parameterizednode","rubocop::ast::predicateoperatornode","rubocop::ast::regexpnode","rubocop::ast::resbodynode","rubocop::ast::sendnode","rubocop::ast::sexp","rubocop::ast::supernode","rubocop::ast::traversal","rubocop::ast::untilnode","rubocop::ast::whennode","rubocop::ast::whilenode","rubocop::ast::yieldnode","rubocop::cli","rubocop::cli::finished","rubocop::cacheddata","rubocop::commentconfig","rubocop::config","rubocop::configloader","rubocop::configloaderresolver","rubocop::configstore","rubocop::cop","rubocop::cop::ambiguouscopname","rubocop::cop::arrayhashindentation","rubocop::cop::arrayminsize","rubocop::cop::arraysyntax","rubocop::cop::autocorrectalignment","rubocop::cop::autocorrectlogic","rubocop::cop::badge","rubocop::cop::badge::invalidbadge","rubocop::cop::bundler","rubocop::cop::bundler::duplicatedgem","rubocop::cop::bundler::insecureprotocolsource","rubocop::cop::bundler::orderedgems","rubocop::cop::checkassignment","rubocop::cop::checkassignment::util","rubocop::cop::classishlength","rubocop::cop::codelength","rubocop::cop::commissioner","rubocop::cop::configurableenforcedstyle","rubocop::cop::configurableformatting","rubocop::cop::configurablemax","rubocop::cop::configurablenaming","rubocop::cop::configurablenumbering","rubocop::cop::cop","rubocop::cop::corrector","rubocop::cop::defnode","rubocop::cop::documentationcomment","rubocop::cop::duplication","rubocop::cop::endkeywordalignment","rubocop::cop::enforcesuperclass","rubocop::cop::firstelementlinebreak","rubocop::cop::force","rubocop::cop::frozenstringliteral","rubocop::cop::gemspec","rubocop::cop::gemspec::ordereddependencies","rubocop::cop::generator","rubocop::cop::generator::requirefileinjector","rubocop::cop::hashalignment","rubocop::cop::hashalignment::keyalignment","rubocop::cop::hashalignment::separatoralignment","rubocop::cop::hashalignment::tablealignment","rubocop::cop::hashalignment::valuealignment","rubocop::cop::ignorednode","rubocop::cop::ignoredpattern","rubocop::cop::integernode","rubocop::cop::internalaffairs","rubocop::cop::internalaffairs::deprecatedpositionalarguments","rubocop::cop::internalaffairs::nodetypepredicate","rubocop::cop::internalaffairs::offenselocationkeyword","rubocop::cop::internalaffairs::redundantlocationargument","rubocop::cop::internalaffairs::redundantmessageargument","rubocop::cop::internalaffairs::uselessmessageassertion","rubocop::cop::layout","rubocop::cop::layout::accessmodifierindentation","rubocop::cop::layout::alignarray","rubocop::cop::layout::alignhash","rubocop::cop::layout::alignparameters","rubocop::cop::layout::blockendnewline","rubocop::cop::layout::caseindentation","rubocop::cop::layout::closingparenthesisindentation","rubocop::cop::layout::commentindentation","rubocop::cop::layout::dotposition","rubocop::cop::layout::elsealignment","rubocop::cop::layout::emptylineaftermagiccomment","rubocop::cop::layout::emptylinebetweendefs","rubocop::cop::layout::emptylines","rubocop::cop::layout::emptylinesaroundaccessmodifier","rubocop::cop::layout::emptylinesaroundbeginbody","rubocop::cop::layout::emptylinesaroundblockbody","rubocop::cop::layout::emptylinesaroundbody","rubocop::cop::layout::emptylinesaroundclassbody","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords","rubocop::cop::layout::emptylinesaroundmethodbody","rubocop::cop::layout::emptylinesaroundmodulebody","rubocop::cop::layout::endofline","rubocop::cop::layout::extraspacing","rubocop::cop::layout::firstarrayelementlinebreak","rubocop::cop::layout::firsthashelementlinebreak","rubocop::cop::layout::firstmethodargumentlinebreak","rubocop::cop::layout::firstmethodparameterlinebreak","rubocop::cop::layout::firstparameterindentation","rubocop::cop::layout::indentarray","rubocop::cop::layout::indentassignment","rubocop::cop::layout::indenthash","rubocop::cop::layout::indentheredoc","rubocop::cop::layout::indentationconsistency","rubocop::cop::layout::indentationwidth","rubocop::cop::layout::initialindentation","rubocop::cop::layout::leadingcommentspace","rubocop::cop::layout::multilinearraybracelayout","rubocop::cop::layout::multilineassignmentlayout","rubocop::cop::layout::multilineblocklayout","rubocop::cop::layout::multilinehashbracelayout","rubocop::cop::layout::multilinemethodcallbracelayout","rubocop::cop::layout::multilinemethodcallindentation","rubocop::cop::layout::multilinemethoddefinitionbracelayout","rubocop::cop::layout::multilineoperationindentation","rubocop::cop::layout::rescueensurealignment","rubocop::cop::layout::spaceaftercolon","rubocop::cop::layout::spaceaftercomma","rubocop::cop::layout::spaceaftermethodname","rubocop::cop::layout::spaceafternot","rubocop::cop::layout::spaceaftersemicolon","rubocop::cop::layout::spacearoundblockparameters","rubocop::cop::layout::spacearoundequalsinparameterdefault","rubocop::cop::layout::spacearoundkeyword","rubocop::cop::layout::spacearoundoperators","rubocop::cop::layout::spacebeforeblockbraces","rubocop::cop::layout::spacebeforecomma","rubocop::cop::layout::spacebeforecomment","rubocop::cop::layout::spacebeforefirstarg","rubocop::cop::layout::spacebeforesemicolon","rubocop::cop::layout::spaceinlambdaliteral","rubocop::cop::layout::spaceinsidearraypercentliteral","rubocop::cop::layout::spaceinsideblockbraces","rubocop::cop::layout::spaceinsidebrackets","rubocop::cop::layout::spaceinsidehashliteralbraces","rubocop::cop::layout::spaceinsideparens","rubocop::cop::layout::spaceinsidepercentliteraldelimiters","rubocop::cop::layout::spaceinsiderangeliteral","rubocop::cop::layout::spaceinsidestringinterpolation","rubocop::cop::layout::tab","rubocop::cop::layout::trailingblanklines","rubocop::cop::layout::trailingwhitespace","rubocop::cop::lint","rubocop::cop::lint::ambiguousblockassociation","rubocop::cop::lint::ambiguousoperator","rubocop::cop::lint::ambiguousregexpliteral","rubocop::cop::lint::assignmentincondition","rubocop::cop::lint::blockalignment","rubocop::cop::lint::booleansymbol","rubocop::cop::lint::circularargumentreference","rubocop::cop::lint::conditionposition","rubocop::cop::lint::debugger","rubocop::cop::lint::defendalignment","rubocop::cop::lint::deprecatedclassmethods","rubocop::cop::lint::deprecatedclassmethods::deprecatedclassmethod","rubocop::cop::lint::duplicatecasecondition","rubocop::cop::lint::duplicatemethods","rubocop::cop::lint::duplicatedkey","rubocop::cop::lint::eachwithobjectargument","rubocop::cop::lint::elselayout","rubocop::cop::lint::emptyensure","rubocop::cop::lint::emptyexpression","rubocop::cop::lint::emptyinterpolation","rubocop::cop::lint::emptywhen","rubocop::cop::lint::endalignment","rubocop::cop::lint::endinmethod","rubocop::cop::lint::ensurereturn","rubocop::cop::lint::floatoutofrange","rubocop::cop::lint::formatparametermismatch","rubocop::cop::lint::handleexceptions","rubocop::cop::lint::implicitstringconcatenation","rubocop::cop::lint::ineffectiveaccessmodifier","rubocop::cop::lint::inheritexception","rubocop::cop::lint::interpolationcheck","rubocop::cop::lint::literalascondition","rubocop::cop::lint::literalininterpolation","rubocop::cop::lint::loop","rubocop::cop::lint::multiplecompare","rubocop::cop::lint::nestedmethoddefinition","rubocop::cop::lint::nextwithoutaccumulator","rubocop::cop::lint::nonlocalexitfromiterator","rubocop::cop::lint::parenthesesasgroupedexpression","rubocop::cop::lint::percentstringarray","rubocop::cop::lint::percentsymbolarray","rubocop::cop::lint::randone","rubocop::cop::lint::redundantwithindex","rubocop::cop::lint::redundantwithobject","rubocop::cop::lint::regexpascondition","rubocop::cop::lint::requireparentheses","rubocop::cop::lint::rescueexception","rubocop::cop::lint::rescuetype","rubocop::cop::lint::rescuewithouterrorclass","rubocop::cop::lint::returninvoidcontext","rubocop::cop::lint::safenavigationchain","rubocop::cop::lint::scriptpermission","rubocop::cop::lint::shadowedexception","rubocop::cop::lint::shadowingouterlocalvariable","rubocop::cop::lint::stringconversionininterpolation","rubocop::cop::lint::syntax","rubocop::cop::lint::underscoreprefixedvariablename","rubocop::cop::lint::unifiedinteger","rubocop::cop::lint::unneededdisable","rubocop::cop::lint::unneededrequirestatement","rubocop::cop::lint::unneededsplatexpansion","rubocop::cop::lint::unreachablecode","rubocop::cop::lint::unusedargument","rubocop::cop::lint::unusedblockargument","rubocop::cop::lint::unusedmethodargument","rubocop::cop::lint::uriescapeunescape","rubocop::cop::lint::uriregexp","rubocop::cop::lint::uselessaccessmodifier","rubocop::cop::lint::uselessassignment","rubocop::cop::lint::uselesscomparison","rubocop::cop::lint::uselesselsewithoutrescue","rubocop::cop::lint::uselesssettercall","rubocop::cop::lint::uselesssettercall::methodvariabletracker","rubocop::cop::lint::void","rubocop::cop::matchrange","rubocop::cop::messageannotator","rubocop::cop::methodcomplexity","rubocop::cop::methodpreference","rubocop::cop::metrics","rubocop::cop::metrics::abcsize","rubocop::cop::metrics::blocklength","rubocop::cop::metrics::blocknesting","rubocop::cop::metrics::classlength","rubocop::cop::metrics::cyclomaticcomplexity","rubocop::cop::metrics::linelength","rubocop::cop::metrics::methodlength","rubocop::cop::metrics::modulelength","rubocop::cop::metrics::parameterlists","rubocop::cop::metrics::perceivedcomplexity","rubocop::cop::minbodylength","rubocop::cop::multilineexpressionindentation","rubocop::cop::multilineliteralbracelayout","rubocop::cop::naming","rubocop::cop::naming::accessormethodname","rubocop::cop::naming::asciiidentifiers","rubocop::cop::naming::binaryoperatorparametername","rubocop::cop::naming::classandmodulecamelcase","rubocop::cop::naming::constantname","rubocop::cop::naming::filename","rubocop::cop::naming::heredocdelimitercase","rubocop::cop::naming::heredocdelimiternaming","rubocop::cop::naming::methodname","rubocop::cop::naming::predicatename","rubocop::cop::naming::variablename","rubocop::cop::naming::variablenumber","rubocop::cop::negativeconditional","rubocop::cop::offense","rubocop::cop::onnormalifunless","rubocop::cop::orderedgemnode","rubocop::cop::parentheses","rubocop::cop::parserdiagnostic","rubocop::cop::percentarray","rubocop::cop::percentliteral","rubocop::cop::performance","rubocop::cop::performance::caller","rubocop::cop::performance::casewhensplat","rubocop::cop::performance::casecmp","rubocop::cop::performance::comparewithblock","rubocop::cop::performance::count","rubocop::cop::performance::detect","rubocop::cop::performance::doublestartendwith","rubocop::cop::performance::endwith","rubocop::cop::performance::fixedsize","rubocop::cop::performance::flatmap","rubocop::cop::performance::hasheachmethods","rubocop::cop::performance::lstriprstrip","rubocop::cop::performance::rangeinclude","rubocop::cop::performance::redundantblockcall","rubocop::cop::performance::redundantmatch","rubocop::cop::performance::redundantmerge","rubocop::cop::performance::redundantmerge::eachwithobjectinspector","rubocop::cop::performance::redundantsortby","rubocop::cop::performance::regexpmatch","rubocop::cop::performance::reverseeach","rubocop::cop::performance::sample","rubocop::cop::performance::size","rubocop::cop::performance::startwith","rubocop::cop::performance::stringreplacement","rubocop::cop::performance::timesmap","rubocop::cop::performance::unfreezestring","rubocop::cop::performance::uridefaultparser","rubocop::cop::precedingfollowingalignment","rubocop::cop::rails","rubocop::cop::rails::actionfilter","rubocop::cop::rails::activesupportaliases","rubocop::cop::rails::applicationjob","rubocop::cop::rails::applicationrecord","rubocop::cop::rails::blank","rubocop::cop::rails::date","rubocop::cop::rails::delegate","rubocop::cop::rails::delegateallowblank","rubocop::cop::rails::dynamicfindby","rubocop::cop::rails::enumuniqueness","rubocop::cop::rails::exit","rubocop::cop::rails::filepath","rubocop::cop::rails::findby","rubocop::cop::rails::findeach","rubocop::cop::rails::hasandbelongstomany","rubocop::cop::rails::hasmanyorhasonedependent","rubocop::cop::rails::httppositionalarguments","rubocop::cop::rails::notnullcolumn","rubocop::cop::rails::output","rubocop::cop::rails::outputsafety","rubocop::cop::rails::pluralizationgrammar","rubocop::cop::rails::present","rubocop::cop::rails::readwriteattribute","rubocop::cop::rails::relativedateconstant","rubocop::cop::rails::requestreferer","rubocop::cop::rails::reversiblemigration","rubocop::cop::rails::safenavigation","rubocop::cop::rails::savebang","rubocop::cop::rails::scopeargs","rubocop::cop::rails::skipsmodelvalidations","rubocop::cop::rails::timezone","rubocop::cop::rails::uniqbeforepluck","rubocop::cop::rails::unknownenv","rubocop::cop::rails::validation","rubocop::cop::registry","rubocop::cop::rescuenode","rubocop::cop::safeassignment","rubocop::cop::safemode","rubocop::cop::security","rubocop::cop::security::eval","rubocop::cop::security::jsonload","rubocop::cop::security::marshalload","rubocop::cop::security::yamlload","rubocop::cop::severity","rubocop::cop::spaceafterpunctuation","rubocop::cop::spacebeforepunctuation","rubocop::cop::spaceinside","rubocop::cop::spaceinside::brackets","rubocop::cop::statementmodifier","rubocop::cop::stringhelp","rubocop::cop::stringliteralshelp","rubocop::cop::style","rubocop::cop::style::alias","rubocop::cop::style::andor","rubocop::cop::style::annotationcomment","rubocop::cop::style::arrayjoin","rubocop::cop::style::asciicomments","rubocop::cop::style::attr","rubocop::cop::style::autoresourcecleanup","rubocop::cop::style::barepercentliterals","rubocop::cop::style::beginblock","rubocop::cop::style::blockcomments","rubocop::cop::style::blockdelimiters","rubocop::cop::style::bracesaroundhashparameters","rubocop::cop::style::casecorrector","rubocop::cop::style::caseequality","rubocop::cop::style::characterliteral","rubocop::cop::style::classandmodulechildren","rubocop::cop::style::classandmodulechildren::class","rubocop::cop::style::classcheck","rubocop::cop::style::classmethods","rubocop::cop::style::classvars","rubocop::cop::style::collectionmethods","rubocop::cop::style::colonmethodcall","rubocop::cop::style::commandliteral","rubocop::cop::style::commentannotation","rubocop::cop::style::commentedkeyword","rubocop::cop::style::conditionalassignment","rubocop::cop::style::conditionalassignmenthelper","rubocop::cop::style::conditionalcorrectorhelper","rubocop::cop::style::copyright","rubocop::cop::style::datetime","rubocop::cop::style::defwithparentheses","rubocop::cop::style::dir","rubocop::cop::style::documentation","rubocop::cop::style::documentationmethod","rubocop::cop::style::doublenegation","rubocop::cop::style::eachforsimpleloop","rubocop::cop::style::eachwithobject","rubocop::cop::style::emptycasecondition","rubocop::cop::style::emptyelse","rubocop::cop::style::emptyliteral","rubocop::cop::style::emptymethod","rubocop::cop::style::encoding","rubocop::cop::style::endblock","rubocop::cop::style::evenodd","rubocop::cop::style::flipflop","rubocop::cop::style::for","rubocop::cop::style::formatstring","rubocop::cop::style::formatstringtoken","rubocop::cop::style::frozenstringliteralcomment","rubocop::cop::style::globalvars","rubocop::cop::style::guardclause","rubocop::cop::style::hashsyntax","rubocop::cop::style::identicalconditionalbranches","rubocop::cop::style::ifcorrector","rubocop::cop::style::ifinsideelse","rubocop::cop::style::ifunlessmodifier","rubocop::cop::style::ifunlessmodifierofifunless","rubocop::cop::style::ifwithsemicolon","rubocop::cop::style::implicitruntimeerror","rubocop::cop::style::infiniteloop","rubocop::cop::style::inlinecomment","rubocop::cop::style::inversemethods","rubocop::cop::style::lambda","rubocop::cop::style::lambdacall","rubocop::cop::style::lineendconcatenation","rubocop::cop::style::methodcallwithargsparentheses","rubocop::cop::style::methodcallwithoutargsparentheses","rubocop::cop::style::methodcalledondoendblock","rubocop::cop::style::methoddefparentheses","rubocop::cop::style::methodmissing","rubocop::cop::style::minmax","rubocop::cop::style::missingelse","rubocop::cop::style::mixingrouping","rubocop::cop::style::mixinusage","rubocop::cop::style::modulefunction","rubocop::cop::style::multilineblockchain","rubocop::cop::style::multilineifmodifier","rubocop::cop::style::multilineifthen","rubocop::cop::style::multilinememoization","rubocop::cop::style::multilineternaryoperator","rubocop::cop::style::multiplecomparison","rubocop::cop::style::mutableconstant","rubocop::cop::style::negatedif","rubocop::cop::style::negatedwhile","rubocop::cop::style::nestedmodifier","rubocop::cop::style::nestedparenthesizedcalls","rubocop::cop::style::nestedternaryoperator","rubocop::cop::style::next","rubocop::cop::style::nilcomparison","rubocop::cop::style::nonnilcheck","rubocop::cop::style::not","rubocop::cop::style::numericliteralprefix","rubocop::cop::style::numericliterals","rubocop::cop::style::numericpredicate","rubocop::cop::style::onelineconditional","rubocop::cop::style::optionhash","rubocop::cop::style::optionalarguments","rubocop::cop::style::orassignment","rubocop::cop::style::parallelassignment","rubocop::cop::style::parallelassignment::assignmentsorter","rubocop::cop::style::parallelassignment::genericcorrector","rubocop::cop::style::parallelassignment::modifiercorrector","rubocop::cop::style::parallelassignment::rescuecorrector","rubocop::cop::style::parenthesesaroundcondition","rubocop::cop::style::percentliteraldelimiters","rubocop::cop::style::percentqliterals","rubocop::cop::style::perlbackrefs","rubocop::cop::style::preferredhashmethods","rubocop::cop::style::proc","rubocop::cop::style::raiseargs","rubocop::cop::style::redundantbegin","rubocop::cop::style::redundantconditional","rubocop::cop::style::redundantexception","rubocop::cop::style::redundantfreeze","rubocop::cop::style::redundantparentheses","rubocop::cop::style::redundantreturn","rubocop::cop::style::redundantself","rubocop::cop::style::regexpliteral","rubocop::cop::style::rescuemodifier","rubocop::cop::style::returnnil","rubocop::cop::style::safenavigation","rubocop::cop::style::selfassignment","rubocop::cop::style::semicolon","rubocop::cop::style::send","rubocop::cop::style::signalexception","rubocop::cop::style::singlelineblockparams","rubocop::cop::style::singlelinemethods","rubocop::cop::style::specialglobalvars","rubocop::cop::style::stabbylambdaparentheses","rubocop::cop::style::stderrputs","rubocop::cop::style::stringliterals","rubocop::cop::style::stringliteralsininterpolation","rubocop::cop::style::stringmethods","rubocop::cop::style::structinheritance","rubocop::cop::style::symbolarray","rubocop::cop::style::symbolliteral","rubocop::cop::style::symbolproc","rubocop::cop::style::ternarycorrector","rubocop::cop::style::ternaryparentheses","rubocop::cop::style::trailingcommainarguments","rubocop::cop::style::trailingcommainliteral","rubocop::cop::style::trailingunderscorevariable","rubocop::cop::style::trivialaccessors","rubocop::cop::style::unlesscorrector","rubocop::cop::style::unlesselse","rubocop::cop::style::unneededcapitalw","rubocop::cop::style::unneededinterpolation","rubocop::cop::style::unneededpercentq","rubocop::cop::style::variableinterpolation","rubocop::cop::style::whenthen","rubocop::cop::style::whileuntildo","rubocop::cop::style::whileuntilmodifier","rubocop::cop::style::wordarray","rubocop::cop::style::yodacondition","rubocop::cop::style::zerolengthpredicate","rubocop::cop::surroundingspace","rubocop::cop::targetrailsversion","rubocop::cop::targetrubyversion","rubocop::cop::team","rubocop::cop::toomanylines","rubocop::cop::trailingcomma","rubocop::cop::util","rubocop::cop::variableforce","rubocop::cop::variableforce::and","rubocop::cop::variableforce::assignment","rubocop::cop::variableforce::branch","rubocop::cop::variableforce::branchable","rubocop::cop::variableforce::case","rubocop::cop::variableforce::ensure","rubocop::cop::variableforce::exceptionhandler","rubocop::cop::variableforce::for","rubocop::cop::variableforce::if","rubocop::cop::variableforce::logicaloperator","rubocop::cop::variableforce::or","rubocop::cop::variableforce::reference","rubocop::cop::variableforce::rescue","rubocop::cop::variableforce::scope","rubocop::cop::variableforce::simpleconditional","rubocop::cop::variableforce::until","rubocop::cop::variableforce::untilpost","rubocop::cop::variableforce::variable","rubocop::cop::variableforce::variabletable","rubocop::cop::variableforce::while","rubocop::cop::variableforce::whilepost","rubocop::error","rubocop::formatter","rubocop::formatter::baseformatter","rubocop::formatter::clangstyleformatter","rubocop::formatter::colorizable","rubocop::formatter::disabledconfigformatter","rubocop::formatter::disabledlinesformatter","rubocop::formatter::emacsstyleformatter","rubocop::formatter::filelistformatter","rubocop::formatter::formatterset","rubocop::formatter::fuubarstyleformatter","rubocop::formatter::htmlformatter","rubocop::formatter::htmlformatter::erbcontext","rubocop::formatter::jsonformatter","rubocop::formatter::offensecountformatter","rubocop::formatter::progressformatter","rubocop::formatter::simpletextformatter","rubocop::formatter::simpletextformatter::report","rubocop::formatter::tapformatter","rubocop::formatter::textutil","rubocop::formatter::worstoffendersformatter","rubocop::magiccomment","rubocop::magiccomment::editorcomment","rubocop::magiccomment::emacscomment","rubocop::magiccomment::simplecomment","rubocop::magiccomment::vimcomment","rubocop::namesimilarity","rubocop::nodepattern","rubocop::nodepattern::compiler","rubocop::nodepattern::macros","rubocop::options","rubocop::optionshelp","rubocop::optionsvalidator","rubocop::pathutil","rubocop::platform","rubocop::processedsource","rubocop::rspec","rubocop::rspec::expectoffense","rubocop::rspec::expectoffense::annotatedsource","rubocop::raketask","rubocop::remoteconfig","rubocop::resultcache","rubocop::runner","rubocop::runner::infinitecorrectionloop","rubocop::stringinterpreter","rubocop::stringutil","rubocop::stringutil::jaro","rubocop::stringutil::jarowinkler","rubocop::targetfinder","rubocop::token","rubocop::validationerror","rubocop::version","rubocop::warning","rubocop::cop::offense#<=>()","rubocop::cop::severity#<=>()","rubocop::cop::badge#==()","rubocop::cop::offense#==()","rubocop::cop::registry#==()","rubocop::cop::severity#==()","rubocop::cop::variableforce::scope#==()","rubocop::config#[]()","rubocop::processedsource#[]()","rubocop::config#[]=()","cophelper#_investigate()","rubocop::runner#abort()","rubocop::pathutil#absolute?()","rubocop::cop::style::stringliterals#accept_child_double_quotes?()","rubocop::cop::performance::detect#accept_first_call?()","rubocop::cop::performance::stringreplacement#accept_first_param?()","rubocop::cop::layout::spacearoundkeyword#accept_left_parenthesis?()","rubocop::cop::layout::spacearoundkeyword#accept_left_square_bracket?()","rubocop::cop::performance::stringreplacement#accept_second_param?()","rubocop::cop::rails::timezone#acceptable?()","rubocop::cop::style::hashsyntax#acceptable_19_syntax_symbol?()","rubocop::cop::style::unneededpercentq#acceptable_capital_q?()","rubocop::cop::style::raiseargs#acceptable_exploded_args?()","rubocop::cop::rails::timezone#acceptable_methods()","rubocop::cop::style::unneededpercentq#acceptable_q?()","rubocop::cop::style::guardclause#accepted_form?()","rubocop::cop::style::guardclause#accepted_if?()","rubocop::cop::layout::spacearoundkeyword#accepted_opening_delimiter?()","rubocop::ast::methoddispatchnode#access_modifier?()","rubocop::cop::style::parallelassignment::assignmentsorter#accesses?()","rubocop::cop::variableforce::variabletable#accessible_variables()","rubocop::cop::style::trivialaccessors#accessor()","rubocop::cop::style::eachwithobject#accumulator_param_assigned_to?()","rubocop::cli#act_on_options()","rubocop::cop::style::yodacondition#actual_code_range()","rubocop::cop::style::next#actual_indent()","rubocop::cop::style::bracesaroundhashparameters#add_arg_offense()","rubocop::options#add_boolean_flags()","rubocop::cop::style::bracesaroundhashparameters#add_braces()","rubocop::cop::style::redundantreturn#add_braces()","rubocop::cop::style::redundantreturn#add_brackets()","rubocop::options#add_configuration_options()","rubocop::options#add_cop_selection_csv_option()","rubocop::configloader::add_excludes_from_files()","rubocop::config#add_excludes_from_higher_level()","rubocop::options#add_flags_with_optional_args()","rubocop::formatter::formatterset#add_formatter()","rubocop::options#add_formatting_options()","rubocop::options#add_list_options()","rubocop::configloader::add_missing_namespaces()","rubocop::cop::cop#add_offense()","rubocop::cop::cop#add_offense_common()","rubocop::cop::cop#add_offense_deprecated()","rubocop::cop::style::alias#add_offense_for_args()","rubocop::cop::performance::doublestartendwith#add_offense_for_double_call()","rubocop::cop::lint::unneededdisable#add_offense_for_entire_comment()","rubocop::cop::layout::multilineblocklayout#add_offense_for_expression()","rubocop::cop::endkeywordalignment#add_offense_for_misalignment()","rubocop::cop::lint::unneededdisable#add_offense_for_some_cops()","rubocop::cop::style::barepercentliterals#add_offense_for_wrong_style()","rubocop::cop::lint::syntax#add_offense_from_diagnostic()","rubocop::cop::lint::syntax#add_offense_from_error()","rubocop::cop::lint::unneededdisable#add_offenses()","rubocop::cop::layout::spaceinsidepercentliteraldelimiters#add_offenses_for_unnecessary_spaces()","rubocop::options#add_only_options()","rubocop::cop::style::lambdacall#add_parentheses()","rubocop::cop::style::redundantself#add_scope()","rubocop::cop::style::parallelassignment#add_self_to_getters()","rubocop::options#add_severity_option()","rubocop::cop::lint::blockalignment#add_space_before()","rubocop::runner#add_unneeded_disables()","rubocop::cop::layout::spaceinsideblockbraces#adjacent_braces()","rubocop::cop::layout::alignhash#adjust()","rubocop::cop::lint::underscoreprefixedvariablename#after_leaving_scope()","rubocop::cop::lint::unusedargument#after_leaving_scope()","rubocop::cop::lint::uselessassignment#after_leaving_scope()","rubocop::cop::rails::savebang#after_leaving_scope()","rubocop::cop::style::alias#alias_keyword_possible?()","rubocop::cop::style::alias#alias_method_possible?()","rubocop::cop::endkeywordalignment#align()","rubocop::cop::layout::extraspacing#align_column()","rubocop::cop::layout::extraspacing#align_equal_sign()","rubocop::cop::layout::extraspacing#align_equal_signs()","rubocop::cop::layout::spacearoundoperators#align_hash_cop_config()","rubocop::cop::layout::multilinemethodcallindentation#align_with_base_message()","rubocop::cop::precedingfollowingalignment#aligned_assignment?()","rubocop::cop::precedingfollowingalignment#aligned_char?()","rubocop::cop::layout::extraspacing#aligned_comments?()","rubocop::cop::precedingfollowingalignment#aligned_identical?()","rubocop::cop::precedingfollowingalignment#aligned_operator?()","rubocop::cop::layout::extraspacing#aligned_tok?()","rubocop::cop::precedingfollowingalignment#aligned_token?()","rubocop::cop::precedingfollowingalignment#aligned_with_adjacent_line?()","rubocop::cop::precedingfollowingalignment#aligned_with_any_line?()","rubocop::cop::precedingfollowingalignment#aligned_with_any_line_range?()","rubocop::cop::precedingfollowingalignment#aligned_with_line?()","rubocop::cop::layout::extraspacing#aligned_with_next_comment?()","rubocop::cop::precedingfollowingalignment#aligned_with_operator?()","rubocop::cop::layout::extraspacing#aligned_with_previous_comment?()","rubocop::cop::precedingfollowingalignment#aligned_with_something?()","rubocop::cop::precedingfollowingalignment#aligned_words?()","rubocop::cop::layout::multilinemethodcallindentation#alignment_base()","rubocop::cop::endkeywordalignment#alignment_column()","rubocop::cop::layout::alignhash#alignment_for()","rubocop::cop::layout::alignhash#alignment_for_colons()","rubocop::cop::layout::alignhash#alignment_for_hash_rockets()","rubocop::cop::lint::endalignment#alignment_node()","rubocop::cop::cop::all()","rubocop::cop::force::all()","rubocop::commentconfig#all_cop_names()","rubocop::cop::lint::unneededdisable#all_cop_names()","rubocop::cop::lint::unneededdisable#all_disabled?()","rubocop::cop::rails::reversiblemigration#all_hash_key?()","rubocop::cop::style::stringliterals#all_string_literals?()","rubocop::cop::style::signalexception#allow()","rubocop::cop::rails::delegateallowblank#allow_blank_option()","rubocop::cop::style::trivialaccessors#allow_dsl_writers?()","rubocop::cop::style::singlelinemethods#allow_empty?()","rubocop::cop::precedingfollowingalignment#allow_for_alignment?()","rubocop::cop::metrics::linelength#allow_heredoc?()","rubocop::cop::style::commandliteral#allow_inner_backticks?()","rubocop::cop::style::regexpliteral#allow_inner_slashes?()","rubocop::cop::style::redundantreturn#allow_multiple_return_values?()","rubocop::cop::style::trailingunderscorevariable#allow_named_underscore_variables()","rubocop::cop::style::trivialaccessors#allow_predicates?()","rubocop::cop::style::redundantself#allow_self()","rubocop::resultcache::allow_symlinks_in_cache_location?()","rubocop::cop::lint::unusedblockargument#allow_unused_keyword_arguments?()","rubocop::cop::metrics::linelength#allow_uri?()","rubocop::cop::naming::filename#allowed_acronyms()","rubocop::cop::style::redundantparentheses#allowed_ancestor?()","rubocop::cop::performance::fixedsize#allowed_argument?()","rubocop::cop::style::redundantparentheses#allowed_array_or_hash_element?()","rubocop::cop::style::commandliteral#allowed_backtick_literal?()","rubocop::cop::lint::unusedblockargument#allowed_block?()","rubocop::cop::percentarray#allowed_bracket_array?()","rubocop::cop::lint::assignmentincondition#allowed_construct?()","rubocop::cop::style::redundantparentheses#allowed_expression?()","rubocop::cop::metrics::linelength#allowed_heredoc()","rubocop::cop::style::safenavigation#allowed_if_condition?()","rubocop::cop::lint::unusedblockargument#allowed_keyword_argument?()","rubocop::cop::style::parallelassignment#allowed_lhs?()","rubocop::cop::style::parallelassignment#allowed_masign?()","rubocop::cop::lint::ambiguousblockassociation#allowed_method?()","rubocop::cop::style::trivialaccessors#allowed_method?()","rubocop::cop::style::redundantparentheses#allowed_method_call?()","rubocop::cop::naming::predicatename#allowed_method_name?()","rubocop::cop::style::regexpliteral#allowed_mixed_percent_r?()","rubocop::cop::style::regexpliteral#allowed_mixed_slash?()","rubocop::cop::style::next#allowed_modifier_if?()","rubocop::cop::style::redundantparentheses#allowed_multiple_expression?()","rubocop::cop::style::nestedparenthesizedcalls#allowed_omission?()","rubocop::cop::layout::leadingcommentspace#allowed_on_first_line?()","rubocop::cop::performance::fixedsize#allowed_parent?()","rubocop::cop::performance::size#allowed_parent?()","rubocop::cop::style::unneededpercentq#allowed_percent_q?()","rubocop::cop::style::regexpliteral#allowed_percent_r_literal?()","rubocop::cop::style::commandliteral#allowed_percent_x_literal?()","rubocop::cop::style::trivialaccessors#allowed_reader?()","rubocop::cop::style::parallelassignment#allowed_rhs?()","rubocop::cop::style::redundantself#allowed_send_node?()","rubocop::cop::style::conditionalassignment#allowed_single_line?()","rubocop::cop::style::regexpliteral#allowed_slash_literal?()","rubocop::cop::style::conditionalassignment#allowed_statements?()","rubocop::cop::style::conditionalassignment#allowed_ternary?()","rubocop::cop::spaceafterpunctuation#allowed_type?()","rubocop::cop::metrics::linelength#allowed_uri_position?()","rubocop::cop::style::globalvars#allowed_var?()","rubocop::cop::performance::fixedsize#allowed_variable?()","rubocop::cop::style::trivialaccessors#allowed_writer?()","rubocop::cop::lint::blockalignment#alt_start_msg()","rubocop::ast::andnode#alternate_operator()","rubocop::ast::ornode#alternate_operator()","rubocop::cop::lint::ambiguousoperator#alternative_message()","rubocop::cop::lint::ambiguousregexpliteral#alternative_message()","rubocop::cop::lint::uselesselsewithoutrescue#alternative_message()","rubocop::cop::configurableenforcedstyle#alternative_style()","rubocop::cop::style::hashsyntax#alternative_style()","rubocop::cop::configurableenforcedstyle#alternative_styles()","rubocop::cop::variableforce::case#always_run?()","rubocop::cop::variableforce::ensure#always_run?()","rubocop::cop::variableforce::for#always_run?()","rubocop::cop::variableforce::logicaloperator#always_run?()","rubocop::cop::variableforce::rescue#always_run?()","rubocop::cop::variableforce::simpleconditional#always_run?()","rubocop::cop::layout::spaceinsidehashliteralbraces#ambiguous_or_unexpected_style_detected()","rubocop::cop::configurableenforcedstyle#ambiguous_style_detected()","rubocop::commentconfig#analyze()","rubocop::commentconfig#analyze_cop()","rubocop::commentconfig#analyze_disabled()","rubocop::commentconfig#analyze_rest()","rubocop::commentconfig#analyze_single_line()","rubocop::cop::layout::rescueensurealignment#ancestor_node()","rubocop::cop::variableforce::scope#ancestor_node?()","rubocop::cop::cop#annotate()","rubocop::cop::messageannotator#annotate()","rubocop::formatter::simpletextformatter#annotate_message()","rubocop::formatter::tapformatter#annotate_message()","rubocop::cop::style::annotationcomment#annotation?()","rubocop::cop::style::commentannotation#annotation_range()","rubocop::magiccomment#any?()","rubocop::cop::style::methodcallwithoutargsparentheses#any_assignment?()","rubocop::cop::lint::uselessaccessmodifier#any_context_creating_methods?()","rubocop::cop::lint::uselessaccessmodifier#any_method_definition?()","rubocop::resultcache#any_symlink?()","rubocop::cli#apply_default_formatter()","rubocop::cop::style::lambda#arg_to_unparenthesized_call?()","rubocop::cop::layout::spaceinlambdaliteral#args?()","rubocop::cop::style::lambdacall#args_begin()","rubocop::cop::style::methodcallwithargsparentheses#args_begin()","rubocop::cop::metrics::parameterlists#args_count()","rubocop::cop::style::lambdacall#args_end()","rubocop::cop::style::methodcallwithargsparentheses#args_end()","rubocop::options#args_from_env()","rubocop::options#args_from_file()","rubocop::cop::performance::redundantblockcall#args_include_block_pass?()","rubocop::cop::style::singlelineblockparams#args_match?()","rubocop::cop::layout::multilineblocklayout#args_on_beginning_line?()","rubocop::cop::variableforce::variable#argument?()","rubocop::cop::style::optionalarguments#argument_positions()","rubocop::cop::style::minmax#argument_range()","rubocop::ast::blocknode#arguments()","rubocop::ast::defnode#arguments()","rubocop::ast::methoddispatchnode#arguments()","rubocop::ast::blocknode#arguments?()","rubocop::ast::parameterizednode#arguments?()","rubocop::cop::style::redundantreturn#arguments?()","rubocop::cop::lint::formatparametermismatch#arguments_count()","rubocop::cop::rails::delegate#arguments_match?()","rubocop::cop::style::methoddefparentheses#arguments_without_parentheses?()","rubocop::cop::performance::size#array?()","rubocop::cop::style::redundantparentheses#array_element?()","rubocop::cop::style::blockdelimiters#array_or_range?()","rubocop::cop::lint::unneededsplatexpansion#array_splat?()","rubocop::cop::arrayminsize#array_style_detected()","rubocop::cop::layout::spaceinlambdaliteral#arrow_form?()","rubocop::cop::style::stabbylambdaparentheses#arrow_form?()","rubocop::cop::layout::spaceinlambdaliteral#arrow_lambda_with_args?()","rubocop::cop::lint::endalignment#asgn_variable_align_with()","rubocop::cop::internalaffairs::uselessmessageassertion#assertions_using_described_class_msg()","rubocop::cop::variableforce::variable#assign()","rubocop::cop::variableforce::variabletable#assign_to_variable()","rubocop::cop::style::conditionalcorrectorhelper#assignment()","rubocop::cop::style::parallelassignment::genericcorrector#assignment()","rubocop::cop::style::parallelassignment#assignment_corrector()","rubocop::ast::methodidentifierpredicates#assignment_method?()","rubocop::cop::style::conditionalassignment#assignment_node()","rubocop::cop::layout::firstarrayelementlinebreak#assignment_on_same_line?()","rubocop::cop::style::conditionalassignmenthelper#assignment_rhs_exist?()","rubocop::cop::layout::extraspacing#assignment_tokens()","rubocop::cop::style::conditionalassignment#assignment_types_match?()","rubocop::processedsource#ast_with_comments()","rubocop::cop::lint::unusedblockargument#augment_message()","rubocop::cop::autocorrectalignment#autocorrect()","rubocop::cop::bundler::insecureprotocolsource#autocorrect()","rubocop::cop::enforcesuperclass#autocorrect()","rubocop::cop::firstelementlinebreak#autocorrect()","rubocop::cop::internalaffairs::deprecatedpositionalarguments#autocorrect()","rubocop::cop::internalaffairs::nodetypepredicate#autocorrect()","rubocop::cop::internalaffairs::offenselocationkeyword#autocorrect()","rubocop::cop::internalaffairs::redundantlocationargument#autocorrect()","rubocop::cop::internalaffairs::redundantmessageargument#autocorrect()","rubocop::cop::layout::alignhash#autocorrect()","rubocop::cop::layout::blockendnewline#autocorrect()","rubocop::cop::layout::caseindentation#autocorrect()","rubocop::cop::layout::dotposition#autocorrect()","rubocop::cop::layout::emptylineaftermagiccomment#autocorrect()","rubocop::cop::layout::emptylinebetweendefs#autocorrect()","rubocop::cop::layout::emptylines#autocorrect()","rubocop::cop::layout::emptylinesaroundaccessmodifier#autocorrect()","rubocop::cop::layout::emptylinesaroundbody#autocorrect()","rubocop::cop::layout::extraspacing#autocorrect()","rubocop::cop::layout::indentheredoc#autocorrect()","rubocop::cop::layout::initialindentation#autocorrect()","rubocop::cop::layout::leadingcommentspace#autocorrect()","rubocop::cop::layout::multilineassignmentlayout#autocorrect()","rubocop::cop::layout::multilineblocklayout#autocorrect()","rubocop::cop::layout::rescueensurealignment#autocorrect()","rubocop::cop::layout::spaceaftercolon#autocorrect()","rubocop::cop::layout::spaceaftermethodname#autocorrect()","rubocop::cop::layout::spaceafternot#autocorrect()","rubocop::cop::layout::spacearoundblockparameters#autocorrect()","rubocop::cop::layout::spacearoundequalsinparameterdefault#autocorrect()","rubocop::cop::layout::spacearoundkeyword#autocorrect()","rubocop::cop::layout::spacearoundoperators#autocorrect()","rubocop::cop::layout::spacebeforeblockbraces#autocorrect()","rubocop::cop::layout::spacebeforecomment#autocorrect()","rubocop::cop::layout::spacebeforefirstarg#autocorrect()","rubocop::cop::layout::spaceinlambdaliteral#autocorrect()","rubocop::cop::layout::spaceinsidearraypercentliteral#autocorrect()","rubocop::cop::layout::spaceinsideblockbraces#autocorrect()","rubocop::cop::layout::spaceinsidehashliteralbraces#autocorrect()","rubocop::cop::layout::spaceinsidepercentliteraldelimiters#autocorrect()","rubocop::cop::layout::spaceinsiderangeliteral#autocorrect()","rubocop::cop::layout::spaceinsidestringinterpolation#autocorrect()","rubocop::cop::layout::tab#autocorrect()","rubocop::cop::layout::trailingblanklines#autocorrect()","rubocop::cop::layout::trailingwhitespace#autocorrect()","rubocop::cop::lint::blockalignment#autocorrect()","rubocop::cop::lint::defendalignment#autocorrect()","rubocop::cop::lint::deprecatedclassmethods#autocorrect()","rubocop::cop::lint::emptyensure#autocorrect()","rubocop::cop::lint::emptyinterpolation#autocorrect()","rubocop::cop::lint::endalignment#autocorrect()","rubocop::cop::lint::inheritexception#autocorrect()","rubocop::cop::lint::literalininterpolation#autocorrect()","rubocop::cop::lint::multiplecompare#autocorrect()","rubocop::cop::lint::percentstringarray#autocorrect()","rubocop::cop::lint::percentsymbolarray#autocorrect()","rubocop::cop::lint::redundantwithindex#autocorrect()","rubocop::cop::lint::redundantwithobject#autocorrect()","rubocop::cop::lint::rescuetype#autocorrect()","rubocop::cop::lint::safenavigationchain#autocorrect()","rubocop::cop::lint::scriptpermission#autocorrect()","rubocop::cop::lint::stringconversionininterpolation#autocorrect()","rubocop::cop::lint::unifiedinteger#autocorrect()","rubocop::cop::lint::unneededdisable#autocorrect()","rubocop::cop::lint::unneededrequirestatement#autocorrect()","rubocop::cop::lint::unneededsplatexpansion#autocorrect()","rubocop::cop::lint::unusedargument#autocorrect()","rubocop::cop::lint::uriregexp#autocorrect()","rubocop::cop::multilineliteralbracelayout#autocorrect()","rubocop::cop::orderedgemnode#autocorrect()","rubocop::cop::parentheses#autocorrect()","rubocop::cop::performance::casewhensplat#autocorrect()","rubocop::cop::performance::casecmp#autocorrect()","rubocop::cop::performance::comparewithblock#autocorrect()","rubocop::cop::performance::count#autocorrect()","rubocop::cop::performance::detect#autocorrect()","rubocop::cop::performance::doublestartendwith#autocorrect()","rubocop::cop::performance::endwith#autocorrect()","rubocop::cop::performance::flatmap#autocorrect()","rubocop::cop::performance::hasheachmethods#autocorrect()","rubocop::cop::performance::lstriprstrip#autocorrect()","rubocop::cop::performance::rangeinclude#autocorrect()","rubocop::cop::performance::redundantblockcall#autocorrect()","rubocop::cop::performance::redundantmatch#autocorrect()","rubocop::cop::performance::redundantmerge#autocorrect()","rubocop::cop::performance::redundantsortby#autocorrect()","rubocop::cop::performance::regexpmatch#autocorrect()","rubocop::cop::performance::reverseeach#autocorrect()","rubocop::cop::performance::sample#autocorrect()","rubocop::cop::performance::size#autocorrect()","rubocop::cop::performance::startwith#autocorrect()","rubocop::cop::performance::stringreplacement#autocorrect()","rubocop::cop::performance::timesmap#autocorrect()","rubocop::cop::performance::uridefaultparser#autocorrect()","rubocop::cop::rails::actionfilter#autocorrect()","rubocop::cop::rails::activesupportaliases#autocorrect()","rubocop::cop::rails::blank#autocorrect()","rubocop::cop::rails::delegate#autocorrect()","rubocop::cop::rails::delegateallowblank#autocorrect()","rubocop::cop::rails::dynamicfindby#autocorrect()","rubocop::cop::rails::findby#autocorrect()","rubocop::cop::rails::findeach#autocorrect()","rubocop::cop::rails::httppositionalarguments#autocorrect()","rubocop::cop::rails::pluralizationgrammar#autocorrect()","rubocop::cop::rails::present#autocorrect()","rubocop::cop::rails::readwriteattribute#autocorrect()","rubocop::cop::rails::relativedateconstant#autocorrect()","rubocop::cop::rails::requestreferer#autocorrect()","rubocop::cop::rails::safenavigation#autocorrect()","rubocop::cop::rails::savebang#autocorrect()","rubocop::cop::rails::uniqbeforepluck#autocorrect()","rubocop::cop::rails::validation#autocorrect()","rubocop::cop::security::jsonload#autocorrect()","rubocop::cop::security::yamlload#autocorrect()","rubocop::cop::spaceafterpunctuation#autocorrect()","rubocop::cop::spacebeforepunctuation#autocorrect()","rubocop::cop::spaceinside#autocorrect()","rubocop::cop::stringliteralshelp#autocorrect()","rubocop::cop::style::alias#autocorrect()","rubocop::cop::style::andor#autocorrect()","rubocop::cop::style::arrayjoin#autocorrect()","rubocop::cop::style::attr#autocorrect()","rubocop::cop::style::barepercentliterals#autocorrect()","rubocop::cop::style::blockcomments#autocorrect()","rubocop::cop::style::blockdelimiters#autocorrect()","rubocop::cop::style::bracesaroundhashparameters#autocorrect()","rubocop::cop::style::characterliteral#autocorrect()","rubocop::cop::style::classcheck#autocorrect()","rubocop::cop::style::classmethods#autocorrect()","rubocop::cop::style::collectionmethods#autocorrect()","rubocop::cop::style::colonmethodcall#autocorrect()","rubocop::cop::style::commandliteral#autocorrect()","rubocop::cop::style::commentannotation#autocorrect()","rubocop::cop::style::conditionalassignment#autocorrect()","rubocop::cop::style::copyright#autocorrect()","rubocop::cop::style::defwithparentheses#autocorrect()","rubocop::cop::style::dir#autocorrect()","rubocop::cop::style::eachforsimpleloop#autocorrect()","rubocop::cop::style::eachwithobject#autocorrect()","rubocop::cop::style::emptycasecondition#autocorrect()","rubocop::cop::style::emptyelse#autocorrect()","rubocop::cop::style::emptyliteral#autocorrect()","rubocop::cop::style::emptymethod#autocorrect()","rubocop::cop::style::encoding#autocorrect()","rubocop::cop::style::evenodd#autocorrect()","rubocop::cop::style::formatstring#autocorrect()","rubocop::cop::style::frozenstringliteralcomment#autocorrect()","rubocop::cop::style::hashsyntax#autocorrect()","rubocop::cop::style::ifunlessmodifier#autocorrect()","rubocop::cop::style::infiniteloop#autocorrect()","rubocop::cop::style::inversemethods#autocorrect()","rubocop::cop::style::lambda#autocorrect()","rubocop::cop::style::lambdacall#autocorrect()","rubocop::cop::style::lineendconcatenation#autocorrect()","rubocop::cop::style::methodcallwithargsparentheses#autocorrect()","rubocop::cop::style::methodcallwithoutargsparentheses#autocorrect()","rubocop::cop::style::methoddefparentheses#autocorrect()","rubocop::cop::style::minmax#autocorrect()","rubocop::cop::style::mixingrouping#autocorrect()","rubocop::cop::style::multilineifmodifier#autocorrect()","rubocop::cop::style::multilineifthen#autocorrect()","rubocop::cop::style::multilinememoization#autocorrect()","rubocop::cop::style::mutableconstant#autocorrect()","rubocop::cop::style::negatedif#autocorrect()","rubocop::cop::style::negatedwhile#autocorrect()","rubocop::cop::style::nestedmodifier#autocorrect()","rubocop::cop::style::nestedparenthesizedcalls#autocorrect()","rubocop::cop::style::next#autocorrect()","rubocop::cop::style::nilcomparison#autocorrect()","rubocop::cop::style::nonnilcheck#autocorrect()","rubocop::cop::style::not#autocorrect()","rubocop::cop::style::numericliteralprefix#autocorrect()","rubocop::cop::style::numericliterals#autocorrect()","rubocop::cop::style::numericpredicate#autocorrect()","rubocop::cop::style::onelineconditional#autocorrect()","rubocop::cop::style::orassignment#autocorrect()","rubocop::cop::style::parallelassignment#autocorrect()","rubocop::cop::style::percentliteraldelimiters#autocorrect()","rubocop::cop::style::percentqliterals#autocorrect()","rubocop::cop::style::perlbackrefs#autocorrect()","rubocop::cop::style::preferredhashmethods#autocorrect()","rubocop::cop::style::proc#autocorrect()","rubocop::cop::style::raiseargs#autocorrect()","rubocop::cop::style::redundantbegin#autocorrect()","rubocop::cop::style::redundantconditional#autocorrect()","rubocop::cop::style::redundantexception#autocorrect()","rubocop::cop::style::redundantfreeze#autocorrect()","rubocop::cop::style::redundantreturn#autocorrect()","rubocop::cop::style::redundantself#autocorrect()","rubocop::cop::style::regexpliteral#autocorrect()","rubocop::cop::style::rescuemodifier#autocorrect()","rubocop::cop::style::returnnil#autocorrect()","rubocop::cop::style::safenavigation#autocorrect()","rubocop::cop::style::semicolon#autocorrect()","rubocop::cop::style::signalexception#autocorrect()","rubocop::cop::style::singlelinemethods#autocorrect()","rubocop::cop::style::specialglobalvars#autocorrect()","rubocop::cop::style::stabbylambdaparentheses#autocorrect()","rubocop::cop::style::stderrputs#autocorrect()","rubocop::cop::style::stringmethods#autocorrect()","rubocop::cop::style::symbolarray#autocorrect()","rubocop::cop::style::symbolliteral#autocorrect()","rubocop::cop::style::symbolproc#autocorrect()","rubocop::cop::style::ternaryparentheses#autocorrect()","rubocop::cop::style::trailingunderscorevariable#autocorrect()","rubocop::cop::style::trivialaccessors#autocorrect()","rubocop::cop::style::unlesselse#autocorrect()","rubocop::cop::style::unneededcapitalw#autocorrect()","rubocop::cop::style::unneededinterpolation#autocorrect()","rubocop::cop::style::unneededpercentq#autocorrect()","rubocop::cop::style::variableinterpolation#autocorrect()","rubocop::cop::style::whenthen#autocorrect()","rubocop::cop::style::whileuntildo#autocorrect()","rubocop::cop::style::whileuntilmodifier#autocorrect()","rubocop::cop::style::wordarray#autocorrect()","rubocop::cop::style::yodacondition#autocorrect()","rubocop::cop::style::zerolengthpredicate#autocorrect()","rubocop::cop::team#autocorrect()","rubocop::cop::trailingcomma#autocorrect()","rubocop::cop::autocorrectlogic#autocorrect?()","rubocop::cop::team#autocorrect?()","rubocop::cop::team#autocorrect_all_cops()","rubocop::cop::layout::multilineblocklayout#autocorrect_arguments()","rubocop::cop::style::next#autocorrect_block()","rubocop::cop::layout::multilineblocklayout#autocorrect_body()","rubocop::cop::style::trivialaccessors#autocorrect_class()","rubocop::cop::style::nonnilcheck#autocorrect_comparison()","rubocop::cop::autocorrectlogic#autocorrect_enabled?()","rubocop::cop::style::emptyelse#autocorrect_forbidden?()","rubocop::cop::style::formatstring#autocorrect_from_percent()","rubocop::cop::style::hashsyntax#autocorrect_hash_rockets()","rubocop::cop::cop::autocorrect_incompatible_with()","rubocop::cop::layout::emptylinebetweendefs::autocorrect_incompatible_with()","rubocop::cop::layout::multilinehashbracelayout::autocorrect_incompatible_with()","rubocop::cop::layout::spacearoundoperators::autocorrect_incompatible_with()","rubocop::cop::layout::spacebeforeblockbraces::autocorrect_incompatible_with()","rubocop::cop::style::lineendconcatenation::autocorrect_incompatible_with()","rubocop::cop::style::symbolproc::autocorrect_incompatible_with()","rubocop::cop::style::unneededinterpolation::autocorrect_incompatible_with()","rubocop::cop::layout::emptylinebetweendefs#autocorrect_insert_lines()","rubocop::cop::style::trivialaccessors#autocorrect_instance()","rubocop::cop::autocorrectalignment#autocorrect_line()","rubocop::cop::style::lambda#autocorrect_literal_to_method()","rubocop::cop::style::symbolproc#autocorrect_method()","rubocop::cop::style::lambda#autocorrect_method_to_literal()","rubocop::cop::style::next#autocorrect_modifier()","rubocop::cop::style::symbolproc#autocorrect_no_args()","rubocop::cop::style::hashsyntax#autocorrect_no_mixed_keys()","rubocop::cop::style::nonnilcheck#autocorrect_non_nil()","rubocop::cop::style::copyright#autocorrect_notice()","rubocop::cop::style::unneededinterpolation#autocorrect_other()","rubocop::cop::trailingcomma#autocorrect_range()","rubocop::cop::layout::emptylinebetweendefs#autocorrect_remove_lines()","rubocop::cop::autocorrectlogic#autocorrect_requested?()","rubocop::cop::style::hashsyntax#autocorrect_ruby19()","rubocop::cop::style::unneededinterpolation#autocorrect_single_variable_interpolation()","cophelper#autocorrect_source()","cophelper#autocorrect_source_file()","cophelper#autocorrect_source_with_loop()","rubocop::cop::style::formatstring#autocorrect_to_percent()","rubocop::cop::style::nonnilcheck#autocorrect_unless_nil()","rubocop::runner#autocorrect_unneeded_disables()","rubocop::cop::style::unneededinterpolation#autocorrect_variable_interpolation()","rubocop::cop::style::symbolproc#autocorrect_with_args()","rubocop::cop::percentliteral#autocorrect_words()","rubocop::cop::lint::literalininterpolation#autocorrected_value()","rubocop::cop::lint::literalininterpolation#autocorrected_value_for_symbol()","rubocop::cop::style::trailingcommainarguments#avoid_autocorrect?()","rubocop::cop::trailingcomma#avoid_autocorrect?()","rubocop::cop::trailingcomma#avoid_comma()","rubocop::cop::style::commandliteral#backtick_literal?()","rubocop::cop::rails::date#bad_days()","rubocop::cop::rails::actionfilter#bad_methods()","rubocop::cop::rails::date#bad_methods()","rubocop::cop::naming::accessormethodname#bad_reader_name?()","rubocop::cop::style::multilinememoization#bad_rhs?()","rubocop::cop::naming::accessormethodname#bad_writer_name?()","rubocop::cop::cop::badge()","rubocop::ast::methodidentifierpredicates#bang_method?()","rubocop::cop::style::alias#bareword?()","rubocop::formatter::htmlformatter::erbcontext#base64_encoded_logo_image()","rubocop::cop::arrayhashindentation#base_column()","rubocop::cop::layout::alignparameters#base_column()","rubocop::cop::layout::caseindentation#base_column()","rubocop::configloader::base_configs()","rubocop::cop::layout::indentarray#base_description()","rubocop::cop::layout::indenthash#base_description()","rubocop::config#base_dir_for_path_parameters()","rubocop::cop::layout::elsealignment#base_for_method_definition()","rubocop::cop::style::emptyelse#base_if_node()","rubocop::cop::layout::indentheredoc#base_indent_level()","rubocop::cop::layout::firstparameterindentation#base_indentation()","rubocop::cop::layout::elsealignment#base_range()","rubocop::cop::layout::firstparameterindentation#base_range()","rubocop::cop::layout::multilinemethodcallindentation#base_source()","rubocop::cop::lint::literalascondition#basic_literal?()","rubocop::cop::lint::syntax#beautify_message()","rubocop::cop::lint::shadowingouterlocalvariable#before_declaring_variable()","rubocop::cop::style::parallelassignment::rescuecorrector#begin_correction()","rubocop::cop::style::lambda#begin_pos()","rubocop::cop::style::symbolproc#begin_pos_for_replacement()","rubocop::cop::style::safenavigation#begin_range()","rubocop::cop::percentliteral#begin_source()","rubocop::cop::variableforce::scope#belong_to_inner_scope?()","rubocop::cop::variableforce::scope#belong_to_outer_scope?()","rubocop::cop::arrayminsize#below_array_length?()","rubocop::formatter::htmlformatter::erbcontext#binding()","rubocop::cop::lint::debugger#binding_irb?()","rubocop::cop::rails::skipsmodelvalidations#blacklist()","rubocop::cop::naming::heredocdelimiternaming#blacklisted_delimiters()","rubocop::cop::layout::emptylinebetweendefs#blank_lines_between?()","rubocop::cop::layout::emptylinebetweendefs#blank_lines_count_between()","rubocop::cop::layout::multilineblocklayout#block_arg_string()","rubocop::ast::parameterizednode#block_argument?()","rubocop::cop::variableforce::variable#block_argument?()","rubocop::cop::autocorrectalignment#block_comment_within?()","rubocop::cop::lint::blockalignment#block_end_align_target()","rubocop::ast::methoddispatchnode#block_literal?()","rubocop::ast::methoddispatchnode#block_node()","rubocop::cop::style::symbolproc#block_range_with_space()","rubocop::cop::layout::emptylinesaroundaccessmodifier#block_start?()","rubocop::ast::blocknode#body()","rubocop::ast::conditionalnode#body()","rubocop::ast::defnode#body()","rubocop::ast::ensurenode#body()","rubocop::ast::fornode#body()","rubocop::ast::resbodynode#body()","rubocop::ast::whennode#body()","rubocop::cop::layout::emptylinesaroundaccessmodifier#body_end?()","rubocop::cop::statementmodifier#body_length()","rubocop::cop::variableforce::scope#body_node()","rubocop::optionsvalidator#boolean_or_empty_cache?()","rubocop::cop::layout::indentarray#brace_alignment_style()","rubocop::cop::layout::indenthash#brace_alignment_style()","rubocop::ast::blocknode#braces?()","rubocop::ast::hashnode#braces?()","rubocop::cop::style::blockdelimiters#braces_for_chaining_message()","rubocop::cop::style::blockdelimiters#braces_for_chaining_style?()","rubocop::cop::style::trailingcommainarguments#braces_will_be_removed?()","rubocop::cop::layout::spaceinsideblockbraces#braces_with_contents_inside()","rubocop::ast::arraynode#bracketed?()","rubocop::cop::arraysyntax#bracketed_array_of?()","rubocop::cop::trailingcomma#brackets?()","rubocop::cop::variableforce::branchable#branch()","rubocop::ast::whennode#branch_index()","rubocop::cop::style::singlelinemethods#break_line_before()","rubocop::cop::rails::timezone#build_message()","rubocop::formatter::formatterset#builtin_formatter_class()","rubocop::remoteconfig#cache_name_from_uri()","rubocop::remoteconfig#cache_path()","rubocop::remoteconfig#cache_path_exists?()","rubocop::remoteconfig#cache_path_expired?()","rubocop::resultcache::cache_root()","rubocop::runner#cached_run?()","rubocop::cop::autocorrectalignment#calculate_range()","rubocop::cop::style::redundantparentheses#call_chain_starts_with_int?()","rubocop::cop::rails::savebang#call_to_persisted?()","rubocop::cop::commissioner::callback_methods()","rubocop::cop::lint::formatparametermismatch#called_on_string?()","rubocop::cop::style::methodmissing#calls_super?()","rubocop::cop::performance::redundantblockcall#calls_to_report()","rubocop::ast::methodidentifierpredicates#camel_case_method?()","rubocop::cop::style::conditionalassignment#candidate_node?()","rubocop::cop::variableforce::variable#capture_with_block!()","rubocop::cop::orderedgemnode#case_insensitive_out_of_order?()","rubocop::cop::style::missingelse#case_style?()","rubocop::cop::layout::closingparenthesisindentation#check()","rubocop::cop::layout::commentindentation#check()","rubocop::cop::layout::emptylinesaroundbody#check()","rubocop::cop::layout::indentarray#check()","rubocop::cop::layout::indenthash#check()","rubocop::cop::layout::indentationconsistency#check()","rubocop::cop::layout::rescueensurealignment#check()","rubocop::cop::layout::spacearoundkeyword#check()","rubocop::cop::layout::spaceinsidehashliteralbraces#check()","rubocop::cop::layout::spaceinsiderangeliteral#check()","rubocop::cop::lint::assignmentincondition#check()","rubocop::cop::lint::conditionposition#check()","rubocop::cop::lint::deprecatedclassmethods#check()","rubocop::cop::lint::elselayout#check()","rubocop::cop::lint::unneededdisable#check()","rubocop::cop::multilineliteralbracelayout#check()","rubocop::cop::performance::timesmap#check()","rubocop::cop::style::barepercentliterals#check()","rubocop::cop::style::bracesaroundhashparameters#check()","rubocop::cop::style::classmethods#check()","rubocop::cop::style::documentation#check()","rubocop::cop::style::documentationmethod#check()","rubocop::cop::style::emptyelse#check()","rubocop::cop::style::globalvars#check()","rubocop::cop::style::hashsyntax#check()","rubocop::cop::style::methodmissing#check()","rubocop::cop::style::missingelse#check()","rubocop::cop::style::mixingrouping#check()","rubocop::cop::style::nestedmodifier#check()","rubocop::cop::style::next#check()","rubocop::cop::style::numericliterals#check()","rubocop::cop::style::numericpredicate#check()","rubocop::cop::style::redundantparentheses#check()","rubocop::cop::style::unneededpercentq#check()","rubocop::cop::style::whileuntilmodifier#check()","rubocop::cop::trailingcomma#check()","rubocop::cop::rails::notnullcolumn#check_add_column()","rubocop::cop::rails::notnullcolumn#check_add_reference()","rubocop::cop::autocorrectalignment#check_alignment()","rubocop::cop::layout::elsealignment#check_alignment()","rubocop::cop::layout::multilineoperationindentation#check_and_or()","rubocop::cop::lint::unusedargument#check_argument()","rubocop::cop::lint::unusedblockargument#check_argument()","rubocop::cop::lint::unusedmethodargument#check_argument()","rubocop::cop::performance::hasheachmethods#check_argument()","rubocop::cop::lint::endalignment#check_asgn_alignment()","rubocop::cop::layout::elsealignment#check_assignment()","rubocop::cop::layout::extraspacing#check_assignment()","rubocop::cop::layout::indentassignment#check_assignment()","rubocop::cop::layout::indentationwidth#check_assignment()","rubocop::cop::layout::multilineassignmentlayout#check_assignment()","rubocop::cop::lint::endalignment#check_assignment()","rubocop::cop::rails::savebang#check_assignment()","rubocop::cop::style::conditionalassignment#check_assignment_to_condition()","rubocop::cop::style::commandliteral#check_backtick_literal()","rubocop::cop::layout::indenthash#check_based_on_longest_key()","rubocop::cop::layout::spacearoundkeyword#check_begin()","rubocop::cop::style::redundantreturn#check_begin_node()","rubocop::cop::layout::emptylinesaroundbody#check_beginning()","rubocop::cop::lint::blockalignment#check_block_alignment()","rubocop::cop::layout::accessmodifierindentation#check_body()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#check_body()","rubocop::cop::layout::emptylinesaroundbody#check_both()","rubocop::cop::multilineliteralbracelayout#check_brace_layout()","rubocop::cop::percentarray#check_bracketed_array()","rubocop::cop::style::wordarray#check_bracketed_array()","rubocop::cop::style::redundantreturn#check_branch()","rubocop::cop::style::identicalconditionalbranches#check_branches()","rubocop::cop::lint::literalascondition#check_case()","rubocop::cop::lint::unreachablecode#check_case()","rubocop::cop::style::redundantreturn#check_case_node()","rubocop::cop::rails::reversiblemigration#check_change_column_default_node()","rubocop::cop::rails::reversiblemigration#check_change_table_node()","rubocop::cop::rails::reversiblemigration#check_change_table_offense()","rubocop::cop::lint::uselessaccessmodifier#check_child_nodes()","rubocop::cop::lint::ineffectiveaccessmodifier#check_child_scope()","rubocop::cop::firstelementlinebreak#check_children_line_break()","rubocop::cop::layout::spacearoundblockparameters#check_closing_pipe_space()","rubocop::cop::codelength#check_code_length()","rubocop::cop::trailingcomma#check_comma()","rubocop::cop::style::raiseargs#check_compact()","rubocop::cop::style::classandmodulechildren#check_compact_style()","rubocop::cop::performance::regexpmatch#check_condition()","rubocop::cop::lint::duplicatemethods#check_const_receiver()","rubocop::cop::style::bracesaroundhashparameters#check_context_dependent()","rubocop::cop::rails::date#check_date_node()","rubocop::cop::layout::emptylinesaroundbody#check_deferred_empty_line()","rubocop::cop::layout::emptylinebetweendefs#check_defs()","rubocop::cop::lint::ineffectiveaccessmodifier#check_defs()","rubocop::cop::style::classmethods#check_defs()","rubocop::cop::metrics::linelength#check_directive_line()","rubocop::cop::rails::reversiblemigration#check_drop_table_node()","rubocop::cop::layout::spacearoundblockparameters#check_each_arg()","rubocop::cop::lint::elselayout#check_else()","rubocop::cop::layout::spacebeforeblockbraces#check_empty()","rubocop::cop::layout::emptylinesaroundbody#check_empty_lines_except_namespace()","rubocop::cop::layout::emptylinesaroundbody#check_empty_lines_special()","rubocop::cop::layout::spacearoundkeyword#check_end()","rubocop::cop::endkeywordalignment#check_end_kw_alignment()","rubocop::cop::endkeywordalignment#check_end_kw_in_node()","rubocop::cop::layout::emptylinesaroundbody#check_ending()","rubocop::cop::style::guardclause#check_ending_if()","rubocop::cop::style::yodacondition#check_equality_only?()","rubocop::cop::arrayhashindentation#check_expected_style()","rubocop::cop::style::raiseargs#check_exploded()","rubocop::cop::style::identicalconditionalbranches#check_expressions()","rubocop::cop::arrayhashindentation#check_first()","rubocop::cop::performance::doublestartendwith#check_for_active_support_aliases?()","rubocop::cop::lint::circularargumentreference#check_for_circular_argument_references()","rubocop::cop::style::frozenstringliteralcomment#check_for_comment()","rubocop::cop::rails::filepath#check_for_file_join_with_rails_root()","rubocop::runner#check_for_infinite_loop()","rubocop::cop::style::variableinterpolation#check_for_interpolation()","rubocop::cop::style::semicolon#check_for_line_terminator_or_opener()","rubocop::cop::lint::literalascondition#check_for_literal()","rubocop::cop::style::frozenstringliteralcomment#check_for_no_comment()","rubocop::cop::rails::filepath#check_for_rails_root_join_with_slash_separated_path()","rubocop::runner#check_for_unneeded_disables?()","rubocop::cop::lint::uselessassignment#check_for_unused_assignments()","rubocop::cop::style::mixingrouping#check_grouped_style()","rubocop::cop::layout::indentationwidth#check_if()","rubocop::cop::lint::unreachablecode#check_if()","rubocop::cop::style::redundantreturn#check_if_node()","rubocop::cop::layout::indentationwidth#check_indentation()","rubocop::cop::layout::spaceinsideblockbraces#check_inside()","rubocop::cop::layout::spacearoundblockparameters#check_inside_pipes()","rubocop::cop::rails::reversiblemigration#check_irreversible_schema_statement_node()","rubocop::cop::layout::spacearoundkeyword#check_keyword()","rubocop::cop::layout::spaceinsideblockbraces#check_left_brace()","rubocop::cop::layout::emptylinesaroundbody#check_line()","rubocop::cop::metrics::linelength#check_line()","rubocop::cop::style::trailingcommainliteral#check_literal()","rubocop::cop::rails::timezone#check_localtime()","rubocop::cop::layout::indentationwidth#check_members()","rubocop::cop::firstelementlinebreak#check_method_line_break()","rubocop::cop::rails::actionfilter#check_method_node()","rubocop::cop::style::collectionmethods#check_method_node()","rubocop::cop::layout::accessmodifierindentation#check_modifier()","rubocop::cop::style::stringliterals#check_multiline_quote_style()","rubocop::cop::configurableformatting#check_name()","rubocop::cop::naming::classandmodulecamelcase#check_name()","rubocop::cop::negativeconditional#check_negative_conditional()","rubocop::cop::layout::elsealignment#check_nested()","rubocop::cop::style::classandmodulechildren#check_nested_style()","rubocop::cop::multilineliteralbracelayout#check_new_line()","rubocop::cop::layout::multilineassignmentlayout#check_new_line_offense()","rubocop::cop::lint::uselessaccessmodifier#check_new_visibility()","rubocop::cop::layout::spacearoundblockparameters#check_no_space()","rubocop::cop::layout::spacearoundblockparameters#check_no_space_style_inside_pipes()","rubocop::cop::lint::ineffectiveaccessmodifier#check_node()","rubocop::cop::lint::literalascondition#check_node()","rubocop::cop::lint::uselessaccessmodifier#check_node()","rubocop::cop::rails::relativedateconstant#check_node()","rubocop::cop::style::conditionalassignment#check_node()","rubocop::cop::style::safenavigation#check_node()","rubocop::cop::layout::spacebeforeblockbraces#check_non_empty()","rubocop::cop::style::zerolengthpredicate#check_nonzero_length_predicate()","rubocop::cop::layout::spacearoundblockparameters#check_opening_pipe_space()","rubocop::cop::layout::spacearoundoperators#check_operator()","rubocop::cop::layout::spacearoundequalsinparameterdefault#check_optarg()","rubocop::cop::layout::extraspacing#check_other()","rubocop::cop::lint::endalignment#check_other_alignment()","rubocop::cop::layout::alignhash#check_pairs()","rubocop::cop::rails::notnullcolumn#check_pairs()","rubocop::cop::percentarray#check_percent_array()","rubocop::cop::style::regexpliteral#check_percent_r_literal()","rubocop::cop::style::commandliteral#check_percent_x_literal()","rubocop::cop::lint::requireparentheses#check_predicate()","rubocop::cop::rails::reversiblemigration#check_remove_column_node()","rubocop::cop::rails::reversiblemigration#check_remove_foreign_key_node()","rubocop::cop::style::redundantreturn#check_return_node()","rubocop::cop::layout::indenthash#check_right_brace()","rubocop::cop::layout::spaceinsideblockbraces#check_right_brace()","rubocop::cop::layout::indentarray#check_right_bracket()","rubocop::cop::multilineliteralbracelayout#check_same_line()","rubocop::cop::layout::multilineassignmentlayout#check_same_line_offense()","rubocop::cop::lint::ineffectiveaccessmodifier#check_scope()","rubocop::cop::lint::uselessaccessmodifier#check_scope()","rubocop::cop::style::signalexception#check_scope()","rubocop::cop::lint::duplicatemethods#check_self_receiver()","rubocop::cop::lint::ineffectiveaccessmodifier#check_send()","rubocop::cop::style::redundantparentheses#check_send()","rubocop::cop::style::signalexception#check_send()","rubocop::cop::style::mixingrouping#check_separated_style()","rubocop::cop::style::regexpliteral#check_slash_literal()","rubocop::cop::layout::emptylinesaroundbody#check_source()","rubocop::cop::layout::spacearoundblockparameters#check_space()","rubocop::cop::layout::spacearoundblockparameters#check_space_style_inside_pipes()","rubocop::cop::style::classandmodulechildren#check_style()","rubocop::cop::layout::indentheredoc#check_style!()","rubocop::cop::multilineliteralbracelayout#check_symmetrical()","rubocop::config#check_target_ruby()","rubocop::cop::lint::requireparentheses#check_ternary()","rubocop::cop::rails::timezone#check_time_node()","rubocop::cop::style::lineendconcatenation#check_token_set()","rubocop::cop::layout::extraspacing#check_tokens()","rubocop::cop::style::redundantparentheses#check_unary()","rubocop::cop::metrics::linelength#check_uri_line()","rubocop::cop::rails::savebang#check_used_in_conditional()","rubocop::cop::lint::underscoreprefixedvariablename#check_variable()","rubocop::cop::layout::caseindentation#check_when()","rubocop::cop::style::redundantreturn#check_when_node()","rubocop::cop::style::zerolengthpredicate#check_zero_length_predicate()","rubocop::cop::hashalignment::keyalignment#checkable_layout?()","rubocop::cop::hashalignment::valuealignment#checkable_layout?()","rubocop::processedsource#checksum()","rubocop::cop::layout::multilinemethodcallbracelayout#children()","rubocop::cop::multilineliteralbracelayout#children()","rubocop::cop::style::trailingunderscorevariable#children_offenses()","rubocop::cop::layout::emptylinesaroundaccessmodifier#class_def?()","rubocop::cop::configurableformatting#class_emitter_method?()","rubocop::cop::lint::deprecatedclassmethods::deprecatedclassmethod#class_nodes()","rubocop::resultcache::cleanup()","rubocop::cop::lint::ineffectiveaccessmodifier#clear()","rubocop::configloader::clear_options()","rubocop::formatter::formatterset#close_output_files()","rubocop::cop::multilineliteralbracelayout#closing_brace_on_same_line?()","rubocop::ast::blocknode#closing_delimiter()","rubocop::cop::severity#code()","rubocop::cop::classishlength#code_length()","rubocop::cop::toomanylines#code_length()","rubocop::cop::team#collate_corrections()","rubocop::cop::lint::unneededdisable#collect_variable_like_names()","rubocop::cop::lint::uselessassignment#collect_variable_like_names()","rubocop::cop::rails::unknownenv#collect_variable_like_names()","rubocop::ast::fornode#collection()","rubocop::ast::keywordsplatnode#colon?()","rubocop::ast::pairnode#colon?()","rubocop::formatter::simpletextformatter#colored_severity_code()","rubocop::formatter::colorizable#colorize()","rubocop::cop::offense#column()","rubocop::cop::rails::dynamicfindby#column_keywords()","rubocop::cop::offense#column_length()","rubocop::cop::layout::firstparameterindentation#column_of()","rubocop::cop::offense#column_range()","rubocop::cop::performance::doublestartendwith#combine_args()","rubocop::formatter::disabledconfigformatter#command()","rubocop::ast::methoddispatchnode#command?()","rubocop::cop::style::signalexception#command_or_kernel_call?()","rubocop::cop::layout::extraspacing#comment_column()","rubocop::processedsource#comment_config()","rubocop::cop::precedingfollowingalignment#comment_lines()","rubocop::cop::statementmodifier#comment_lines()","rubocop::cop::style::emptymethod#comment_lines?()","rubocop::cop::style::bracesaroundhashparameters#comment_on_line?()","rubocop::commentconfig#comment_only_line?()","rubocop::cop::lint::unneededdisable#comment_range_with_surrounding_space()","rubocop::cop::statementmodifier#commented?()","rubocop::cop::percentarray#comments_in_array?()","rubocop::stringutil::jarowinkler#common_prefix_length()","rubocop::cop::style::emptymethod#compact?()","rubocop::cop::style::classandmodulechildren#compact_node_name?()","rubocop::cop::style::emptymethod#compact_style?()","rubocop::cop::lint::shadowedexception#compare_exceptions()","rubocop::cop::performance::comparewithblock#compare_range()","rubocop::cop::style::multiplecomparison#comparison?()","rubocop::ast::methodidentifierpredicates#comparison_method?()","rubocop::cop::util#compatible_external_encoding_for?()","rubocop::nodepattern::compiler#compile_arg()","rubocop::nodepattern::compiler#compile_args()","rubocop::nodepattern::compiler#compile_ascend()","rubocop::nodepattern::compiler#compile_capt_ellip()","rubocop::nodepattern::compiler#compile_capture()","rubocop::nodepattern::compiler#compile_ellipsis()","rubocop::nodepattern::compiler#compile_expr()","rubocop::nodepattern::compiler#compile_expr_with_capture_check()","rubocop::nodepattern::compiler#compile_expr_with_captures()","rubocop::nodepattern::compiler#compile_expr_with_index()","rubocop::nodepattern::compiler#compile_funcall()","rubocop::nodepattern::compiler#compile_intersect()","rubocop::nodepattern::compiler#compile_literal()","rubocop::nodepattern::compiler#compile_negation()","rubocop::nodepattern::compiler#compile_nodetype()","rubocop::nodepattern::compiler#compile_param()","rubocop::nodepattern::compiler#compile_predicate()","rubocop::nodepattern::compiler#compile_seq()","rubocop::nodepattern::compiler#compile_seq_tail()","rubocop::nodepattern::compiler#compile_seq_terms()","rubocop::nodepattern::compiler#compile_seq_terms_with_size()","rubocop::nodepattern::compiler#compile_union()","rubocop::nodepattern::compiler#compile_wildcard()","rubocop::cop::style::ternaryparentheses#complex_condition?()","rubocop::cop::style::wordarray#complex_content?()","rubocop::cop::methodcomplexity#complexity()","rubocop::cop::metrics::abcsize#complexity()","rubocop::stringutil::jaro#compute_distance()","rubocop::stringutil::jarowinkler#compute_distance()","rubocop::cop::lint::blockalignment#compute_do_source_line_column()","rubocop::stringutil::jaro#compute_non_zero_distance()","rubocop::cop::lint::blockalignment#compute_start_col()","rubocop::cop::style::commentannotation#concat_length()","rubocop::cop::style::next#cond_range()","rubocop::ast::conditionalnode#condition()","rubocop::cop::lint::literalascondition#condition()","rubocop::cop::rails::savebang#conditional?()","rubocop::cop::style::blockdelimiters#conditional?()","rubocop::cop::lint::assignmentincondition#conditional_assignment?()","rubocop::cop::variableforce::simpleconditional#conditional_clause?()","rubocop::ast::whennode#conditions()","rubocop::configloader::config_files_in_path()","rubocop::cli#config_lines()","rubocop::cop::cop#config_to_allow_offenses()","rubocop::cop::cop#config_to_allow_offenses=()","rubocop::configloader::configuration_file_for()","rubocop::configloader::configuration_from_file()","rubocop::cop::style::infiniteloop#configured_indent()","rubocop::cop::autocorrectalignment#configured_indentation_width()","rubocop::cop::layout::indentationwidth#configured_indentation_width()","rubocop::cop::style::multilineifmodifier#configured_indentation_width()","rubocop::cop::style::redundantconditional#configured_indentation_width()","rubocop::cop::configurableenforcedstyle#conflicting_styles_detected()","rubocop::cop::duplication#consecutive_duplicates()","rubocop::cop::orderedgemnode#consecutive_lines()","rubocop::runner#considered_failure?()","rubocop::cop::style::stringliterals#consistent_multiline?()","rubocop::ast::methoddispatchnode#const_receiver?()","rubocop::ast::methodidentifierpredicates#const_receiver?()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#constructor?()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#contain_local_object?()","rubocop::cop::style::commandliteral#contains_backtick?()","rubocop::cop::lint::percentsymbolarray#contains_colons_or_commas?()","rubocop::cop::registry#contains_cop_matching?()","rubocop::cop::internalaffairs::uselessmessageassertion#contains_described_class_msg?()","rubocop::cop::style::commandliteral#contains_disallowed_backtick?()","rubocop::cop::style::regexpliteral#contains_disallowed_slash?()","rubocop::cop::performance::fixedsize#contains_double_splat?()","rubocop::cop::style::guardclause#contains_guard_clause?()","rubocop::cop::lint::shadowedexception#contains_multiple_levels_of_exceptions?()","rubocop::cop::style::percentliteraldelimiters#contains_preferred_delimiter?()","rubocop::cop::lint::percentstringarray#contains_quotes_or_commas?()","rubocop::cop::style::regexpliteral#contains_slash?()","rubocop::cop::performance::fixedsize#contains_splat?()","rubocop::ast::regexpnode#content()","rubocop::cop::percentliteral#contents_range()","rubocop::cop::layout::extraspacing#contiguous_assignment_lines()","rubocop::cop::style::semicolon#convention_on()","rubocop::cop::rails::httppositionalarguments#convert_hash_data()","rubocop::cop::cop#cop_config()","rubocop::cop::style::parallelassignment::genericcorrector#cop_config()","rubocop::formatter::disabledconfigformatter#cop_config_params()","rubocop::commentconfig#cop_disabled_line_ranges()","rubocop::commentconfig#cop_enabled_at_line?()","rubocop::cop::metrics::blocklength#cop_label()","rubocop::cop::metrics::methodlength#cop_label()","rubocop::commentconfig#cop_line_ranges()","rubocop::cop::cop#cop_name()","rubocop::cop::cop::cop_name()","rubocop::cop::lint::unneededdisable#cop_range()","rubocop::cop::registry#cops()","rubocop::cop::team#cops()","rubocop::formatter::disabledlinesformatter#cops_disabled_in_comments_summary()","rubocop::cli#cops_of_department()","rubocop::cop::cop#correct()","rubocop::cop::style::casecorrector::correct()","rubocop::cop::style::ifcorrector::correct()","rubocop::cop::style::ternarycorrector::correct()","rubocop::cop::style::unlesscorrector::correct()","rubocop::cop::style::alias#correct_alias_method_to_alias()","rubocop::cop::style::alias#correct_alias_to_alias_method()","rubocop::cop::style::alias#correct_alias_with_symbol_args()","rubocop::cop::style::commentannotation#correct_annotation?()","rubocop::cop::performance::hasheachmethods#correct_args()","rubocop::cop::style::symbolarray#correct_bracketed()","rubocop::cop::style::wordarray#correct_bracketed()","rubocop::cop::style::conditionalcorrectorhelper#correct_branches()","rubocop::cop::layout::indentheredoc#correct_by_library()","rubocop::cop::layout::indentheredoc#correct_by_squiggly()","rubocop::cop::naming::heredocdelimitercase#correct_case_delimiters?()","rubocop::cop::style::emptycasecondition#correct_case_when()","rubocop::cop::naming::heredocdelimitercase#correct_delimiters()","rubocop::cop::layout::dotposition#correct_dot_position_style?()","rubocop::cop::style::conditionalcorrectorhelper#correct_if_branches()","rubocop::cop::performance::hasheachmethods#correct_implicit()","rubocop::cop::layout::commentindentation#correct_indentation()","rubocop::cop::style::inversemethods#correct_inverse_block()","rubocop::cop::style::inversemethods#correct_inverse_selector()","rubocop::cop::layout::alignhash#correct_key_value()","rubocop::cop::performance::hasheachmethods#correct_key_value_each()","rubocop::cop::style::percentqliterals#correct_literal_style?()","rubocop::cop::rails::pluralizationgrammar#correct_method()","rubocop::cop::performance::redundantmerge#correct_multiple_elements()","rubocop::cop::layout::alignhash#correct_no_value()","rubocop::cop::style::andor#correct_not()","rubocop::cop::performance::regexpmatch#correct_operator()","rubocop::cop::style::not#correct_opposite_method()","rubocop::cop::style::andor#correct_other()","rubocop::cop::style::ternaryparentheses#correct_parenthesized()","rubocop::cop::percentliteral#correct_percent()","rubocop::cop::performance::hasheachmethods#correct_plain_each()","rubocop::cop::style::andor#correct_send()","rubocop::cop::style::andor#correct_setter()","rubocop::cop::performance::redundantmerge#correct_single_element()","rubocop::cop::style::emptymethod#correct_style?()","rubocop::cop::style::negatedif#correct_style?()","rubocop::cop::style::returnnil#correct_style?()","rubocop::cop::configurableenforcedstyle#correct_style_detected()","rubocop::cop::style::characterliteral#correct_style_detected()","rubocop::cop::style::ternaryparentheses#correct_unparenthesized()","rubocop::cop::rails::validation#correct_validate_type()","rubocop::cop::style::emptycasecondition#correct_when_conditions()","rubocop::cop::style::not#correct_with_parens()","rubocop::cop::style::not#correct_without_parens()","rubocop::cop::style::andor#correctable_send?()","rubocop::cop::offense#corrected()","rubocop::cop::style::emptymethod#corrected()","rubocop::cop::style::percentqliterals#corrected()","rubocop::cop::offense#corrected?()","rubocop::cop::style::yodacondition#corrected_code()","rubocop::cop::lint::rescuetype#correction()","rubocop::cop::performance::casecmp#correction()","rubocop::cop::performance::sample#correction()","rubocop::cop::style::emptyliteral#correction()","rubocop::cop::style::parallelassignment::genericcorrector#correction()","rubocop::cop::style::parallelassignment::modifiercorrector#correction()","rubocop::cop::style::parallelassignment::rescuecorrector#correction()","rubocop::cop::style::ternarycorrector::correction()","rubocop::cop::style::raiseargs#correction_compact_to_exploded()","rubocop::cop::style::conditionalassignment#correction_exceeds_line_limit?()","rubocop::cop::style::raiseargs#correction_exploded_to_compact()","rubocop::cop::style::parallelassignment::genericcorrector#correction_range()","rubocop::cop::style::parallelassignment::modifiercorrector#correction_range()","rubocop::cop::style::parallelassignment::rescuecorrector#correction_range()","rubocop::cop::style::blockdelimiters#correction_would_break_code?()","rubocop::formatter::simpletextformatter::report#corrections()","rubocop::cop::codelength#count_comments?()","rubocop::cop::lint::formatparametermismatch#count_format_matches()","rubocop::cop::metrics::parameterlists#count_keyword_args?()","rubocop::cop::lint::formatparametermismatch#count_matches()","rubocop::cop::lint::formatparametermismatch#count_percent_matches()","rubocop::formatter::fuubarstyleformatter#count_stats()","rubocop::formatter::simpletextformatter#count_stats()","rubocop::stringutil::jaro#count_transpositions()","rubocop::cop::lint::formatparametermismatch#countable_format?()","rubocop::cop::lint::formatparametermismatch#countable_percent?()","rubocop::configloader::create_config()","rubocop::processedsource#create_parser()","rubocop::cop::variableforce::variabletable#current_scope()","rubocop::cop::variableforce::variabletable#current_scope_level()","rubocop::formatter::formatterset#custom_formatter_class()","rubocop::cop::cop#custom_severity()","rubocop::cop::rails::timezone#danger_chain?()","rubocop::cop::messageannotator#debug?()","rubocop::cop::team#debug?()","rubocop::targetfinder#debug?()","rubocop::cop::orderedgemnode#declaration_with_comment()","rubocop::cop::variableforce::variabletable#declare_variable()","rubocop::formatter::htmlformatter::erbcontext#decorated_message()","rubocop::cop::style::parallelassignment::rescuecorrector#def_correction()","rubocop::cop::layout::emptylinebetweendefs#def_end()","rubocop::ast::methoddispatchnode#def_modifier?()","rubocop::cop::layout::emptylinebetweendefs#def_node?()","rubocop::nodepattern::macros#def_node_matcher()","rubocop::nodepattern::macros#def_node_search()","rubocop::cop::layout::emptylinebetweendefs#def_start()","rubocop::formatter::disabledconfigformatter#default_config()","rubocop::configloader::default_configuration()","rubocop::cop::methodpreference#default_cop_config()","rubocop::cop::cop#default_severity()","rubocop::cop::layout::emptylinesaroundbody#deferred_message()","rubocop::cop::lint::unusedblockargument#define_method_call?()","rubocop::options#define_options()","rubocop::cop::variableforce::variable#defs()","rubocop::cop::rails::delegate#delegate?()","rubocop::config#delete()","rubocop::ast::pairnode#delimiter()","rubocop::ast::hashelementnode#delimiter_delta()","rubocop::ast::hashelementnode::hashelementdelta#delimiter_delta()","heredoc#delimiter_string()","rubocop::ast::blocknode#delimiters()","rubocop::cop::naming::heredocdelimiternaming#delimiters()","rubocop::ast::hashelementnode::hashelementdelta#delta()","rubocop::cop::hashalignment::keyalignment#deltas()","rubocop::cop::hashalignment::valuealignment#deltas()","rubocop::cop::hashalignment::keyalignment#deltas_for_first_pair()","rubocop::cop::hashalignment::separatoralignment#deltas_for_first_pair()","rubocop::cop::hashalignment::tablealignment#deltas_for_first_pair()","rubocop::cop::cop::department()","rubocop::cop::registry#departments()","rubocop::cop::style::parallelassignment::assignmentsorter#dependency?()","rubocop::cop::lint::deprecatedclassmethods#deprecated_method()","rubocop::config#deprecation_check()","rubocop::cop::lint::unneededdisable#describe()","rubocop::cacheddata#deserialize_offenses()","rubocop::cop::messageannotator#details()","rubocop::cop::style::stringliterals#detect_quote_styles()","rubocop::cop::configurableenforcedstyle#detected_style()","rubocop::cop::configurableenforcedstyle#detected_style=()","rubocop::cop::arrayhashindentation#detected_styles()","rubocop::cop::arrayhashindentation#detected_styles_for_column()","rubocop::cop::lint::unneededdisable#directive_count()","rubocop::cop::metrics::linelength#directive_on_source_line?()","rubocop::commentconfig#directive_parts()","rubocop::cop::lint::unneededdisable#directive_range_in_list()","rubocop::configloader::dirs_to_search()","rubocop::cop::offense#disabled?()","rubocop::processedsource#disabled_line_ranges()","rubocop::cop::style::redundantparentheses#disallowed_literal?()","rubocop::cop::autocorrectalignment#display_column()","rubocop::cop::messageannotator#display_cop_names?()","rubocop::cli#display_error_summary()","rubocop::cop::lint::implicitstringconcatenation#display_str()","rubocop::cop::messageannotator#display_style_guide?()","rubocop::cli#display_warning_summary()","rubocop::cop::lint::blockalignment#disqualified_parent?()","rubocop::stringutil::jaro#distance()","rubocop::stringutil::jaro::distance()","rubocop::ast::fornode#do?()","rubocop::ast::untilnode#do?()","rubocop::ast::whilenode#do?()","rubocop::cop::layout::spacearoundkeyword#do?()","rubocop::runner#do_inspection_loop()","rubocop::cop::documentationcomment#documentation_comment?()","rubocop::ast::methoddispatchnode#dot?()","rubocop::cop::rails::uniqbeforepluck#dot_method_begin_pos()","rubocop::cop::rails::uniqbeforepluck#dot_method_with_whitespace()","rubocop::ast::methoddispatchnode#double_colon?()","rubocop::cop::util#double_quotes_required?()","rubocop::cop::layout::alignhash#double_splat?()","rubocop::cop::performance::casecmp#downcase_eq_range()","rubocop::cop::style::trivialaccessors#dsl_writer?()","rubocop::cop::cop#duplicate_location?()","rubocop::cop::bundler::duplicatedgem#duplicated_gem_nodes()","rubocop::cop::duplication#duplicates()","rubocop::cop::duplication#duplicates?()","rubocop::cop::rails::pluralizationgrammar#duration_method?()","rubocop::config#each()","rubocop::cop::registry#each()","rubocop::cop::lint::unneededdisable#each_already_disabled()","rubocop::cop::arrayhashindentation#each_argument_node()","rubocop::cop::autocorrectalignment#each_bad_alignment()","rubocop::cop::lint::implicitstringconcatenation#each_bad_cons()","rubocop::cop::style::signalexception#each_command_or_kernel_call()","rubocop::ast::whennode#each_condition()","rubocop::commentconfig#each_directive()","rubocop::cop::layout::emptylines#each_extra_empty_line()","rubocop::cop::spaceinside#each_extraneous_space()","rubocop::runner#each_inspected_file()","rubocop::ast::hashnode#each_key()","rubocop::config#each_key()","rubocop::cop::autocorrectalignment#each_line()","rubocop::cop::lint::unneededdisable#each_line_range()","rubocop::cop::matchrange#each_match_range()","rubocop::cop::layout::indentationwidth#each_member()","rubocop::commentconfig#each_mentioned_cop()","rubocop::cop::style::optionalarguments#each_misplaced_optional_arg()","rubocop::cop::spaceafterpunctuation#each_missing_space()","rubocop::cop::spacebeforepunctuation#each_missing_space()","rubocop::cop::variableforce::scope#each_node()","rubocop::ast::hashnode#each_pair()","rubocop::cop::style::singlelinemethods#each_part()","rubocop::cop::performance::redundantmerge#each_redundant_merge()","rubocop::cop::style::semicolon#each_semicolon()","rubocop::cop::layout::spaceinsidestringinterpolation#each_style_violation()","rubocop::cop::layout::spaceinsidearraypercentliteral#each_unnecessary_space_match()","rubocop::cop::lint::unneededdisable#each_unneeded_disable()","rubocop::ast::hashnode#each_value()","rubocop::ast::casenode#each_when()","rubocop::cop::style::modulefunction#each_wrong_style()","rubocop::cop::style::ternarycorrector::element_assignment?()","rubocop::cop::trailingcomma#elements()","rubocop::cop::style::singlelineblockparams#eligible_arguments?()","rubocop::cop::style::singlelineblockparams#eligible_method?()","rubocop::cop::style::lineendconcatenation#eligible_next_successor?()","rubocop::cop::performance::count#eligible_node?()","rubocop::cop::performance::size#eligible_node?()","rubocop::cop::style::ifunlessmodifier#eligible_node?()","rubocop::cop::style::lineendconcatenation#eligible_operator?()","rubocop::cop::style::lineendconcatenation#eligible_predecessor?()","rubocop::cop::performance::redundantmerge::eachwithobjectinspector#eligible_receiver?()","rubocop::cop::performance::size#eligible_receiver?()","rubocop::cop::style::lineendconcatenation#eligible_successor?()","rubocop::ast::casenode#else?()","rubocop::ast::ifnode#else?()","rubocop::ast::casenode#else_branch()","rubocop::ast::ifnode#else_branch()","rubocop::ast::ifnode#elsif?()","rubocop::ast::ifnode#elsif_conditional?()","rubocop::cop::style::unneededinterpolation#embedded_in_percent_array?()","rubocop::nodepattern::compiler#emit_capture_list()","rubocop::nodepattern::compiler#emit_guard_clause()","rubocop::nodepattern::compiler#emit_method_code()","rubocop::nodepattern::compiler#emit_param_list()","rubocop::nodepattern::compiler#emit_retval()","rubocop::nodepattern::compiler#emit_trailing_params()","rubocop::ast::hashnode#empty?()","rubocop::cop::lint::unusedblockargument#empty_block?()","rubocop::cop::statementmodifier#empty_body?()","rubocop::cop::layout::spacebeforeblockbraces#empty_braces?()","rubocop::cop::style::emptyelse#empty_check()","rubocop::cop::style::missingelse#empty_else_config()","rubocop::cop::style::missingelse#empty_else_cop_enabled?()","rubocop::cop::style::missingelse#empty_else_style()","rubocop::cop::lint::emptyexpression#empty_expression?()","rubocop::cop::layout::emptylinesaroundaccessmodifier#empty_lines_around?()","rubocop::cop::multilineliteralbracelayout#empty_literal?()","rubocop::cop::style::redundantparentheses#empty_parentheses?()","rubocop::cop::style::emptyelse#empty_style?()","rubocop::config#enable_cop?()","rubocop::runner#enable_rails_cops()","rubocop::cop::registry#enabled()","rubocop::cop::cop#enabled_line?()","rubocop::magiccomment::emacscomment#encoding()","rubocop::magiccomment::simplecomment#encoding()","rubocop::magiccomment::vimcomment#encoding()","rubocop::cop::style::encoding#encoding_line_number()","rubocop::cop::style::encoding#encoding_omitable?()","rubocop::magiccomment#encoding_specified?()","rubocop::cop::style::copyright#encoding_token?()","rubocop::cop::lint::blockalignment#end_align_target?()","rubocop::cop::style::next#end_followed_by_whitespace_only?()","rubocop::cop::style::singlelinemethods#end_of_line_comment()","rubocop::cop::style::inversemethods#end_parentheses()","rubocop::cop::style::lambda#end_pos()","rubocop::cop::style::next#end_range()","rubocop::cop::style::safenavigation#end_range()","rubocop::cop::style::conditionalassignmenthelper#end_with_eq?()","rubocop::cop::lint::implicitstringconcatenation#ending_delimiter()","rubocop::cop::layout::trailingblanklines#ends_in_end?()","rubocop::cop::style::next#ends_with_condition?()","rubocop::cop::style::emptyliteral#enforce_double_quotes?()","rubocop::cop::style::specialglobalvars#english_name_replacement()","rubocop::cop::registry#enlist()","rubocop::cop::percentliteral#ensure_valid_preferred_delimiters()","rubocop::ast::methodidentifierpredicates#enumerator_method?()","rubocop::cop::rails::unknownenv#environments()","rubocop::cop::badge#eql?()","rubocop::cop::offense#eql?()","rubocop::cop::layout::extraspacing#equal_sign?()","rubocop::formatter::htmlformatter::erbcontext#escape()","rubocop::cop::util#escape_string()","rubocop::cop::lint::uselessaccessmodifier#eval_call?()","rubocop::cop::lint::shadowedexception#evaluate_exceptions()","rubocop::cop::style::trivialaccessors#exact_name_match?()","rubocop::cop::layout::emptylines#exceeds_line_offset?()","rubocop::optionsvalidator#except_syntax?()","rubocop::cop::layout::spacearoundoperators#excess_leading_space?()","rubocop::cop::metrics::linelength#excess_range()","rubocop::cop::layout::spacearoundoperators#excess_trailing_space?()","rubocop::targetfinder#excluded_dirs()","rubocop::cop::cop#excluded_file?()","rubocop::cop::metrics::blocklength#excluded_methods()","rubocop::formatter::disabledconfigformatter#excludes()","rubocop::cop::lint::scriptpermission#executable?()","rubocop::cli#execute_runner()","rubocop::cop::style::next#exit_body_type?()","rubocop::cop::style::conditionalassignmenthelper#expand_elses()","rubocop::cop::style::identicalconditionalbranches#expand_elses()","rubocop::cop::style::conditionalassignmenthelper#expand_elsif()","rubocop::cop::style::conditionalassignmenthelper#expand_when_branches()","rubocop::cop::style::emptymethod#expanded?()","rubocop::cop::style::emptymethod#expanded_style?()","rubocop::cop::naming::filename#expect_matching_definition?()","rubocop::rspec::expectoffense#expect_no_offenses()","rubocop::rspec::expectoffense#expect_offense()","rubocop::cop::layout::spacebeforefirstarg#expect_params_after_method_name?()","rubocop::cop::layout::spaceinsidehashliteralbraces#expect_space?()","rubocop::cop::layout::closingparenthesisindentation#expected_column()","rubocop::cop::lint::formatparametermismatch#expected_fields_count()","rubocop::cop::layout::accessmodifierindentation#expected_indent_offset()","rubocop::cop::naming::predicatename#expected_name()","rubocop::cop::rails::savebang#expected_signature?()","rubocop::cop::variableforce::reference#explicit?()","rubocop::cop::variableforce::variable#explicit_block_local_variable?()","rubocop::cop::style::lambdacall#explicit_style?()","rubocop::cop::style::onelineconditional#expr_replacement()","rubocop::cop::trailingcomma#extra_avoid_comma_info()","rubocop::cop::messageannotator#extra_details?()","rubocop::cop::layout::multilinemethodcallindentation#extra_indentation()","rubocop::cop::layout::extraspacing#extra_space_range()","rubocop::magiccomment#extract()","rubocop::cop::internalaffairs::deprecatedpositionalarguments#extract_arguments()","rubocop::cop::toomanylines#extract_body()","rubocop::cop::style::casecorrector::extract_branches()","rubocop::cop::style::ifcorrector::extract_branches()","rubocop::cop::style::ternarycorrector::extract_branches()","rubocop::cop::style::safenavigation#extract_common_parts()","rubocop::magiccomment::emacscomment#extract_frozen_string_literal()","rubocop::magiccomment::simplecomment#extract_frozen_string_literal()","rubocop::cop::style::commentedkeyword#extract_heredoc_lines()","rubocop::cop::metrics::linelength#extract_heredocs()","rubocop::cop::rails::timezone#extract_method()","rubocop::cop::rails::date#extract_method_chain()","rubocop::cop::rails::timezone#extract_method_chain()","rubocop::cop::style::safenavigation#extract_parts()","rubocop::cop::style::safenavigation#extract_parts_from_and()","rubocop::cop::style::safenavigation#extract_parts_from_if()","rubocop::cop::checkassignment#extract_rhs()","rubocop::cop::performance::sample#extract_source()","rubocop::cop::style::parallelassignment::genericcorrector#extract_sources()","rubocop::cop::style::casecorrector::extract_tail_branches()","rubocop::cop::style::ifcorrector::extract_tail_branches()","rubocop::cop::style::unlesscorrector::extract_tail_branches()","rubocop::nodepattern::compiler#fail_due_to()","rubocop::targetfinder#fail_fast?()","rubocop::remoteconfig#file()","rubocop::resultcache#file_checksum()","rubocop::formatter::baseformatter#file_finished()","rubocop::formatter::disabledconfigformatter#file_finished()","rubocop::formatter::emacsstyleformatter#file_finished()","rubocop::formatter::filelistformatter#file_finished()","rubocop::formatter::formatterset#file_finished()","rubocop::formatter::fuubarstyleformatter#file_finished()","rubocop::formatter::htmlformatter#file_finished()","rubocop::formatter::jsonformatter#file_finished()","rubocop::formatter::offensecountformatter#file_finished()","rubocop::formatter::progressformatter#file_finished()","rubocop::formatter::simpletextformatter#file_finished()","rubocop::formatter::tapformatter#file_finished()","rubocop::formatter::worstoffendersformatter#file_finished()","rubocop::cop::style::dir#file_keyword?()","rubocop::cop::cop#file_name_matches_any?()","rubocop::runner#file_offense_cache()","rubocop::runner#file_offenses()","rubocop::formatter::baseformatter#file_started()","rubocop::formatter::disabledconfigformatter#file_started()","rubocop::formatter::disabledlinesformatter#file_started()","rubocop::formatter::formatterset#file_started()","rubocop::runner#file_started()","rubocop::config#file_to_exclude?()","rubocop::config#file_to_include?()","rubocop::cop::naming::filename#filename_good?()","rubocop::formatter::simpletextformatter::report#files()","rubocop::runner#filter_cop_classes()","rubocop::runner#filtered_run?()","rubocop::targetfinder#find()","rubocop::cop::lint::unusedargument#find_assignment_without_variable_usage()","rubocop::cop::naming::filename#find_class_or_module()","rubocop::stringutil::jaro#find_common_characters()","rubocop::cop::metrics::linelength#find_excessive_uri_range()","rubocop::targetfinder#find_files()","rubocop::cop::style::trailingunderscorevariable#find_first_offense()","rubocop::cop::style::trailingunderscorevariable#find_first_possible_offense()","rubocop::cop::performance::regexpmatch#find_last_match()","rubocop::cop::cop#find_location()","rubocop::cop::style::safenavigation#find_matching_receiver_invocation()","rubocop::cop::lint::nestedmethoddefinition#find_nested_defs()","rubocop::cop::internalaffairs::offenselocationkeyword#find_offending_argument()","rubocop::cop::internalaffairs::redundantmessageargument#find_offending_argument()","rubocop::namesimilarity#find_similar_name()","rubocop::runner#find_target_files()","rubocop::cop::lint::unneededdisable#find_unneeded()","rubocop::cop::style::parallelassignment#find_valid_order()","rubocop::cop::variableforce::variabletable#find_variable()","rubocop::formatter::baseformatter#finished()","rubocop::formatter::disabledconfigformatter#finished()","rubocop::formatter::disabledlinesformatter#finished()","rubocop::formatter::htmlformatter#finished()","rubocop::formatter::jsonformatter#finished()","rubocop::formatter::offensecountformatter#finished()","rubocop::formatter::progressformatter#finished()","rubocop::formatter::simpletextformatter#finished()","rubocop::formatter::worstoffendersformatter#finished()","rubocop::ast::parameterizednode#first_argument()","rubocop::cop::style::eachwithobject#first_argument_returned?()","rubocop::cop::style::emptyliteral#first_argument_unparenthesized?()","rubocop::cop::firstelementlinebreak#first_by_line()","rubocop::cop::layout::emptylinesaroundbody#first_child_requires_empty_line?()","rubocop::cop::style::commentannotation#first_comment_line?()","rubocop::cop::layout::emptylinesaroundbody#first_empty_line_required_child()","rubocop::cop::naming::filename#first_line()","rubocop::cop::offense#first_line()","rubocop::cop::style::ifunlessmodifier#first_line_comment()","rubocop::cop::naming::asciiidentifiers#first_non_ascii_chars()","rubocop::cop::style::asciicomments#first_non_ascii_chars()","rubocop::cop::naming::asciiidentifiers#first_offense_range()","rubocop::cop::style::asciicomments#first_offense_range()","rubocop::cop::performance::stringreplacement#first_source()","rubocop::cop::layout::initialindentation#first_token()","rubocop::cop::layout::alignparameters#fixed_indentation?()","rubocop::cop::layout::closingparenthesisindentation#fixed_parameter_indentation?()","rubocop::cop::lint::unreachablecode#flow_expression?()","rubocop::cop::layout::spaceaftercolon#followed_by_space?()","rubocop::cop::layout::extraspacing#following_line()","rubocop::configstore#for()","rubocop::cop::badge::for()","rubocop::config#for_all_cops()","rubocop::cop::naming::filename#for_bad_filename()","rubocop::config#for_cop()","rubocop::configstore#force_default_config!()","rubocop::cop::layout::extraspacing#force_equal_sign_alignment?()","rubocop::targetfinder#force_exclusion?()","rubocop::cop::style::hashsyntax#force_hash_rockets?()","rubocop::cop::force::force_name()","rubocop::cop::team#forces()","rubocop::cop::team#forces_for()","rubocop::cop::lint::formatparametermismatch#format?()","rubocop::cop::rails::httppositionalarguments#format_arg?()","rubocop::cop::style::numericliteralprefix#format_binary()","rubocop::cop::style::numericliteralprefix#format_decimal()","rubocop::cop::style::specialglobalvars#format_english_message()","rubocop::cop::style::numericliteralprefix#format_hex()","rubocop::cop::style::specialglobalvars#format_list()","rubocop::cop::layout::rescueensurealignment#format_message()","rubocop::cop::lint::blockalignment#format_message()","rubocop::cop::lint::ineffectiveaccessmodifier#format_message()","rubocop::cop::style::specialglobalvars#format_message()","rubocop::cop::lint::scriptpermission#format_message_from()","rubocop::cop::lint::formatparametermismatch#format_method?()","rubocop::cop::style::numericliterals#format_number()","rubocop::cop::style::numericliteralprefix#format_octal()","rubocop::cop::style::numericliteralprefix#format_octal_zero_only()","rubocop::cop::lint::blockalignment#format_source_line_column()","rubocop::formatter::formatterset#formatter_class()","rubocop::runner#formatter_set()","rubocop::cop::lint::duplicatemethods#found_attr()","rubocop::cop::lint::duplicatemethods#found_instance_method()","rubocop::cop::lint::duplicatemethods#found_method()","rubocop::processedsource::from_file()","rubocop::cacheddata#from_json()","rubocop::token::from_parser_token()","rubocop::magiccomment#frozen_string_literal()","rubocop::magiccomment::vimcomment#frozen_string_literal()","rubocop::magiccomment#frozen_string_literal?()","rubocop::cop::style::frozenstringliteralcomment#frozen_string_literal_comment()","rubocop::cop::frozenstringliteral#frozen_string_literal_comment_exists?()","rubocop::magiccomment#frozen_string_literal_specified?()","rubocop::cop::frozenstringliteral#frozen_string_literals_enabled?()","rubocop::raketask#full_options()","rubocop::cop::style::blockdelimiters#functional_block?()","rubocop::cop::style::blockdelimiters#functional_method?()","rubocop::configloader::gem_config_path()","rubocop::cop::orderedgemnode#gem_name()","rubocop::cop::generator#generate()","rubocop::cop::generator#generated_source()","rubocop::cop::generator#generated_spec()","rubocop::cop::style::blockdelimiters#get_blocks()","rubocop::cop::gemspec::ordereddependencies#get_dependency_name()","rubocop::nodepattern::compiler#get_param()","rubocop::runner#get_processed_source()","rubocop::cop::orderedgemnode#get_source_range()","rubocop::cop::layout::alignhash#good_alignment?()","rubocop::cop::rails::date#good_days()","rubocop::cop::rails::actionfilter#good_methods()","rubocop::cop::rails::date#good_methods()","rubocop::cop::rails::timezone#good_methods()","rubocop::cop::style::mixingrouping#group_mixins()","rubocop::cop::duplication#grouped_duplicates()","rubocop::cop::style::mixingrouping#grouped_style?()","rubocop::cop::style::whileuntildo#handle()","rubocop::configloader::handle_disabled_by_default()","rubocop::cop::team#handle_error()","rubocop::cli#handle_exiting_options()","rubocop::cop::lint::literalascondition#handle_node()","rubocop::remoteconfig#handle_response()","rubocop::cop::team#handle_warning()","rubocop::cop::badge#hash()","rubocop::cop::offense#hash()","rubocop::cop::severity#hash()","rubocop::cop::performance::size#hash?()","rubocop::cop::style::redundantparentheses#hash_element?()","rubocop::formatter::jsonformatter#hash_for_file()","rubocop::formatter::jsonformatter#hash_for_location()","rubocop::formatter::jsonformatter#hash_for_offense()","rubocop::cop::style::redundantparentheses#hash_literal_as_first_arg?()","rubocop::cop::layout::spaceinsidehashliteralbraces#hash_literal_with_braces()","rubocop::ast::keywordsplatnode#hash_rocket?()","rubocop::ast::pairnode#hash_rocket?()","rubocop::cop::hashalignment::separatoralignment#hash_rocket_delta()","rubocop::cop::hashalignment::tablealignment#hash_rocket_delta()","rubocop::cop::style::hashsyntax#hash_rockets_check()","rubocop::cop::layout::spacearoundoperators#hash_table_style?()","rubocop::cop::style::identicalconditionalbranches#head()","heredoc#heredoc?()","rubocop::cop::lint::formatparametermismatch#heredoc?()","rubocop::cop::lint::interpolationcheck#heredoc?()","rubocop::cop::trailingcomma#heredoc?()","rubocop::cop::layout::indentheredoc#heredoc_body()","rubocop::cop::layout::indentheredoc#heredoc_indent_type()","rubocop::cop::style::next#heredoc_lines()","rubocop::cop::style::commandliteral#heredoc_literal?()","rubocop::cop::autocorrectalignment#heredoc_ranges()","rubocop::cop::style::numericliteralprefix#hex_bin_dec_literal_type()","rubocop::cop::offense#highlighted_area()","rubocop::formatter::htmlformatter::erbcontext#highlighted_source_line()","rubocop::cop::cop#highlights()","rubocop::formatter::htmlformatter::erbcontext#hightlight_source_tag()","rubocop::ast::ifnode#if?()","rubocop::ast::ifnode#if_branch()","rubocop::cop::style::next#if_else_children?()","rubocop::cop::style::missingelse#if_style?()","rubocop::cop::style::next#if_without_else?()","rubocop::cop::style::trivialaccessors#ignore_class_methods?()","rubocop::cop::metrics::linelength#ignore_cop_directives?()","rubocop::cop::lint::unusedblockargument#ignore_empty_blocks?()","rubocop::cop::naming::filename#ignore_executable_scripts?()","rubocop::cop::layout::alignhash#ignore_hash_argument?()","rubocop::cop::style::methodcallwithargsparentheses#ignore_macros?()","rubocop::cop::ignorednode#ignore_node()","rubocop::cop::lint::unneededdisable#ignore_offense?()","rubocop::cop::rails::findeach#ignored_by_find_each?()","rubocop::cop::ignoredpattern#ignored_line?()","rubocop::cop::metrics::linelength#ignored_line?()","rubocop::cop::style::methodcallwithargsparentheses#ignored_list()","rubocop::cop::layout::multilinemethodcallbracelayout#ignored_literal?()","rubocop::cop::multilineliteralbracelayout#ignored_literal?()","rubocop::cop::style::blockdelimiters#ignored_method?()","rubocop::cop::style::methodcallwithargsparentheses#ignored_method?()","rubocop::cop::style::symbolproc#ignored_method?()","rubocop::cop::style::symbolproc#ignored_methods()","rubocop::cop::ignorednode#ignored_node?()","rubocop::cop::ignorednode#ignored_nodes()","rubocop::cop::ignoredpattern#ignored_patterns()","rubocop::cop::layout::extraspacing#ignored_range?()","rubocop::cop::layout::extraspacing#ignored_ranges()","rubocop::cop::lint::inheritexception#illegal_class_name?()","rubocop::cop::style::redundantfreeze#immutable_literal?()","rubocop::cop::style::methodmissing#implements_respond_to_missing?()","rubocop::ast::methoddispatchnode#implicit_call?()","rubocop::cop::style::unneededinterpolation#implicit_concatenation?()","rubocop::cop::multilineliteralbracelayout#implicit_literal?()","rubocop::cop::style::lambdacall#implicit_style?()","hostenvironmentsimulatorhelper#in_its_own_process_with()","rubocop::cop::style::trivialaccessors#in_module_or_instance_eval?()","rubocop::cop::variableforce::scope#include?()","rubocop::cop::rails::delegate#include_prefix_case?()","rubocop::cop::style::nonnilcheck#include_semantic_changes?()","rubocop::cop::style::conditionalassignment#include_ternary?()","rubocop::cop::enforcesuperclass::included()","rubocop::optionsvalidator#incompatible_options()","rubocop::cop::layout::caseindentation#incorrect_style()","rubocop::cop::arrayhashindentation#incorrect_style_detected()","rubocop::cop::layout::spacearoundequalsinparameterdefault#incorrect_style_detected()","rubocop::cop::layout::spaceinsidehashliteralbraces#incorrect_style_detected()","rubocop::cop::style::for#incorrect_style_detected()","rubocop::cop::style::conditionalassignmenthelper#indent()","rubocop::cop::style::mixingrouping#indent()","rubocop::cop::performance::casewhensplat#indent_for()","rubocop::cop::layout::indentheredoc#indent_level()","rubocop::cop::layout::caseindentation#indent_one_step?()","rubocop::cop::performance::redundantmerge#indent_width()","rubocop::cop::autocorrectalignment#indentation()","rubocop::cop::layout::indentationwidth#indentation_consistency_style()","rubocop::cop::layout::blockendnewline#indentation_of_block_start_line()","rubocop::cop::layout::indentationwidth#indentation_to_check?()","rubocop::cop::layout::caseindentation#indentation_width()","rubocop::cop::layout::indentheredoc#indentation_width()","rubocop::cop::style::conditionalassignment#indentation_width()","rubocop::cop::layout::indentheredoc#indented_body()","rubocop::cop::style::multilineifmodifier#indented_body()","rubocop::cop::style::redundantconditional#indented_else_node()","rubocop::cop::surroundingspace#index_of_first_token()","rubocop::cop::surroundingspace#index_of_last_token()","rubocop::cop::performance::casecmp#inefficient_comparison()","rubocop::cop::style::methodcallwithoutargsparentheses#ineligible_node?()","rubocop::cop::style::ternaryparentheses#infinite_loop?()","rubocop::remoteconfig#inherit_from_remote()","rubocop::cop::cop::inherited()","rubocop::cop::force::inherited()","rubocop::configloader::inherited_file()","rubocop::cop::generator::requirefileinjector#inject()","rubocop::cop::generator#inject_require()","rubocop::cop::generator::requirefileinjector#injectable_require_directive()","rubocop::cop::performance::casewhensplat#inline_fix_branch()","rubocop::cop::corrector#insert_after()","rubocop::cop::corrector#insert_before()","rubocop::cop::style::copyright#insert_notice_before()","rubocop::cop::trailingcomma#inside_comment?()","rubocop::cop::stringhelp#inside_interpolation?()","rubocop::cop::team#inspect_file()","rubocop::runner#inspect_file()","rubocop::runner#inspect_files()","cophelper#inspect_gemfile()","cophelper#inspect_source()","cophelper#inspect_source_file()","rubocop::cop::performance::caller#int_value()","rubocop::cop::integernode#integer_part()","rubocop::cop::style::unneededpercentq#interpolated_quotes?()","rubocop::cop::style::unneededinterpolation#interpolation?()","rubocop::stringinterpreter::interpret()","rubocop::stringinterpreter::interpret_hex()","rubocop::stringinterpreter::interpret_octal()","rubocop::stringinterpreter::interpret_string_escape()","rubocop::cop::util#interpret_string_escapes()","rubocop::stringinterpreter::interpret_unicode()","rubocop::cop::documentationcomment#interpreter_directive_comment?()","rubocop::cop::lint::rescuetype#invalid_exceptions()","rubocop::cop::percentarray#invalid_percent_array_context?()","rubocop::cop::style::inversemethods#inverse_blocks()","rubocop::ast::pairnode#inverse_delimiter()","rubocop::ast::ifnode#inverse_keyword()","rubocop::ast::untilnode#inverse_keyword()","rubocop::ast::whilenode#inverse_keyword()","rubocop::cop::style::inversemethods#inverse_methods()","rubocop::ast::andnode#inverse_operator()","rubocop::ast::ornode#inverse_operator()","rubocop::cop::style::numericpredicate#invert()","rubocop::cop::style::redundantconditional#invert_expression?()","rubocop::cop::bundler::duplicatedgem#investigate()","rubocop::cop::bundler::orderedgems#investigate()","rubocop::cop::commissioner#investigate()","rubocop::cop::force#investigate()","rubocop::cop::gemspec::ordereddependencies#investigate()","rubocop::cop::internalaffairs::uselessmessageassertion#investigate()","rubocop::cop::layout::commentindentation#investigate()","rubocop::cop::layout::emptylineaftermagiccomment#investigate()","rubocop::cop::layout::emptylines#investigate()","rubocop::cop::layout::endofline#investigate()","rubocop::cop::layout::extraspacing#investigate()","rubocop::cop::layout::initialindentation#investigate()","rubocop::cop::layout::leadingcommentspace#investigate()","rubocop::cop::layout::rescueensurealignment#investigate()","rubocop::cop::layout::spacebeforecomment#investigate()","rubocop::cop::layout::tab#investigate()","rubocop::cop::layout::trailingblanklines#investigate()","rubocop::cop::layout::trailingwhitespace#investigate()","rubocop::cop::lint::scriptpermission#investigate()","rubocop::cop::metrics::linelength#investigate()","rubocop::cop::naming::asciiidentifiers#investigate()","rubocop::cop::naming::filename#investigate()","rubocop::cop::parserdiagnostic#investigate()","rubocop::cop::rescuenode#investigate()","rubocop::cop::spaceafterpunctuation#investigate()","rubocop::cop::spacebeforepunctuation#investigate()","rubocop::cop::spaceinside#investigate()","rubocop::cop::style::asciicomments#investigate()","rubocop::cop::style::blockcomments#investigate()","rubocop::cop::style::commentannotation#investigate()","rubocop::cop::style::commentedkeyword#investigate()","rubocop::cop::style::copyright#investigate()","rubocop::cop::style::encoding#investigate()","rubocop::cop::style::frozenstringliteralcomment#investigate()","rubocop::cop::style::inlinecomment#investigate()","rubocop::cop::style::lineendconcatenation#investigate()","rubocop::cop::style::next#investigate()","rubocop::cop::style::semicolon#investigate()","rubocop::cop::style::signalexception#investigate()","rubocop::cop::team#investigate()","rubocop::cop::commissioner#invoke_custom_processing()","rubocop::cop::variableforce::variabletable#invoke_hook()","rubocop::cop::codelength#irrelevant_line()","rubocop::runner#iterate_until_no_changes()","rubocop::cop::cop#join_force?()","rubocop::cop::lint::shadowingouterlocalvariable#join_force?()","rubocop::cop::lint::underscoreprefixedvariablename#join_force?()","rubocop::cop::lint::unusedargument#join_force?()","rubocop::cop::lint::uselessassignment#join_force?()","rubocop::cop::rails::savebang#join_force?()","rubocop::nodepattern::compiler#join_terms()","rubocop::cop::style::emptymethod#joint()","rubocop::cop::style::annotationcomment#just_first_word_of_sentence?()","rubocop::ast::hashelementnode#key()","rubocop::config#key?()","rubocop::ast::hashelementnode#key_delta()","rubocop::ast::hashelementnode::hashelementdelta#key_delta()","rubocop::cop::hashalignment::separatoralignment#key_delta()","rubocop::cop::hashalignment::tablealignment#key_delta()","rubocop::ast::hashnode#keys()","rubocop::config#keys()","rubocop::ast::casenode#keyword()","rubocop::ast::fornode#keyword()","rubocop::ast::ifnode#keyword()","rubocop::ast::untilnode#keyword()","rubocop::ast::whilenode#keyword()","rubocop::cop::style::annotationcomment#keyword?()","rubocop::cop::style::redundantself#keyword?()","rubocop::cop::style::redundantparentheses#keyword_ancestor?()","rubocop::cop::style::annotationcomment#keyword_appearance?()","rubocop::cop::variableforce::variable#keyword_argument?()","rubocop::cop::style::multilinememoization#keyword_autocorrect()","rubocop::cop::style::multilinememoization#keyword_begin_str()","rubocop::cop::style::multilinememoization#keyword_end_str()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#keyword_locations()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#keyword_locations_in_ensure()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#keyword_locations_in_rescue()","rubocop::ast::hashelementnode::hashelementdelta#keyword_splat?()","rubocop::cop::style::onelineconditional#keyword_with_changed_precedence?()","rubocop::cop::style::redundantparentheses#keyword_with_redundant_parentheses?()","rubocop::ast::blocknode#keywords?()","rubocop::cop::layout::spaceaftercomma#kind()","rubocop::cop::layout::spaceaftersemicolon#kind()","rubocop::cop::layout::spacebeforecomma#kind()","rubocop::cop::layout::spacebeforesemicolon#kind()","rubocop::cop::performance::hasheachmethods#kv_range()","rubocop::ast::blocknode#lambda?()","rubocop::cop::style::lambda#lambda_arg_string()","rubocop::cop::layout::spaceinlambdaliteral#lambda_node?()","rubocop::cop::arrayminsize#largest_brackets_size()","rubocop::ast::parameterizednode#last_argument()","rubocop::cop::firstelementlinebreak#last_by_line()","rubocop::cop::rails::savebang#last_call_of_method?()","rubocop::cop::multilineliteralbracelayout#last_element_range_with_trailing_comma()","rubocop::cop::multilineliteralbracelayout#last_element_trailing_comma_range()","rubocop::cop::layout::spacearoundblockparameters#last_end_pos_inside_pipes()","rubocop::cop::lint::uselesssettercall#last_expression()","rubocop::cop::offense#last_line()","rubocop::cop::multilineliteralbracelayout#last_line_heredoc?()","rubocop::cop::layout::emptylineaftermagiccomment#last_magic_comment()","rubocop::cop::performance::regexpmatch#last_match_used?()","rubocop::cop::style::frozenstringliteralcomment#last_special_comment()","rubocop::cop::performance::detect#lazy?()","rubocop::cop::frozenstringliteral#leading_comment_lines()","rubocop::cop::performance::redundantmerge#leading_spaces()","rubocop::cop::layout::spaceinsidehashliteralbraces#left_brace?()","rubocop::cop::style::nestedmodifier#left_hand_operand()","rubocop::cop::spaceinside::brackets#left_side?()","rubocop::cop::registry#length()","rubocop::cop::statementmodifier#length_in_modifier_form()","rubocop::cop::layout::commentindentation#less_indented?()","rubocop::cop::severity#level()","rubocop::cop::style::alias#lexical_scope_type()","rubocop::ast::binaryoperatornode#lhs()","rubocop::cop::style::conditionalassignmenthelper#lhs()","rubocop::cop::style::conditionalassignment#lhs_all_match?()","rubocop::cop::style::conditionalassignmenthelper#lhs_for_send()","rubocop::stringutil::jarowinkler#limited_common_prefix_length()","rubocop::cop::offense#line()","rubocop::cop::layout::commentindentation#line_after_comment()","rubocop::cop::layout::dotposition#line_between?()","rubocop::cop::layout::closingparenthesisindentation#line_break_after_left_paren?()","rubocop::cop::endkeywordalignment#line_break_before_keyword?()","rubocop::cop::statementmodifier#line_count()","rubocop::cop::style::blockdelimiters#line_count_based_block_style?()","rubocop::cop::style::blockdelimiters#line_count_based_message()","rubocop::cop::util#line_distance()","rubocop::cop::metrics::linelength#line_in_whitelisted_heredoc?()","rubocop::cop::style::conditionalassignment#line_length_cop_enabled?()","rubocop::cop::metrics::linelength#line_length_without_directive()","rubocop::cop::classishlength#line_numbers_of_inner_nodes()","rubocop::processedsource#lines()","rubocop::cop::layout::emptylinebetweendefs#lines_between_defs()","rubocop::cop::cop::lint?()","rubocop::runner#list_files()","rubocop::cop::performance::endwith#literal_at_end?()","rubocop::cop::performance::startwith#literal_at_start?()","rubocop::cop::rails::pluralizationgrammar#literal_number?()","rubocop::cop::style::numericliteralprefix#literal_type()","rubocop::resultcache#load()","rubocop::configloader::load_file()","rubocop::configloader::load_yaml_configuration()","rubocop::cop::lint::blockalignment#loc_to_source_line_column()","rubocop::ast::predicateoperatornode#logical_operator?()","rubocop::options#long_opt_symbol()","rubocop::cop::style::conditionalassignment#longest_line()","rubocop::cop::style::conditionalassignment#longest_line_exceeds_line_limit?()","rubocop::cop::rails::outputsafety#looks_like_rails_html_safe?()","rubocop::cop::rails::outputsafety#looks_like_rails_raw?()","rubocop::cop::rails::outputsafety#looks_like_rails_safe_concat?()","rubocop::cop::style::trivialaccessors#looks_like_trivial_reader?()","rubocop::cop::lint::duplicatemethods#lookup_constant()","rubocop::ast::methoddispatchnode#macro?()","rubocop::ast::methoddispatchnode#macro_kwbegin_wrapper?()","rubocop::cop::style::trailingunderscorevariable#main_node_offense()","rubocop::config#make_excludes_absolute()","rubocop::config#map()","rubocop::cop::lint::ineffectiveaccessmodifier#mark_method_as_useless()","rubocop::cop::variableforce::variabletable#mark_variable_as_captured_by_block_if_so()","rubocop::magiccomment::editorcomment#match()","rubocop::cop::badge#match?()","rubocop::cop::cop::match?()","rubocop::cop::naming::filename#match?()","rubocop::cop::naming::filename#match_acronym?()","rubocop::cop::performance::regexpmatch#match_gvar?()","rubocop::cop::naming::filename#match_namespace()","rubocop::pathutil#match_path?()","rubocop::cop::matchrange#match_range()","rubocop::cop::style::formatstringtoken#match_token()","rubocop::cop::metrics::linelength#match_uris()","rubocop::cop::performance::regexpmatch#match_with_lvasgn?()","rubocop::cop::lint::formatparametermismatch#matched_arguments_count?()","rubocop::cop::ignoredpattern#matches_ignored_pattern?()","rubocop::cop::spaceinside#matching_brackets?()","rubocop::stringutil::jaro#matching_index_range()","rubocop::cop::lint::unneededdisable#matching_range()","rubocop::cop::endkeywordalignment#matching_ranges()","rubocop::stringutil::jaro#matching_window()","rubocop::cop::metrics::linelength#max()","rubocop::cop::configurablemax#max=()","rubocop::cop::performance::redundantmerge#max_key_value_pairs()","rubocop::cop::codelength#max_length()","rubocop::cop::statementmodifier#max_line_length()","rubocop::cop::style::conditionalassignment#max_line_length()","rubocop::cop::configurablemax#max_parameter_name()","rubocop::cop::style::numericliterals#max_parameter_name()","rubocop::cop::metrics::parameterlists#max_params()","rubocop::cop::layout::emptylinebetweendefs#maximum_empty_lines()","rubocop::cop::variableforce::exceptionhandler#may_jump_to_other_branch?()","rubocop::cop::variableforce::exceptionhandler#may_run_incompletely?()","rubocop::cli#maybe_print_corrected_source()","rubocop::cop::naming::heredocdelimiternaming#meaningful_delimiters?()","rubocop::config#merge()","rubocop::configloader::merge()","rubocop::configloader::merge_with_default()","rubocop::cacheddata#message()","rubocop::cop::cop#message()","rubocop::cop::layout::accessmodifierindentation#message()","rubocop::cop::layout::alignparameters#message()","rubocop::cop::layout::blockendnewline#message()","rubocop::cop::layout::caseindentation#message()","rubocop::cop::layout::dotposition#message()","rubocop::cop::layout::emptylinesaroundaccessmodifier#message()","rubocop::cop::layout::emptylinesaroundbody#message()","rubocop::cop::layout::firstparameterindentation#message()","rubocop::cop::layout::indentarray#message()","rubocop::cop::layout::indenthash#message()","rubocop::cop::layout::indentheredoc#message()","rubocop::cop::layout::multilinemethodcallindentation#message()","rubocop::cop::layout::multilineoperationindentation#message()","rubocop::cop::layout::spacearoundequalsinparameterdefault#message()","rubocop::cop::layout::spaceinsidehashliteralbraces#message()","rubocop::cop::layout::spaceinsidestringinterpolation#message()","rubocop::cop::layout::trailingblanklines#message()","rubocop::cop::lint::ambiguousblockassociation#message()","rubocop::cop::lint::assignmentincondition#message()","rubocop::cop::lint::conditionposition#message()","rubocop::cop::lint::debugger#message()","rubocop::cop::lint::formatparametermismatch#message()","rubocop::cop::lint::inheritexception#message()","rubocop::cop::lint::literalascondition#message()","rubocop::cop::lint::randone#message()","rubocop::cop::lint::redundantwithindex#message()","rubocop::cop::lint::redundantwithobject#message()","rubocop::cop::lint::stringconversionininterpolation#message()","rubocop::cop::lint::unusedblockargument#message()","rubocop::cop::lint::unusedmethodargument#message()","rubocop::cop::metrics::classlength#message()","rubocop::cop::metrics::modulelength#message()","rubocop::cop::metrics::parameterlists#message()","rubocop::cop::naming::heredocdelimitercase#message()","rubocop::cop::naming::methodname#message()","rubocop::cop::naming::predicatename#message()","rubocop::cop::naming::variablename#message()","rubocop::cop::naming::variablenumber#message()","rubocop::cop::percentarray#message()","rubocop::cop::performance::caller#message()","rubocop::cop::performance::comparewithblock#message()","rubocop::cop::performance::redundantmerge#message()","rubocop::cop::performance::regexpmatch#message()","rubocop::cop::performance::sample#message()","rubocop::cop::performance::stringreplacement#message()","rubocop::cop::performance::timesmap#message()","rubocop::cop::rails::actionfilter#message()","rubocop::cop::rails::pluralizationgrammar#message()","rubocop::cop::rails::readwriteattribute#message()","rubocop::cop::rails::requestreferer#message()","rubocop::cop::rails::skipsmodelvalidations#message()","rubocop::cop::rails::unknownenv#message()","rubocop::cop::rails::validation#message()","rubocop::cop::style::andor#message()","rubocop::cop::style::attr#message()","rubocop::cop::style::blockdelimiters#message()","rubocop::cop::style::classcheck#message()","rubocop::cop::style::classmethods#message()","rubocop::cop::style::classvars#message()","rubocop::cop::style::collectionmethods#message()","rubocop::cop::style::commandliteral#message()","rubocop::cop::style::commentedkeyword#message()","rubocop::cop::style::emptymethod#message()","rubocop::cop::style::formatstring#message()","rubocop::cop::style::formatstringtoken#message()","rubocop::cop::style::identicalconditionalbranches#message()","rubocop::cop::style::lambda#message()","rubocop::cop::style::lambdacall#message()","rubocop::cop::style::methodmissing#message()","rubocop::cop::style::minmax#message()","rubocop::cop::style::missingelse#message()","rubocop::cop::style::mixingrouping#message()","rubocop::cop::style::modulefunction#message()","rubocop::cop::style::multilineifmodifier#message()","rubocop::cop::style::negatedif#message()","rubocop::cop::style::negatedwhile#message()","rubocop::cop::style::nonnilcheck#message()","rubocop::cop::style::numericliteralprefix#message()","rubocop::cop::style::onelineconditional#message()","rubocop::cop::style::parenthesesaroundcondition#message()","rubocop::cop::style::percentliteraldelimiters#message()","rubocop::cop::style::percentqliterals#message()","rubocop::cop::style::preferredhashmethods#message()","rubocop::cop::style::raiseargs#message()","rubocop::cop::style::redundantconditional#message()","rubocop::cop::style::redundantreturn#message()","rubocop::cop::style::returnnil#message()","rubocop::cop::style::signalexception#message()","rubocop::cop::style::singlelineblockparams#message()","rubocop::cop::style::specialglobalvars#message()","rubocop::cop::style::stabbylambdaparentheses#message()","rubocop::cop::style::stringliterals#message()","rubocop::cop::style::stringliteralsininterpolation#message()","rubocop::cop::style::stringmethods#message()","rubocop::cop::style::ternaryparentheses#message()","rubocop::cop::style::unneededpercentq#message()","rubocop::cop::style::variableinterpolation#message()","rubocop::cop::style::yodacondition#message()","rubocop::cop::toomanylines#message()","rubocop::formatter::simpletextformatter#message()","rubocop::formatter::tapformatter#message()","rubocop::cop::lint::duplicatemethods#message_for_dup()","rubocop::cop::lint::unusedblockargument#message_for_lambda()","rubocop::cop::lint::unusedblockargument#message_for_normal_block()","rubocop::cop::lint::unusedblockargument#message_for_underscore_prefix()","rubocop::cop::lint::uselessassignment#message_for_useless_assignment()","rubocop::cop::style::lambda#message_line_modifier()","rubocop::cop::lint::uselessassignment#message_specification()","rubocop::cop::style::formatstringtoken#message_text()","rubocop::cop::cop#messages()","rubocop::cop::variableforce::assignment#meta_assignment_node()","rubocop::formatter::jsonformatter#metadata_hash()","rubocop::ast::methodidentifierpredicates#method?()","rubocop::cop::lint::unneededsplatexpansion#method_argument?()","rubocop::cop::variableforce::variable#method_argument?()","rubocop::cop::lint::ambiguousblockassociation#method_as_param?()","rubocop::cop::lint::deprecatedclassmethods#method_call()","rubocop::cop::style::onelineconditional#method_call_with_changed_precedence?()","rubocop::cop::style::redundantparentheses#method_call_with_redundant_parentheses?()","rubocop::cop::rails::findeach#method_chain()","rubocop::cop::lint::uselessaccessmodifier#method_definition?()","rubocop::cop::naming::predicatename#method_definition_macros()","rubocop::cop::rails::timezone#method_from_time_class?()","rubocop::ast::defnode#method_name()","rubocop::ast::methoddispatchnode#method_name()","rubocop::cop::lint::returninvoidcontext#method_name()","rubocop::cop::style::formatstring#method_name()","rubocop::cop::style::singlelineblockparams#method_name()","rubocop::cop::rails::delegate#method_name_matches?()","rubocop::cop::style::singlelineblockparams#method_names()","rubocop::cop::rails::date#method_send?()","rubocop::cop::rails::timezone#method_send?()","rubocop::cop::performance::stringreplacement#method_suffix()","rubocop::cop::firstelementlinebreak#method_uses_parens?()","rubocop::cop::style::ifunlessmodifier#method_uses_parens?()","rubocop::cop::lint::ambiguousblockassociation#method_with_block?()","rubocop::cop::lint::formatparametermismatch#method_with_format_args?()","rubocop::cop::style::singlelineblockparams#methods()","rubocop::cop::minbodylength#min_body_length()","rubocop::cop::minbodylength#min_body_length?()","rubocop::cop::style::numericliterals#min_digits()","rubocop::cop::arrayminsize#min_size_config()","rubocop::cop::layout::emptylinebetweendefs#minimum_empty_lines()","rubocop::runner#minimum_severity_to_fail()","rubocop::cop::targetrailsversion#minimum_target_rails_version()","rubocop::cop::targetrubyversion#minimum_target_ruby_version()","rubocop::cop::style::emptyelse#missing_else_style()","rubocop::cop::style::methoddefparentheses#missing_parentheses()","rubocop::cop::style::stabbylambdaparentheses#missing_parentheses?()","rubocop::cop::style::stabbylambdaparentheses#missing_parentheses_corrector()","rubocop::ast::hashnode#mixed_delimiters?()","rubocop::runner#mobilized_cop_classes()","rubocop::cop::layout::rescueensurealignment#modifier?()","rubocop::cop::style::nestedmodifier#modifier?()","rubocop::cop::statementmodifier#modifier_fits_on_single_line?()","rubocop::ast::ifnode#modifier_form?()","rubocop::ast::modifiernode#modifier_form?()","rubocop::cop::style::parenthesesaroundcondition#modifier_op?()","rubocop::cop::style::parallelassignment::modifiercorrector#modifier_range()","rubocop::cop::style::infiniteloop#modifier_replacement()","rubocop::cop::style::parallelassignment#modifier_statement?()","rubocop::cop::style::casecorrector::move_assignment_inside_condition()","rubocop::cop::style::conditionalassignment#move_assignment_inside_condition()","rubocop::cop::style::ifcorrector::move_assignment_inside_condition()","rubocop::cop::style::ternarycorrector::move_assignment_inside_condition()","rubocop::cop::style::conditionalassignment#move_assignment_outside_condition()","rubocop::cop::style::casecorrector::move_branch_inside_condition()","rubocop::cop::style::ifcorrector::move_branch_inside_condition()","rubocop::cop::style::ternarycorrector::move_branch_inside_condition()","rubocop::cop::style::singlelinemethods#move_comment()","rubocop::ast::blocknode#multiline?()","rubocop::cop::trailingcomma#multiline?()","rubocop::ast::conditionalnode#multiline_condition?()","rubocop::cop::variableforce::assignment#multiple_assignment?()","rubocop::cop::lint::uselessassignment#multiple_assignment_message()","rubocop::cop::variableforce::assignment#multiple_assignment_node()","rubocop::cop::layout::emptylinebetweendefs#multiple_blank_lines_groups?()","rubocop::cop::cop#name()","rubocop::cop::force#name()","rubocop::cop::variableforce::assignment#name()","rubocop::cop::variableforce::scope#name()","rubocop::cop::severity::name_from_code()","rubocop::cop::lint::formatparametermismatch#named_mode?()","rubocop::cop::registry#names()","rubocop::cop::style::trivialaccessors#names_match?()","rubocop::cop::layout::emptylinesaroundbody#namespace?()","rubocop::cop::style::documentation#namespace?()","rubocop::cop::rails::timezone#need_check_localtime?()","rubocop::cop::rails::httppositionalarguments#needs_conversion?()","rubocop::cop::util#needs_escaping?()","rubocop::cop::performance::casewhensplat#needs_reorder?()","rubocop::cop::style::lambda#needs_whitespace?()","rubocop::cop::style::inversemethods#negated?()","rubocop::cop::style::safenavigation#negated?()","rubocop::cop::negativeconditional#negated_condition()","rubocop::ast::sendnode#negation_method?()","rubocop::cop::negativeconditional#negative_conditional_corrector()","rubocop::cop::style::multiplecomparison#nested_comparison?()","rubocop::ast::ifnode#nested_conditional?()","rubocop::cop::style::multiplecomparison#nested_variable_comparison?()","rubocop::ast::hashelementnode::hashelementdelta::new()","rubocop::cli::new()","rubocop::cacheddata::new()","rubocop::commentconfig::new()","rubocop::config::new()","rubocop::configstore::new()","rubocop::cop::ambiguouscopname::new()","rubocop::cop::badge::new()","rubocop::cop::badge::invalidbadge::new()","rubocop::cop::commissioner::new()","rubocop::cop::cop::new()","rubocop::cop::corrector::new()","rubocop::cop::force::new()","rubocop::cop::generator::new()","rubocop::cop::generator::requirefileinjector::new()","rubocop::cop::lint::deprecatedclassmethods::deprecatedclassmethod::new()","rubocop::cop::lint::duplicatemethods::new()","rubocop::cop::lint::uselesssettercall::methodvariabletracker::new()","rubocop::cop::messageannotator::new()","rubocop::cop::offense::new()","rubocop::cop::performance::redundantmerge::eachwithobjectinspector::new()","rubocop::cop::registry::new()","rubocop::cop::severity::new()","rubocop::cop::spaceinside::brackets::new()","rubocop::cop::style::parallelassignment::assignmentsorter::new()","rubocop::cop::style::parallelassignment::genericcorrector::new()","rubocop::cop::style::redundantself::new()","rubocop::cop::team::new()","rubocop::cop::variableforce::assignment::new()","rubocop::cop::variableforce::reference::new()","rubocop::cop::variableforce::scope::new()","rubocop::cop::variableforce::variable::new()","rubocop::cop::variableforce::variabletable::new()","rubocop::formatter::baseformatter::new()","rubocop::formatter::disabledconfigformatter::new()","rubocop::formatter::formatterset::new()","rubocop::formatter::fuubarstyleformatter::new()","rubocop::formatter::htmlformatter::new()","rubocop::formatter::htmlformatter::erbcontext::new()","rubocop::formatter::jsonformatter::new()","rubocop::formatter::progressformatter::new()","rubocop::formatter::simpletextformatter::report::new()","rubocop::magiccomment::new()","rubocop::nodepattern::new()","rubocop::nodepattern::compiler::new()","rubocop::options::new()","rubocop::optionsvalidator::new()","rubocop::processedsource::new()","rubocop::rspec::expectoffense::annotatedsource::new()","rubocop::raketask::new()","rubocop::remoteconfig::new()","rubocop::resultcache::new()","rubocop::runner::new()","rubocop::runner::infinitecorrectionloop::new()","rubocop::stringutil::jaro::new()","rubocop::stringutil::jarowinkler::new()","rubocop::targetfinder::new()","rubocop::token::new()","rubocop::cop::layout::alignhash#new_alignment()","rubocop::cop::performance::casewhensplat#new_branch_without_then()","rubocop::cop::performance::casewhensplat#new_condition_with_then()","rubocop::cop::style::nestedmodifier#new_expression()","rubocop::cop::multilineliteralbracelayout#new_line_needed_before_closing_brace?()","rubocop::nodepattern::compiler#next_capture()","rubocop::cop::layout::emptylinesaroundaccessmodifier#next_line_empty?()","rubocop::cop::performance::regexpmatch#next_match_pos()","rubocop::nodepattern::compiler#next_temp_value()","rubocop::cop::style::emptyelse#nil_check()","rubocop::cop::lint::safenavigationchain#nil_methods()","rubocop::cop::style::emptyelse#nil_style?()","rubocop::cop::configurableenforcedstyle#no_acceptable_style!()","rubocop::cop::configurableenforcedstyle#no_acceptable_style?()","rubocop::cop::layout::multilinemethodcallindentation#no_base_message()","rubocop::cop::naming::filename#no_definition_message()","rubocop::cop::trailingcomma#no_elements_on_same_line?()","rubocop::cop::style::hashsyntax#no_mixed_keys_check()","rubocop::optionsvalidator#no_offense_counts_without_auto_gen_config?()","rubocop::cop::layout::spaceinsideblockbraces#no_space()","rubocop::cop::layout::spaceinsideblockbraces#no_space_inside_left_brace()","rubocop::cop::layout::spacearoundequalsinparameterdefault#no_surrounding_space?()","rubocop::cop::style::commandliteral#node_body()","rubocop::cop::style::regexpliteral#node_body()","rubocop::ast::andnode#node_parts()","rubocop::ast::blocknode#node_parts()","rubocop::ast::casenode#node_parts()","rubocop::ast::defnode#node_parts()","rubocop::ast::ensurenode#node_parts()","rubocop::ast::fornode#node_parts()","rubocop::ast::ifnode#node_parts()","rubocop::ast::keywordsplatnode#node_parts()","rubocop::ast::ornode#node_parts()","rubocop::ast::pairnode#node_parts()","rubocop::ast::resbodynode#node_parts()","rubocop::ast::sendnode#node_parts()","rubocop::ast::supernode#node_parts()","rubocop::ast::untilnode#node_parts()","rubocop::ast::whennode#node_parts()","rubocop::ast::whilenode#node_parts()","rubocop::ast::yieldnode#node_parts()","rubocop::nodepattern::macros#node_search()","rubocop::nodepattern::macros#node_search_all()","rubocop::nodepattern::macros#node_search_body()","rubocop::nodepattern::macros#node_search_first()","rubocop::cop::style::documentation#nodoc()","rubocop::cop::style::documentation#nodoc?()","rubocop::cop::style::documentation#nodoc_comment?()","rubocop::commentconfig#non_comment_token_line_numbers()","rubocop::cop::style::ternaryparentheses#non_complex_expression?()","rubocop::cop::style::ternaryparentheses#non_complex_send?()","rubocop::cop::statementmodifier#non_eligible_body?()","rubocop::cop::statementmodifier#non_eligible_condition?()","rubocop::cop::style::ifunlessmodifier#non_eligible_if?()","rubocop::cop::statementmodifier#non_eligible_node?()","rubocop::cop::style::yodacondition#non_equality_operator?()","rubocop::cop::style::infiniteloop#non_modifier_range()","rubocop::cop::style::multilineifthen#non_modifier_then?()","rubocop::cop::defnode#non_public?()","rubocop::cop::cop::non_rails()","rubocop::cop::performance::redundantmerge#non_redundant_merge?()","rubocop::cop::performance::redundantmerge#non_redundant_pairs?()","rubocop::cop::performance::redundantmerge#non_redundant_value_used?()","rubocop::cop::performance::casewhensplat#non_splat?()","rubocop::cop::performance::fixedsize#non_string_argument?()","rubocop::cop::lint::returninvoidcontext#non_void_context()","rubocop::cop::style::yodacondition#noncommutative_operator?()","rubocop::cop::style::inversemethods#not_to_receiver()","rubocop::cop::style::copyright#notice()","rubocop::cop::style::copyright#notice_found?()","rubocop::config#obsolete_cops()","rubocop::config#obsolete_parameter_message()","rubocop::config#obsolete_parameters()","rubocop::cop::style::numericliteralprefix#octal_literal_type()","rubocop::cop::style::numericliteralprefix#octal_zero_only?()","rubocop::cop::variableforce::branch::of()","rubocop::cop::lint::formatparametermismatch#offending_node?()","rubocop::cop::rails::exit#offending_node?()","rubocop::cop::internalaffairs::redundantlocationargument#offending_range()","rubocop::cop::internalaffairs::redundantmessageargument#offending_range()","rubocop::cop::layout::indentationwidth#offending_range()","rubocop::cop::layout::multilinemethodcallindentation#offending_range()","rubocop::cop::layout::multilineoperationindentation#offending_range()","rubocop::cop::style::minmax#offending_range()","rubocop::cop::style::lambda#offending_selector?()","rubocop::cop::style::preferredhashmethods#offending_selector?()","rubocop::cop::layout::indentationwidth#offense()","rubocop::cop::layout::spacearoundkeyword#offense()","rubocop::cop::layout::spacearoundoperators#offense()","rubocop::cop::layout::spaceinsideblockbraces#offense()","rubocop::cop::performance::stringreplacement#offense()","rubocop::cop::style::encoding#offense()","rubocop::cop::style::frozenstringliteralcomment#offense()","rubocop::cop::style::redundantparentheses#offense()","rubocop::cop::style::symbolproc#offense()","rubocop::cop::layout::spaceinsidehashliteralbraces#offense?()","rubocop::cop::rails::pluralizationgrammar#offense?()","rubocop::cop::style::characterliteral#offense?()","rubocop::cop::style::lambdacall#offense?()","rubocop::cop::style::redundantconditional#offense?()","rubocop::cop::style::stringliterals#offense?()","rubocop::cop::style::stringliteralsininterpolation#offense?()","rubocop::cop::style::ternaryparentheses#offense?()","rubocop::cop::style::emptyliteral#offense_array_node?()","rubocop::cop::layout::trailingblanklines#offense_detected()","rubocop::cop::performance::flatmap#offense_for_levels()","rubocop::cop::performance::flatmap#offense_for_method()","rubocop::cop::style::emptyliteral#offense_hash_node?()","rubocop::cop::style::next#offense_location()","rubocop::cop::layout::endofline#offense_message()","rubocop::cop::layout::spacearoundoperators#offense_message()","rubocop::cop::style::next#offense_node()","rubocop::cop::lint::shadowedexception#offense_range()","rubocop::cop::team#offenses()","rubocop::formatter::simpletextformatter::report#offenses()","rubocop::cop::lint::syntax::offenses_from_processed_source()","rubocop::cop::performance::sample#offensive?()","rubocop::cop::style::commentedkeyword#offensive?()","rubocop::cop::autocorrectalignment#offset()","rubocop::cop::spaceafterpunctuation#offset()","rubocop::cop::rails::timezone#offset_provided?()","rubocop::cop::lint::duplicatemethods#on_alias()","rubocop::cop::style::alias#on_alias()","rubocop::cop::layout::multilineoperationindentation#on_and()","rubocop::cop::layout::spacearoundkeyword#on_and()","rubocop::cop::layout::spacearoundoperators#on_and()","rubocop::cop::rails::present#on_and()","rubocop::cop::style::andor#on_and()","rubocop::cop::style::safenavigation#on_and()","rubocop::cop::layout::spacearoundoperators#on_and_asgn()","rubocop::cop::style::redundantself#on_and_asgn()","rubocop::cop::naming::variablename#on_arg()","rubocop::cop::naming::variablenumber#on_arg()","rubocop::cop::metrics::parameterlists#on_args()","rubocop::cop::style::optionhash#on_args()","rubocop::cop::style::redundantself#on_args()","rubocop::cop::style::redundantself#on_argument()","rubocop::cop::layout::alignarray#on_array()","rubocop::cop::layout::firstarrayelementlinebreak#on_array()","rubocop::cop::layout::indentarray#on_array()","rubocop::cop::layout::multilinearraybracelayout#on_array()","rubocop::cop::layout::spaceinsidearraypercentliteral#on_array()","rubocop::cop::layout::spaceinsidepercentliteraldelimiters#on_array()","rubocop::cop::lint::percentstringarray#on_array()","rubocop::cop::lint::percentsymbolarray#on_array()","rubocop::cop::style::minmax#on_array()","rubocop::cop::style::percentliteraldelimiters#on_array()","rubocop::cop::style::symbolarray#on_array()","rubocop::cop::style::trailingcommainliteral#on_array()","rubocop::cop::style::unneededcapitalw#on_array()","rubocop::cop::style::wordarray#on_array()","rubocop::cop::style::mutableconstant#on_assignment()","rubocop::cop::lint::duplicatemethods#on_attr()","rubocop::cop::layout::closingparenthesisindentation#on_begin()","rubocop::cop::layout::emptylinebetweendefs#on_begin()","rubocop::cop::layout::indentationconsistency#on_begin()","rubocop::cop::lint::emptyexpression#on_begin()","rubocop::cop::lint::unreachablecode#on_begin()","rubocop::cop::style::redundantparentheses#on_begin()","rubocop::cop::style::semicolon#on_begin()","rubocop::cop::layout::spacearoundoperators#on_binary()","rubocop::cop::layout::accessmodifierindentation#on_block()","rubocop::cop::layout::blockendnewline#on_block()","rubocop::cop::layout::emptylinesaroundblockbody#on_block()","rubocop::cop::layout::indentationwidth#on_block()","rubocop::cop::layout::multilineblocklayout#on_block()","rubocop::cop::layout::spacearoundblockparameters#on_block()","rubocop::cop::layout::spacearoundkeyword#on_block()","rubocop::cop::layout::spacebeforeblockbraces#on_block()","rubocop::cop::layout::spaceinsideblockbraces#on_block()","rubocop::cop::lint::blockalignment#on_block()","rubocop::cop::lint::nextwithoutaccumulator#on_block()","rubocop::cop::lint::redundantwithindex#on_block()","rubocop::cop::lint::redundantwithobject#on_block()","rubocop::cop::lint::uselessaccessmodifier#on_block()","rubocop::cop::metrics::blocklength#on_block()","rubocop::cop::metrics::methodlength#on_block()","rubocop::cop::performance::comparewithblock#on_block()","rubocop::cop::performance::hasheachmethods#on_block()","rubocop::cop::performance::redundantsortby#on_block()","rubocop::cop::performance::timesmap#on_block()","rubocop::cop::rails::actionfilter#on_block()","rubocop::cop::rails::reversiblemigration#on_block()","rubocop::cop::style::blockdelimiters#on_block()","rubocop::cop::style::collectionmethods#on_block()","rubocop::cop::style::eachforsimpleloop#on_block()","rubocop::cop::style::eachwithobject#on_block()","rubocop::cop::style::for#on_block()","rubocop::cop::style::inversemethods#on_block()","rubocop::cop::style::lambda#on_block()","rubocop::cop::style::methodcalledondoendblock#on_block()","rubocop::cop::style::multilineblockchain#on_block()","rubocop::cop::style::next#on_block()","rubocop::cop::style::proc#on_block()","rubocop::cop::style::redundantself#on_block()","rubocop::cop::style::singlelineblockparams#on_block()","rubocop::cop::style::symbolproc#on_block()","rubocop::cop::naming::variablename#on_blockarg()","rubocop::cop::style::redundantself#on_blockarg()","rubocop::cop::layout::spacearoundkeyword#on_break()","rubocop::cop::layout::caseindentation#on_case()","rubocop::cop::layout::elsealignment#on_case()","rubocop::cop::layout::indentationwidth#on_case()","rubocop::cop::layout::spacearoundkeyword#on_case()","rubocop::cop::lint::duplicatecasecondition#on_case()","rubocop::cop::lint::emptywhen#on_case()","rubocop::cop::lint::endalignment#on_case()","rubocop::cop::lint::literalascondition#on_case()","rubocop::cop::performance::casewhensplat#on_case()","rubocop::cop::performance::regexpmatch#on_case()","rubocop::cop::style::conditionalassignment#on_case()","rubocop::cop::style::emptycasecondition#on_case()","rubocop::cop::style::emptyelse#on_case()","rubocop::cop::style::identicalconditionalbranches#on_case()","rubocop::cop::style::missingelse#on_case()","rubocop::cop::layout::spacearoundoperators#on_casgn()","rubocop::cop::naming::constantname#on_casgn()","rubocop::cop::rails::relativedateconstant#on_casgn()","rubocop::cop::style::mutableconstant#on_casgn()","rubocop::cop::enforcesuperclass#on_class()","rubocop::cop::layout::accessmodifierindentation#on_class()","rubocop::cop::layout::emptylinesaroundclassbody#on_class()","rubocop::cop::layout::indentationwidth#on_class()","rubocop::cop::layout::spacearoundoperators#on_class()","rubocop::cop::lint::endalignment#on_class()","rubocop::cop::lint::ineffectiveaccessmodifier#on_class()","rubocop::cop::lint::inheritexception#on_class()","rubocop::cop::lint::uselessaccessmodifier#on_class()","rubocop::cop::metrics::classlength#on_class()","rubocop::cop::naming::classandmodulecamelcase#on_class()","rubocop::cop::style::classandmodulechildren#on_class()","rubocop::cop::style::classmethods#on_class()","rubocop::cop::style::documentation#on_class()","rubocop::cop::style::structinheritance#on_class()","rubocop::cop::style::andor#on_conditionals()","rubocop::cop::lint::unifiedinteger#on_const()","rubocop::cop::rails::date#on_const()","rubocop::cop::rails::timezone#on_const()","rubocop::cop::rails::outputsafety#on_csend()","rubocop::cop::layout::spacearoundoperators#on_cvasgn()","rubocop::cop::naming::variablename#on_cvasgn()","rubocop::cop::naming::variablenumber#on_cvasgn()","rubocop::cop::style::classvars#on_cvasgn()","rubocop::cop::style::orassignment#on_cvasgn()","rubocop::cop::layout::alignparameters#on_def()","rubocop::cop::layout::closingparenthesisindentation#on_def()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#on_def()","rubocop::cop::layout::emptylinesaroundmethodbody#on_def()","rubocop::cop::layout::firstmethodparameterlinebreak#on_def()","rubocop::cop::layout::indentationwidth#on_def()","rubocop::cop::layout::multilinemethoddefinitionbracelayout#on_def()","rubocop::cop::layout::spaceaftermethodname#on_def()","rubocop::cop::lint::defendalignment#on_def()","rubocop::cop::lint::duplicatemethods#on_def()","rubocop::cop::lint::nestedmethoddefinition#on_def()","rubocop::cop::lint::uselesssettercall#on_def()","rubocop::cop::methodcomplexity#on_def()","rubocop::cop::metrics::methodlength#on_def()","rubocop::cop::naming::accessormethodname#on_def()","rubocop::cop::naming::methodname#on_def()","rubocop::cop::naming::predicatename#on_def()","rubocop::cop::performance::redundantblockcall#on_def()","rubocop::cop::rails::delegate#on_def()","rubocop::cop::style::defwithparentheses#on_def()","rubocop::cop::style::documentationmethod#on_def()","rubocop::cop::style::emptymethod#on_def()","rubocop::cop::style::guardclause#on_def()","rubocop::cop::style::methoddefparentheses#on_def()","rubocop::cop::style::methodmissing#on_def()","rubocop::cop::style::nonnilcheck#on_def()","rubocop::cop::style::optionalarguments#on_def()","rubocop::cop::style::redundantbegin#on_def()","rubocop::cop::style::redundantreturn#on_def()","rubocop::cop::style::redundantself#on_def()","rubocop::cop::style::singlelinemethods#on_def()","rubocop::cop::style::trivialaccessors#on_def()","rubocop::cop::layout::spacearoundkeyword#on_defined?()","rubocop::cop::layout::alignparameters#on_defs()","rubocop::cop::layout::closingparenthesisindentation#on_defs()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#on_defs()","rubocop::cop::layout::emptylinesaroundmethodbody#on_defs()","rubocop::cop::layout::firstmethodparameterlinebreak#on_defs()","rubocop::cop::layout::indentationwidth#on_defs()","rubocop::cop::layout::multilinemethoddefinitionbracelayout#on_defs()","rubocop::cop::layout::spaceaftermethodname#on_defs()","rubocop::cop::lint::defendalignment#on_defs()","rubocop::cop::lint::duplicatemethods#on_defs()","rubocop::cop::lint::nestedmethoddefinition#on_defs()","rubocop::cop::lint::uselesssettercall#on_defs()","rubocop::cop::methodcomplexity#on_defs()","rubocop::cop::metrics::methodlength#on_defs()","rubocop::cop::naming::accessormethodname#on_defs()","rubocop::cop::naming::methodname#on_defs()","rubocop::cop::naming::predicatename#on_defs()","rubocop::cop::style::defwithparentheses#on_defs()","rubocop::cop::style::documentationmethod#on_defs()","rubocop::cop::style::emptymethod#on_defs()","rubocop::cop::style::guardclause#on_defs()","rubocop::cop::style::methoddefparentheses#on_defs()","rubocop::cop::style::methodmissing#on_defs()","rubocop::cop::style::nonnilcheck#on_defs()","rubocop::cop::style::redundantbegin#on_defs()","rubocop::cop::style::redundantreturn#on_defs()","rubocop::cop::style::redundantself#on_defs()","rubocop::cop::style::singlelinemethods#on_defs()","rubocop::cop::style::trivialaccessors#on_defs()","heredoc#on_dstr()","rubocop::cop::layout::spaceinsidestringinterpolation#on_dstr()","rubocop::cop::lint::emptyinterpolation#on_dstr()","rubocop::cop::lint::implicitstringconcatenation#on_dstr()","rubocop::cop::lint::literalininterpolation#on_dstr()","rubocop::cop::lint::stringconversionininterpolation#on_dstr()","rubocop::cop::rails::filepath#on_dstr()","rubocop::cop::style::barepercentliterals#on_dstr()","rubocop::cop::style::percentliteraldelimiters#on_dstr()","rubocop::cop::style::stringliterals#on_dstr()","rubocop::cop::style::unneededinterpolation#on_dstr()","rubocop::cop::style::unneededpercentq#on_dstr()","rubocop::cop::style::variableinterpolation#on_dstr()","rubocop::cop::style::flipflop#on_eflipflop()","rubocop::cop::layout::indentationwidth#on_ensure()","rubocop::cop::layout::rescueensurealignment#on_ensure()","rubocop::cop::layout::spacearoundkeyword#on_ensure()","rubocop::cop::lint::emptyensure#on_ensure()","rubocop::cop::lint::ensurereturn#on_ensure()","rubocop::cop::layout::spaceinsiderangeliteral#on_erange()","rubocop::cop::lint::floatoutofrange#on_float()","rubocop::cop::style::numericliterals#on_float()","rubocop::cop::layout::indentationwidth#on_for()","rubocop::cop::layout::spacearoundkeyword#on_for()","rubocop::cop::style::for#on_for()","rubocop::cop::style::next#on_for()","rubocop::cop::style::globalvars#on_gvar()","rubocop::cop::style::specialglobalvars#on_gvar()","rubocop::cop::layout::spacearoundoperators#on_gvasgn()","rubocop::cop::style::globalvars#on_gvasgn()","rubocop::cop::style::orassignment#on_gvasgn()","rubocop::cop::layout::alignhash#on_hash()","rubocop::cop::layout::firsthashelementlinebreak#on_hash()","rubocop::cop::layout::indenthash#on_hash()","rubocop::cop::layout::multilinehashbracelayout#on_hash()","rubocop::cop::layout::spaceinsidehashliteralbraces#on_hash()","rubocop::cop::lint::duplicatedkey#on_hash()","rubocop::cop::style::hashsyntax#on_hash()","rubocop::cop::style::trailingcommainliteral#on_hash()","heredoc#on_heredoc()","rubocop::cop::layout::indentheredoc#on_heredoc()","rubocop::cop::naming::heredocdelimitercase#on_heredoc()","rubocop::cop::naming::heredocdelimiternaming#on_heredoc()","rubocop::cop::layout::elsealignment#on_if()","rubocop::cop::layout::indentationwidth#on_if()","rubocop::cop::layout::spacearoundkeyword#on_if()","rubocop::cop::layout::spacearoundoperators#on_if()","rubocop::cop::lint::assignmentincondition#on_if()","rubocop::cop::lint::conditionposition#on_if()","rubocop::cop::lint::elselayout#on_if()","rubocop::cop::lint::endalignment#on_if()","rubocop::cop::lint::literalascondition#on_if()","rubocop::cop::onnormalifunless#on_if()","rubocop::cop::performance::regexpmatch#on_if()","rubocop::cop::rails::blank#on_if()","rubocop::cop::rails::present#on_if()","rubocop::cop::style::andor#on_if()","rubocop::cop::style::conditionalassignment#on_if()","rubocop::cop::style::guardclause#on_if()","rubocop::cop::style::identicalconditionalbranches#on_if()","rubocop::cop::style::ifinsideelse#on_if()","rubocop::cop::style::ifunlessmodifier#on_if()","rubocop::cop::style::ifunlessmodifierofifunless#on_if()","rubocop::cop::style::multilineifmodifier#on_if()","rubocop::cop::style::multilineternaryoperator#on_if()","rubocop::cop::style::multiplecomparison#on_if()","rubocop::cop::style::negatedif#on_if()","rubocop::cop::style::nestedmodifier#on_if()","rubocop::cop::style::nestedternaryoperator#on_if()","rubocop::cop::style::orassignment#on_if()","rubocop::cop::style::parenthesesaroundcondition#on_if()","rubocop::cop::style::redundantconditional#on_if()","rubocop::cop::style::safenavigation#on_if()","rubocop::cop::style::ternaryparentheses#on_if()","rubocop::cop::style::unlesselse#on_if()","rubocop::cop::style::flipflop#on_iflipflop()","rubocop::cop::style::numericliteralprefix#on_int()","rubocop::cop::style::numericliterals#on_int()","rubocop::cop::layout::spaceinsiderangeliteral#on_irange()","rubocop::cop::layout::spacearoundoperators#on_ivasgn()","rubocop::cop::naming::variablename#on_ivasgn()","rubocop::cop::naming::variablenumber#on_ivasgn()","rubocop::cop::style::orassignment#on_ivasgn()","rubocop::cop::naming::variablename#on_kwarg()","rubocop::cop::layout::emptylinesaroundbeginbody#on_kwbegin()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#on_kwbegin()","rubocop::cop::layout::indentationconsistency#on_kwbegin()","rubocop::cop::layout::indentationwidth#on_kwbegin()","rubocop::cop::layout::spacearoundkeyword#on_kwbegin()","rubocop::cop::lint::unreachablecode#on_kwbegin()","rubocop::cop::layout::spaceaftercolon#on_kwoptarg()","rubocop::cop::lint::circularargumentreference#on_kwoptarg()","rubocop::cop::naming::variablename#on_kwoptarg()","rubocop::cop::naming::variablename#on_kwrestarg()","rubocop::cop::layout::spacearoundoperators#on_lvasgn()","rubocop::cop::naming::variablename#on_lvasgn()","rubocop::cop::naming::variablenumber#on_lvasgn()","rubocop::cop::style::orassignment#on_lvasgn()","rubocop::cop::style::redundantself#on_lvasgn()","rubocop::cop::layout::spacearoundoperators#on_masgn()","rubocop::cop::rails::relativedateconstant#on_masgn()","rubocop::cop::style::parallelassignment#on_masgn()","rubocop::cop::style::trailingunderscorevariable#on_masgn()","rubocop::cop::lint::regexpascondition#on_match_current_line()","rubocop::cop::style::trivialaccessors#on_method_def()","rubocop::cop::layout::accessmodifierindentation#on_module()","rubocop::cop::layout::emptylinesaroundmodulebody#on_module()","rubocop::cop::layout::indentationwidth#on_module()","rubocop::cop::lint::endalignment#on_module()","rubocop::cop::lint::ineffectiveaccessmodifier#on_module()","rubocop::cop::lint::uselessaccessmodifier#on_module()","rubocop::cop::metrics::modulelength#on_module()","rubocop::cop::naming::classandmodulecamelcase#on_module()","rubocop::cop::style::classandmodulechildren#on_module()","rubocop::cop::style::classmethods#on_module()","rubocop::cop::style::documentation#on_module()","rubocop::cop::style::modulefunction#on_module()","rubocop::cop::layout::spacearoundkeyword#on_next()","rubocop::cop::style::emptyelse#on_normal_if_unless()","rubocop::cop::style::ifwithsemicolon#on_normal_if_unless()","rubocop::cop::style::missingelse#on_normal_if_unless()","rubocop::cop::style::multilineifthen#on_normal_if_unless()","rubocop::cop::style::onelineconditional#on_normal_if_unless()","rubocop::cop::style::perlbackrefs#on_nth_ref()","rubocop::cop::layout::spacearoundoperators#on_op_asgn()","rubocop::cop::style::redundantself#on_op_asgn()","rubocop::cop::layout::spacearoundequalsinparameterdefault#on_optarg()","rubocop::cop::lint::circularargumentreference#on_optarg()","rubocop::cop::naming::variablename#on_optarg()","rubocop::cop::layout::multilineoperationindentation#on_or()","rubocop::cop::layout::spacearoundkeyword#on_or()","rubocop::cop::layout::spacearoundoperators#on_or()","rubocop::cop::performance::doublestartendwith#on_or()","rubocop::cop::rails::blank#on_or()","rubocop::cop::rails::present#on_or()","rubocop::cop::style::andor#on_or()","rubocop::cop::layout::spacearoundoperators#on_or_asgn()","rubocop::cop::rails::relativedateconstant#on_or_asgn()","rubocop::cop::style::multilinememoization#on_or_asgn()","rubocop::cop::style::mutableconstant#on_or_asgn()","rubocop::cop::style::redundantself#on_or_asgn()","rubocop::cop::layout::spaceaftercolon#on_pair()","rubocop::cop::layout::spacearoundoperators#on_pair()","rubocop::cop::layout::spaceinsidearraypercentliteral#on_percent_literal()","rubocop::cop::layout::spaceinsidepercentliteraldelimiters#on_percent_literal()","rubocop::cop::lint::percentstringarray#on_percent_literal()","rubocop::cop::lint::percentsymbolarray#on_percent_literal()","rubocop::cop::style::percentliteraldelimiters#on_percent_literal()","rubocop::cop::style::percentqliterals#on_percent_literal()","rubocop::cop::style::unneededcapitalw#on_percent_literal()","rubocop::cop::layout::spacearoundkeyword#on_postexe()","rubocop::cop::lint::endinmethod#on_postexe()","rubocop::cop::style::endblock#on_postexe()","rubocop::cop::layout::spacearoundkeyword#on_preexe()","rubocop::cop::style::beginblock#on_preexe()","rubocop::cop::stringhelp#on_regexp()","rubocop::cop::style::percentliteraldelimiters#on_regexp()","rubocop::cop::style::regexpliteral#on_regexp()","rubocop::cop::style::variableinterpolation#on_regexp()","rubocop::cop::layout::indentationwidth#on_resbody()","rubocop::cop::layout::rescueensurealignment#on_resbody()","rubocop::cop::layout::spacearoundkeyword#on_resbody()","rubocop::cop::layout::spacearoundoperators#on_resbody()","rubocop::cop::lint::handleexceptions#on_resbody()","rubocop::cop::lint::rescueexception#on_resbody()","rubocop::cop::lint::rescuetype#on_resbody()","rubocop::cop::lint::rescuewithouterrorclass#on_resbody()","rubocop::cop::style::rescuemodifier#on_resbody()","rubocop::cop::layout::elsealignment#on_rescue()","rubocop::cop::layout::indentationwidth#on_rescue()","rubocop::cop::layout::spacearoundkeyword#on_rescue()","rubocop::cop::lint::shadowedexception#on_rescue()","rubocop::cop::style::signalexception#on_rescue()","rubocop::cop::naming::variablename#on_restarg()","rubocop::cop::layout::spacearoundkeyword#on_return()","rubocop::cop::lint::nonlocalexitfromiterator#on_return()","rubocop::cop::lint::returninvoidcontext#on_return()","rubocop::cop::style::minmax#on_return()","rubocop::cop::style::returnnil#on_return()","rubocop::cop::trailingcomma#on_same_line?()","rubocop::cop::layout::accessmodifierindentation#on_sclass()","rubocop::cop::layout::emptylinesaroundclassbody#on_sclass()","rubocop::cop::lint::uselessaccessmodifier#on_sclass()","rubocop::cop::bundler::insecureprotocolsource#on_send()","rubocop::cop::checkassignment#on_send()","rubocop::cop::enforcesuperclass#on_send()","rubocop::cop::internalaffairs::deprecatedpositionalarguments#on_send()","rubocop::cop::internalaffairs::nodetypepredicate#on_send()","rubocop::cop::internalaffairs::offenselocationkeyword#on_send()","rubocop::cop::internalaffairs::redundantlocationargument#on_send()","rubocop::cop::internalaffairs::redundantmessageargument#on_send()","rubocop::cop::layout::alignhash#on_send()","rubocop::cop::layout::alignparameters#on_send()","rubocop::cop::layout::closingparenthesisindentation#on_send()","rubocop::cop::layout::dotposition#on_send()","rubocop::cop::layout::emptylinesaroundaccessmodifier#on_send()","rubocop::cop::layout::firstmethodargumentlinebreak#on_send()","rubocop::cop::layout::firstparameterindentation#on_send()","rubocop::cop::layout::indentarray#on_send()","rubocop::cop::layout::indenthash#on_send()","rubocop::cop::layout::indentationwidth#on_send()","rubocop::cop::layout::multilinemethodcallbracelayout#on_send()","rubocop::cop::layout::spaceafternot#on_send()","rubocop::cop::layout::spacearoundkeyword#on_send()","rubocop::cop::layout::spacearoundoperators#on_send()","rubocop::cop::layout::spacebeforefirstarg#on_send()","rubocop::cop::layout::spaceinlambdaliteral#on_send()","rubocop::cop::lint::ambiguousblockassociation#on_send()","rubocop::cop::lint::debugger#on_send()","rubocop::cop::lint::defendalignment#on_send()","rubocop::cop::lint::deprecatedclassmethods#on_send()","rubocop::cop::lint::duplicatemethods#on_send()","rubocop::cop::lint::eachwithobjectargument#on_send()","rubocop::cop::lint::formatparametermismatch#on_send()","rubocop::cop::lint::literalascondition#on_send()","rubocop::cop::lint::multiplecompare#on_send()","rubocop::cop::lint::parenthesesasgroupedexpression#on_send()","rubocop::cop::lint::randone#on_send()","rubocop::cop::lint::requireparentheses#on_send()","rubocop::cop::lint::safenavigationchain#on_send()","rubocop::cop::lint::unneededrequirestatement#on_send()","rubocop::cop::lint::uriescapeunescape#on_send()","rubocop::cop::lint::uriregexp#on_send()","rubocop::cop::lint::uselesscomparison#on_send()","rubocop::cop::naming::predicatename#on_send()","rubocop::cop::performance::caller#on_send()","rubocop::cop::performance::casecmp#on_send()","rubocop::cop::performance::count#on_send()","rubocop::cop::performance::detect#on_send()","rubocop::cop::performance::endwith#on_send()","rubocop::cop::performance::fixedsize#on_send()","rubocop::cop::performance::flatmap#on_send()","rubocop::cop::performance::lstriprstrip#on_send()","rubocop::cop::performance::rangeinclude#on_send()","rubocop::cop::performance::redundantmatch#on_send()","rubocop::cop::performance::redundantmerge#on_send()","rubocop::cop::performance::reverseeach#on_send()","rubocop::cop::performance::sample#on_send()","rubocop::cop::performance::size#on_send()","rubocop::cop::performance::startwith#on_send()","rubocop::cop::performance::stringreplacement#on_send()","rubocop::cop::performance::timesmap#on_send()","rubocop::cop::performance::unfreezestring#on_send()","rubocop::cop::performance::uridefaultparser#on_send()","rubocop::cop::rails::actionfilter#on_send()","rubocop::cop::rails::activesupportaliases#on_send()","rubocop::cop::rails::blank#on_send()","rubocop::cop::rails::date#on_send()","rubocop::cop::rails::delegateallowblank#on_send()","rubocop::cop::rails::dynamicfindby#on_send()","rubocop::cop::rails::enumuniqueness#on_send()","rubocop::cop::rails::exit#on_send()","rubocop::cop::rails::filepath#on_send()","rubocop::cop::rails::findby#on_send()","rubocop::cop::rails::findeach#on_send()","rubocop::cop::rails::hasandbelongstomany#on_send()","rubocop::cop::rails::hasmanyorhasonedependent#on_send()","rubocop::cop::rails::httppositionalarguments#on_send()","rubocop::cop::rails::notnullcolumn#on_send()","rubocop::cop::rails::output#on_send()","rubocop::cop::rails::outputsafety#on_send()","rubocop::cop::rails::pluralizationgrammar#on_send()","rubocop::cop::rails::present#on_send()","rubocop::cop::rails::readwriteattribute#on_send()","rubocop::cop::rails::requestreferer#on_send()","rubocop::cop::rails::reversiblemigration#on_send()","rubocop::cop::rails::safenavigation#on_send()","rubocop::cop::rails::savebang#on_send()","rubocop::cop::rails::scopeargs#on_send()","rubocop::cop::rails::skipsmodelvalidations#on_send()","rubocop::cop::rails::uniqbeforepluck#on_send()","rubocop::cop::rails::unknownenv#on_send()","rubocop::cop::rails::validation#on_send()","rubocop::cop::security::eval#on_send()","rubocop::cop::security::jsonload#on_send()","rubocop::cop::security::marshalload#on_send()","rubocop::cop::security::yamlload#on_send()","rubocop::cop::style::alias#on_send()","rubocop::cop::style::arrayjoin#on_send()","rubocop::cop::style::attr#on_send()","rubocop::cop::style::autoresourcecleanup#on_send()","rubocop::cop::style::blockdelimiters#on_send()","rubocop::cop::style::bracesaroundhashparameters#on_send()","rubocop::cop::style::caseequality#on_send()","rubocop::cop::style::classcheck#on_send()","rubocop::cop::style::collectionmethods#on_send()","rubocop::cop::style::colonmethodcall#on_send()","rubocop::cop::style::conditionalassignment#on_send()","rubocop::cop::style::datetime#on_send()","rubocop::cop::style::dir#on_send()","rubocop::cop::style::doublenegation#on_send()","rubocop::cop::style::emptyliteral#on_send()","rubocop::cop::style::evenodd#on_send()","rubocop::cop::style::formatstring#on_send()","rubocop::cop::style::implicitruntimeerror#on_send()","rubocop::cop::style::inversemethods#on_send()","rubocop::cop::style::lambdacall#on_send()","rubocop::cop::style::methodcallwithargsparentheses#on_send()","rubocop::cop::style::methodcallwithoutargsparentheses#on_send()","rubocop::cop::style::methodcalledondoendblock#on_send()","rubocop::cop::style::mixingrouping#on_send()","rubocop::cop::style::mixinusage#on_send()","rubocop::cop::style::nestedparenthesizedcalls#on_send()","rubocop::cop::style::nilcomparison#on_send()","rubocop::cop::style::nonnilcheck#on_send()","rubocop::cop::style::not#on_send()","rubocop::cop::style::numericpredicate#on_send()","rubocop::cop::style::preferredhashmethods#on_send()","rubocop::cop::style::raiseargs#on_send()","rubocop::cop::style::redundantexception#on_send()","rubocop::cop::style::redundantfreeze#on_send()","rubocop::cop::style::redundantself#on_send()","rubocop::cop::style::send#on_send()","rubocop::cop::style::signalexception#on_send()","rubocop::cop::style::stabbylambdaparentheses#on_send()","rubocop::cop::style::stderrputs#on_send()","rubocop::cop::style::stringmethods#on_send()","rubocop::cop::style::trailingcommainarguments#on_send()","rubocop::cop::style::yodacondition#on_send()","rubocop::cop::style::zerolengthpredicate#on_send()","rubocop::cop::layout::spacearoundoperators#on_special_asgn()","rubocop::cop::lint::unneededsplatexpansion#on_splat()","heredoc#on_str()","rubocop::cop::lint::interpolationcheck#on_str()","rubocop::cop::stringhelp#on_str()","rubocop::cop::style::barepercentliterals#on_str()","rubocop::cop::style::formatstringtoken#on_str()","rubocop::cop::style::percentliteraldelimiters#on_str()","rubocop::cop::style::percentqliterals#on_str()","rubocop::cop::style::unneededpercentq#on_str()","rubocop::cop::layout::spacearoundkeyword#on_super()","rubocop::cop::style::methodcallwithargsparentheses#on_super()","rubocop::cop::lint::booleansymbol#on_sym()","rubocop::cop::style::percentliteraldelimiters#on_sym()","rubocop::cop::style::symbolliteral#on_sym()","rubocop::cop::layout::indentationwidth#on_until()","rubocop::cop::layout::spacearoundkeyword#on_until()","rubocop::cop::lint::assignmentincondition#on_until()","rubocop::cop::lint::conditionposition#on_until()","rubocop::cop::lint::endalignment#on_until()","rubocop::cop::lint::literalascondition#on_until()","rubocop::cop::style::andor#on_until()","rubocop::cop::style::infiniteloop#on_until()","rubocop::cop::style::negatedwhile#on_until()","rubocop::cop::style::nestedmodifier#on_until()","rubocop::cop::style::next#on_until()","rubocop::cop::style::parenthesesaroundcondition#on_until()","rubocop::cop::style::whileuntildo#on_until()","rubocop::cop::style::whileuntilmodifier#on_until()","rubocop::cop::lint::literalascondition#on_until_post()","rubocop::cop::lint::loop#on_until_post()","rubocop::cop::style::andor#on_until_post()","rubocop::cop::style::infiniteloop#on_until_post()","rubocop::cop::layout::spacearoundkeyword#on_when()","rubocop::cop::style::whenthen#on_when()","rubocop::cop::layout::indentationwidth#on_while()","rubocop::cop::layout::spacearoundkeyword#on_while()","rubocop::cop::lint::assignmentincondition#on_while()","rubocop::cop::lint::conditionposition#on_while()","rubocop::cop::lint::endalignment#on_while()","rubocop::cop::lint::literalascondition#on_while()","rubocop::cop::style::andor#on_while()","rubocop::cop::style::infiniteloop#on_while()","rubocop::cop::style::negatedwhile#on_while()","rubocop::cop::style::nestedmodifier#on_while()","rubocop::cop::style::next#on_while()","rubocop::cop::style::parenthesesaroundcondition#on_while()","rubocop::cop::style::whileuntildo#on_while()","rubocop::cop::style::whileuntilmodifier#on_while()","rubocop::cop::lint::literalascondition#on_while_post()","rubocop::cop::lint::loop#on_while_post()","rubocop::cop::style::andor#on_while_post()","rubocop::cop::style::infiniteloop#on_while_post()","heredoc#on_xstr()","rubocop::cop::layout::spaceinsidepercentliteraldelimiters#on_xstr()","rubocop::cop::style::commandliteral#on_xstr()","rubocop::cop::style::percentliteraldelimiters#on_xstr()","rubocop::cop::style::variableinterpolation#on_xstr()","rubocop::cop::layout::spacearoundkeyword#on_yield()","rubocop::cop::style::methodcallwithargsparentheses#on_yield()","rubocop::cop::layout::spacearoundkeyword#on_zsuper()","rubocop::cop::style::classandmodulechildren#one_child?()","rubocop::cop::style::redundantparentheses#only_begin_arg?()","rubocop::cop::style::redundantparentheses#only_closing_paren_before_comma?()","rubocop::optionsvalidator#only_includes_unneeded_disable?()","rubocop::cop::multilineliteralbracelayout#opening_brace_on_same_line?()","rubocop::ast::blocknode#opening_delimiter()","rubocop::cop::layout::multilinemethodcallindentation#operation_rhs()","rubocop::ast::keywordsplatnode#operator()","rubocop::ast::predicateoperatornode#operator()","rubocop::cop::variableforce::assignment#operator()","rubocop::cop::variableforce::assignment#operator_assignment?()","rubocop::cop::lint::uselessassignment#operator_assignment_message()","rubocop::cop::variableforce::assignment#operator_assignment_node()","rubocop::ast::methodidentifierpredicates#operator_method?()","rubocop::cop::layout::multilinemethodcallindentation#operator_rhs?()","rubocop::cop::layout::spacearoundoperators#operator_with_regular_syntax?()","rubocop::cop::style::next#opposite_kw()","rubocop::cop::style::not#opposite_method?()","rubocop::cop::configurableenforcedstyle#opposite_style_detected()","rubocop::cop::style::characterliteral#opposite_style_detected()","rubocop::options#option()","rubocop::configstore#options_config=()","rubocop::formatter::offensecountformatter#ordered_offense_counts()","rubocop::formatter::worstoffendersformatter#ordered_offense_counts()","rubocop::cop::naming::filename#other_message()","rubocop::cop::layout::indentationwidth#other_offense_in_same_range?()","rubocop::formatter::disabledconfigformatter#output_cop()","rubocop::formatter::disabledconfigformatter#output_cop_comments()","rubocop::formatter::disabledconfigformatter#output_cop_config()","rubocop::formatter::disabledconfigformatter#output_cop_param_comments()","rubocop::formatter::disabledconfigformatter#output_exclude_list()","rubocop::formatter::disabledconfigformatter#output_exclude_path()","rubocop::formatter::disabledconfigformatter#output_offending_files()","rubocop::formatter::disabledconfigformatter#output_offenses()","rubocop::cop::layout::commentindentation#own_line_comment?()","rubocop::ast::hashnode#pairs()","rubocop::ast::hashnode#pairs_on_same_line?()","rubocop::cop::style::redundantparentheses#parens_allowed?()","rubocop::cop::parentheses#parens_required?()","rubocop::cop::lint::nextwithoutaccumulator#parent_block_node()","rubocop::cop::style::stabbylambdaparentheses#parentheses?()","rubocop::cop::style::ifunlessmodifier#parenthesize?()","rubocop::ast::parameterizednode#parenthesized?()","rubocop::cop::style::ternaryparentheses#parenthesized?()","rubocop::cop::style::numericpredicate#parenthesized_source()","rubocop::cop::badge::parse()","rubocop::cop::cop#parse()","rubocop::magiccomment::parse()","rubocop::options#parse()","rubocop::processedsource#parse()","rubocop::rspec::expectoffense::annotatedsource::parse()","cophelper#parse_source()","rubocop::processedsource#parser_class()","rubocop::cop::lint::unneededsplatexpansion#part_of_an_array?()","rubocop::cop::ignorednode#part_of_ignored_node?()","rubocop::cop::naming::filename#partial_matcher!()","rubocop::cop::style::blockcomments#parts()","rubocop::config#path_relative_to_config()","rubocop::config#patterns_to_exclude()","rubocop::config#patterns_to_include()","rubocop::cop::lint::formatparametermismatch#percent?()","rubocop::ast::arraynode#percent_literal?()","rubocop::cop::percentliteral#percent_literal?()","rubocop::cop::rails::savebang#persisted_referenced?()","rubocop::cop::layout::spaceinsideblockbraces#pipe?()","rubocop::cop::performance::hasheachmethods#plain_range()","rubocop::rspec::expectoffense::annotatedsource#plain_source()","rubocop::cop::rails::pluralizationgrammar#plural_method?()","rubocop::cop::rails::pluralizationgrammar#plural_receiver?()","rubocop::cop::rails::pluralizationgrammar#pluralize()","rubocop::formatter::textutil#pluralize()","rubocop::cop::variableforce::variabletable#pop_scope()","rubocop::cop::internalaffairs::deprecatedpositionalarguments#positional_arguments()","rubocop::cop::lint::duplicatemethods#possible_dsl?()","rubocop::formatter::htmlformatter::erbcontext#possible_ellipses()","rubocop::config#possibly_include_hidden?()","rubocop::cop::layout::spacearoundkeyword#preceded_by_operator?()","rubocop::cop::documentationcomment#preceding_comment?()","rubocop::cop::layout::extraspacing#preceding_line()","rubocop::cop::documentationcomment#preceding_lines()","rubocop::cop::defnode#preceding_non_public_modifier?()","rubocop::cop::util#preceed?()","rubocop::ast::methodidentifierpredicates#predicate_method?()","rubocop::cop::naming::predicatename#predicate_prefixes()","rubocop::cop::naming::predicatename#predicate_whitelist()","rubocop::cop::lint::inheritexception#preferred_base_class()","rubocop::cop::percentliteral#preferred_delimiters()","rubocop::cop::style::commandliteral#preferred_delimiters()","rubocop::cop::style::regexpliteral#preferred_delimiters()","rubocop::cop::percentliteral#preferred_delimiters_config()","rubocop::cop::percentliteral#preferred_delimiters_for()","rubocop::cop::methodpreference#preferred_method()","rubocop::cop::performance::detect#preferred_method()","rubocop::cop::rails::actionfilter#preferred_method()","rubocop::cop::rails::validation#preferred_method()","rubocop::cop::methodpreference#preferred_methods()","rubocop::cop::style::specialglobalvars#preferred_names()","rubocop::cop::style::emptyliteral#preferred_string_literal()","rubocop::cop::naming::predicatename#prefix_blacklist()","rubocop::cop::rails::delegate#prefixed_method_name()","rubocop::cop::commissioner#prepare()","rubocop::cop::layout::emptylinebetweendefs#prev_node()","rubocop::cop::layout::emptylines#previous_and_current_lines_empty?()","rubocop::cop::layout::firstparameterindentation#previous_code_line()","rubocop::cop::bundler::orderedgems#previous_declaration()","rubocop::cop::gemspec::ordereddependencies#previous_declaration()","rubocop::cop::layout::emptylinesaroundaccessmodifier#previous_line_empty?()","rubocop::cop::layout::emptylinesaroundaccessmodifier#previous_line_ignoring_comments()","rubocop::cop::layout::emptylinesaroundbody#previous_line_ignoring_comments()","rubocop::cop::lint::literalascondition#primitive_array?()","rubocop::cli#print_available_cops()","rubocop::cli#print_cop_details()","rubocop::cli#print_cops_of_department()","rubocop::cop::lint::literalininterpolation#prints_as_self?()","rubocop::cop::rails::delegate#private_or_protected_before()","rubocop::cop::rails::delegate#private_or_protected_delegation()","rubocop::cop::rails::delegate#private_or_protected_inline()","rubocop::cop::style::blockdelimiters#procedural_method?()","rubocop::cop::percentliteral#process()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#process_assignment()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#process_assignment_node()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#process_binary_operator_assignment()","rubocop::cop::team#process_commissioner_errors()","rubocop::cop::style::parenthesesaroundcondition#process_control_op()","rubocop::targetfinder#process_explicit_path()","rubocop::runner#process_file()","rubocop::cop::style::andor#process_logical_operator()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#process_logical_operator_assignment()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#process_multiple_assignment()","rubocop::cop::performance::doublestartendwith#process_source()","rubocop::formatter::fuubarstyleformatter#progressbar_color()","rubocop::cop::style::blockdelimiters#proper_block_style?()","rubocop::cop::layout::dotposition#proper_dot_position?()","rubocop::cop::style::preferredhashmethods#proper_method_name()","rubocop::cop::variableforce::variabletable#push_scope()","rubocop::cop::trailingcomma#put_comma()","rubocop::cop::badge#qualified?()","rubocop::commentconfig#qualified_cop_name()","rubocop::cop::cop::qualified_cop_name()","rubocop::cop::registry#qualified_cop_name()","rubocop::cop::lint::duplicatemethods#qualified_name()","rubocop::cop::registry#qualify_badge()","rubocop::cop::layout::leadingcommentspace#rackup_config_file?()","rubocop::cop::layout::leadingcommentspace#rackup_options?()","rubocop::cop::safemode#rails?()","rubocop::cop::safemode#rails_safe_mode?()","rubocop::formatter::colorizable#rainbow()","rubocop::cop::style::redundantparentheses#raised_to_power_negative_numeric?()","rubocop::cop::performance::stringreplacement#range()","rubocop::cop::style::unlesselse#range_between_condition_and_else()","rubocop::cop::style::unlesselse#range_between_else_and_end()","rubocop::cop::spaceinside#range_between_tokens()","rubocop::cop::style::trailingunderscorevariable#range_for_parentheses()","rubocop::cop::layout::spaceinsidehashliteralbraces#range_of_space_to_the_left()","rubocop::cop::layout::spaceinsidehashliteralbraces#range_of_space_to_the_right()","rubocop::cop::performance::sample#range_size()","rubocop::cop::rails::readwriteattribute#read_attribute_replacement()","rubocop::cop::offense#real_column()","rubocop::ast::defnode#receiver()","rubocop::ast::methoddispatchnode#receiver()","rubocop::cop::layout::multilinemethodcallindentation#receiver_alignment_base()","rubocop::cop::internalaffairs::redundantlocationargument#redundant_location_argument()","rubocop::cop::style::stabbylambdaparentheses#redundant_parentheses?()","rubocop::cop::style::ternaryparentheses#redundant_parentheses_enabled?()","rubocop::cop::variableforce::assignment#reference!()","rubocop::cop::variableforce::variable#reference!()","rubocop::cop::messageannotator#reference_url()","rubocop::cop::variableforce::variabletable#reference_variable()","rubocop::cop::variableforce::variable#referenced?()","rubocop::cop::naming::filename#regex()","rubocop::cop::layout::spaceinsidepercentliteraldelimiters#regex_matches()","rubocop::cop::variableforce::assignment#regexp_named_capture?()","rubocop::cop::performance::hasheachmethods#register_each_offense()","rubocop::cop::performance::hasheachmethods#register_kv_offense()","rubocop::cop::bundler::duplicatedgem#register_offense()","rubocop::cop::lint::blockalignment#register_offense()","rubocop::cop::lint::loop#register_offense()","rubocop::cop::lint::uriregexp#register_offense()","rubocop::cop::metrics::linelength#register_offense()","rubocop::cop::orderedgemnode#register_offense()","rubocop::cop::performance::detect#register_offense()","rubocop::cop::performance::flatmap#register_offense()","rubocop::cop::rails::activesupportaliases#register_offense()","rubocop::cop::rails::filepath#register_offense()","rubocop::cop::registry#registered?()","rubocop::ast::regexpnode#regopt()","rubocop::cop::style::redundantself#regular_method_call?()","rubocop::cop::layout::spacebeforefirstarg#regular_method_call_with_arguments?()","rubocop::cop::layout::spacearoundoperators#regular_operator?()","rubocop::cop::style::next#reindent()","rubocop::cop::style::next#reindent_line()","rubocop::cop::style::next#reindentable_lines()","rubocop::config#reject_mutually_exclusive_defaults()","rubocop::config#reject_obsolete_cops_and_parameters()","rubocop::cop::rails::relativedateconstant#relative_date_method?()","rubocop::pathutil#relative_path()","rubocop::cop::layout::multilinemethodcallindentation#relative_to_receiver_message()","rubocop::cop::lint::ambiguousoperator#relevant_diagnostic?()","rubocop::cop::lint::ambiguousregexpliteral#relevant_diagnostic?()","rubocop::cop::lint::uselesselsewithoutrescue#relevant_diagnostic?()","rubocop::cop::cop#relevant_file?()","rubocop::cop::internalaffairs::uselessmessageassertion#relevant_file?()","rubocop::cop::layout::multilinemethodcallindentation#relevant_node?()","rubocop::cop::layout::multilineoperationindentation#relevant_node?()","rubocop::resultcache#relevant_options_digest()","rubocop::cop::autocorrectalignment#remove()","rubocop::cop::corrector#remove()","rubocop::cop::style::bracesaroundhashparameters#remove_braces()","rubocop::cop::style::bracesaroundhashparameters#remove_braces_with_whitespace()","rubocop::cop::lint::unneededsplatexpansion#remove_brackets()","rubocop::resultcache::remove_files()","rubocop::cop::commissioner#remove_irrelevant_cops()","rubocop::cop::corrector#remove_leading()","rubocop::cop::style::lambda#remove_leading_whitespace()","rubocop::resultcache::remove_oldest_files()","rubocop::cop::layout::extraspacing#remove_optarg_equals()","rubocop::cop::style::ternarycorrector::remove_parentheses()","rubocop::cop::corrector#remove_preceding()","rubocop::cop::performance::stringreplacement#remove_second_param()","rubocop::cop::lint::blockalignment#remove_space_before()","rubocop::cop::corrector#remove_trailing()","rubocop::cop::style::lambda#remove_trailing_whitespace()","rubocop::cop::style::lambda#remove_unparenthesized_whitespace()","rubocop::cop::style::conditionalcorrectorhelper#remove_whitespace_in_branches()","rubocop::formatter::htmlformatter#render_html()","rubocop::cop::performance::casewhensplat#reorder_condition()","rubocop::cop::performance::casewhensplat#reordering_correction()","rubocop::cop::lint::duplicatecasecondition#repeated_condition?()","rubocop::cop::corrector#replace()","rubocop::cop::style::infiniteloop#replace_begin_end_with_modifier()","rubocop::cop::style::blockdelimiters#replace_braces_with_do_end()","rubocop::cop::style::conditionalcorrectorhelper#replace_branch_assignment()","rubocop::cop::style::blockdelimiters#replace_do_end_with_braces()","rubocop::cop::performance::stringreplacement#replace_method()","rubocop::cop::style::infiniteloop#replace_source()","rubocop::cop::layout::caseindentation#replacement()","rubocop::cop::performance::casewhensplat#replacement()","rubocop::cop::rails::blank#replacement()","rubocop::cop::rails::present#replacement()","rubocop::cop::rails::safenavigation#replacement()","rubocop::cop::style::numericpredicate#replacement()","rubocop::cop::style::onelineconditional#replacement()","rubocop::cop::style::specialglobalvars#replacement()","rubocop::cop::style::zerolengthpredicate#replacement()","rubocop::cop::style::redundantconditional#replacement_condition()","rubocop::cop::lint::deprecatedclassmethods#replacement_method()","rubocop::cop::performance::stringreplacement#replacement_method()","rubocop::cop::style::attr#replacement_method()","rubocop::cop::style::evenodd#replacement_method()","rubocop::cop::style::nestedmodifier#replacement_operator()","rubocop::cop::style::emptyliteral#replacement_range()","rubocop::cop::style::numericpredicate#replacement_supported?()","rubocop::formatter::clangstyleformatter#report_file()","rubocop::formatter::simpletextformatter#report_file()","rubocop::formatter::progressformatter#report_file_as_mark()","rubocop::formatter::clangstyleformatter#report_highlighted_area()","rubocop::formatter::tapformatter#report_highlighted_area()","rubocop::formatter::clangstyleformatter#report_line()","rubocop::formatter::tapformatter#report_line()","rubocop::formatter::clangstyleformatter#report_offense()","rubocop::formatter::tapformatter#report_offense()","rubocop::cop::configurableformatting#report_opposing_styles()","rubocop::formatter::offensecountformatter#report_summary()","rubocop::formatter::simpletextformatter#report_summary()","rubocop::formatter::worstoffendersformatter#report_summary()","rubocop::remoteconfig#request()","rubocop::cop::generator::requirefileinjector#require_exists?()","rubocop::cop::style::documentationmethod#require_for_non_public_methods?()","rubocop::cop::style::methoddefparentheses#require_parentheses?()","rubocop::cop::style::numericpredicate#require_parentheses?()","rubocop::cop::style::ternaryparentheses#require_parentheses?()","rubocop::cop::style::ternaryparentheses#require_parentheses_when_complex?()","rubocop::cop::generator#require_path()","rubocop::cop::generator::requirefileinjector#require_path_fragments()","rubocop::cop::style::barepercentliterals#requires_bare_percent?()","rubocop::resultcache::requires_file_removal?()","rubocop::cop::style::unneededcapitalw#requires_interpolation?()","rubocop::cop::style::nestedmodifier#requires_parens?()","rubocop::cop::style::not#requires_parens?()","rubocop::cop::style::onelineconditional#requires_parentheses?()","rubocop::cop::style::barepercentliterals#requires_percent_q?()","rubocop::cop::rescuenode#rescue_modifier?()","rubocop::cop::lint::shadowedexception#rescued_exceptions()","rubocop::cop::commissioner#reset_callbacks()","rubocop::cop::commissioner#reset_errors()","rubocop::cop::registry#resolve_badge()","rubocop::cop::style::symbolproc#resolve_block_method_name()","rubocop::configloaderresolver#resolve_inheritance()","rubocop::configloaderresolver#resolve_inheritance_from_gems()","rubocop::configloaderresolver#resolve_requires()","rubocop::ast::parameterizednode#rest_argument?()","rubocop::cop::style::parallelassignment#return_of_method_call?()","rubocop::cop::style::eachwithobject#return_value()","rubocop::cop::lint::nonlocalexitfromiterator#return_value?()","rubocop::cop::rails::savebang#return_value_assigned?()","rubocop::cop::style::blockdelimiters#return_value_chaining?()","rubocop::cop::lint::uselessassignment#return_value_node_of_scope()","rubocop::cop::style::blockdelimiters#return_value_of_scope?()","rubocop::cop::style::blockdelimiters#return_value_used?()","rubocop::cop::style::yodacondition#reverse_comparison()","rubocop::cop::style::trailingunderscorevariable#reverse_index()","rubocop::cop::lint::ineffectiveaccessmodifier#revert_method_uselessness()","rubocop::cop::corrector#rewrite()","rubocop::cop::performance::redundantmerge#rewrite_with_modifier()","rubocop::ast::binaryoperatornode#rhs()","rubocop::cop::rails::exit#right_argument_count?()","rubocop::cop::rails::savebang#right_assignment_node()","rubocop::cop::layout::spaceinsidehashliteralbraces#right_brace?()","rubocop::cop::style::bracesaroundhashparameters#right_brace_and_space()","rubocop::cop::style::nestedmodifier#right_hand_operand()","rubocop::cop::rails::exit#right_method_name?()","rubocop::cop::rails::exit#right_receiver?()","rubocop::cop::spaceinside::brackets#right_side?()","rubocop::ast::methoddispatchnode#root_node?()","rubocop::resultcache#rubocop_checksum()","rubocop::cop::documentationcomment#rubocop_directive_comment?()","rubocop::cop::generator::requirefileinjector#rubocop_root_file_path()","rubocop::cop::style::hashsyntax#ruby19_check()","rubocop::cop::style::hashsyntax#ruby19_no_mixed_keys_check()","rubocop::targetfinder#ruby_executable?()","rubocop::targetfinder#ruby_extension?()","rubocop::targetfinder#ruby_file?()","rubocop::targetfinder#ruby_filename?()","rubocop::cli#run()","rubocop::nodepattern::compiler#run()","rubocop::runner#run()","rubocop::raketask#run_cli()","rubocop::cop::variableforce::branchable#run_exclusively_with?()","rubocop::cop::force#run_hook()","rubocop::ast::sexp#s()","rubocop::cop::safeassignment#safe_assignment_allowed?()","rubocop::cop::rails::date#safe_chain?()","rubocop::cop::rails::timezone#safe_method()","rubocop::cop::safemode#safe_mode?()","rubocop::cop::layout::spacearoundkeyword#safe_navigation_call?()","rubocop::cop::rails::date#safe_to_time?()","rubocop::ast::hashelementnode#same_line?()","rubocop::cop::util#same_line?()","rubocop::cop::style::methodcallwithoutargsparentheses#same_name_assignment?()","rubocop::cop::performance::sample#sample_arg()","rubocop::cop::performance::sample#sample_size()","rubocop::cop::performance::sample#sample_size_for_one_arg()","rubocop::cop::performance::sample#sample_size_for_two_args()","rubocop::cop::naming::methodname#sanitize_name()","rubocop::resultcache#save()","rubocop::runner#save_in_cache()","rubocop::cop::lint::uselesssettercall::methodvariabletracker#scan()","rubocop::cop::variableforce::scope#scan_node()","rubocop::cop::variableforce::assignment#scope()","rubocop::cop::performance::regexpmatch#scope_body()","rubocop::cop::performance::regexpmatch#scope_root()","rubocop::cop::variableforce::variabletable#scope_stack()","rubocop::cop::style::alias#scope_type()","rubocop::cop::lint::nonlocalexitfromiterator#scoped_node?()","rubocop::cop::style::returnnil#scoped_node?()","rubocop::cop::lint::nestedmethoddefinition#scoping_method_call?()","rubocop::cop::performance::redundantmerge::eachwithobjectinspector#second_argument()","rubocop::cop::registry#select()","rubocop::cli#selected_cops_of_department()","rubocop::cop::layout::dotposition#selector_range()","rubocop::ast::methoddispatchnode#self_receiver?()","rubocop::ast::methodidentifierpredicates#self_receiver?()","rubocop::cop::layout::multilinemethodcallindentation#semantic_alignment_base()","rubocop::cop::layout::multilinemethodcallindentation#semantic_alignment_node()","rubocop::cop::style::blockdelimiters#semantic_block_style?()","rubocop::cop::style::blockdelimiters#semantic_message()","rubocop::ast::predicateoperatornode#semantic_operator?()","rubocop::ast::blocknode#send_node()","rubocop::cop::style::mixingrouping#separate_mixins()","rubocop::cop::style::mixingrouping#separated_style?()","rubocop::cop::hashalignment::valuealignment#separator_delta()","rubocop::cop::layout::indenthash#separator_style?()","rubocop::cacheddata#serialize_offense()","rubocop::cop::lint::uselesssettercall#setter_call_to_local_variable?()","rubocop::ast::methoddispatchnode#setter_method?()","rubocop::cop::lint::returninvoidcontext#setter_method?()","rubocop::cop::style::conditionalassignmenthelper#setter_method?()","rubocop::raketask#setup_ivars()","rubocop::raketask#setup_subtasks()","rubocop::cop::layout::leadingcommentspace#shebang?()","rubocop::cop::naming::filename#shebang?()","rubocop::cop::style::copyright#shebang_token?()","rubocop::cop::style::numericliterals#short_group_regex()","rubocop::cop::layout::multilineoperationindentation#should_align?()","rubocop::cop::layout::multilinemethodcallindentation#should_align_with_base?()","rubocop::cop::layout::extraspacing#should_aligned_with_preceding_line?()","rubocop::cop::variableforce::variable#should_be_unused?()","rubocop::cop::trailingcomma#should_have_comma?()","rubocop::cop::layout::multilinemethodcallindentation#should_indent_relative_to_receiver?()","rubocop::cop::style::mixingrouping#sibling_mixins()","rubocop::cop::lint::uselessassignment#similar_name_message()","rubocop::stringutil#similarity()","rubocop::cop::style::next#simple_if_without_break?()","rubocop::cop::style::eachwithobject#simple_method_arg?()","rubocop::cop::style::unneededinterpolation#single_child?()","rubocop::cop::style::unneededinterpolation#single_interpolation?()","rubocop::ast::blocknode#single_line?()","rubocop::cop::statementmodifier#single_line_as_modifier?()","rubocop::ast::conditionalnode#single_line_condition?()","rubocop::cop::style::conditionalassignment#single_line_conditions_only?()","rubocop::cop::layout::multilinemethodcallbracelayout#single_line_ignoring_receiver?()","rubocop::cop::style::unneededinterpolation#single_variable_interpolation?()","rubocop::cop::rails::pluralizationgrammar#singular_method?()","rubocop::cop::rails::pluralizationgrammar#singular_receiver?()","rubocop::cop::rails::pluralizationgrammar#singularize()","rubocop::cop::layout::indentationwidth#skip_check?()","rubocop::cop::lint::assignmentincondition#skip_children?()","rubocop::cop::style::regexpliteral#slash_literal?()","rubocop::cop::style::formatstringtoken#slice_source()","rubocop::cop::performance::comparewithblock#slow_compare?()","rubocop::cop::arrayminsize#smallest_percent_size()","rubocop::config#smart_loaded_path()","rubocop::formatter::disabledlinesformatter#smart_path()","rubocop::pathutil#smart_path()","rubocop::cop::generator#snake_case()","rubocop::cop::registry#sort!()","rubocop::cop::performance::redundantsortby#sort_by_range()","rubocop::cop::lint::shadowedexception#sorted?()","rubocop::cop::style::parallelassignment::genericcorrector#source()","rubocop::formatter::htmlformatter::erbcontext#source_after_highlight()","rubocop::formatter::htmlformatter::erbcontext#source_before_highlight()","rubocop::cop::performance::stringreplacement#source_from_regex_constructor()","rubocop::cop::performance::stringreplacement#source_from_regex_literal()","rubocop::cop::offense#source_line()","rubocop::cop::lint::duplicatemethods#source_location()","rubocop::cop::generator#source_path()","rubocop::cop::bundler::insecureprotocolsource#source_range()","rubocop::cop::performance::sample#source_range()","rubocop::cop::performance::count#source_starting_at()","rubocop::cop::layout::spaceinsideblockbraces#space()","rubocop::cop::layout::spaceinlambdaliteral#space_after_arrow?()","rubocop::cop::layout::spacearoundkeyword#space_after_missing?()","rubocop::cop::layout::initialindentation#space_before()","rubocop::cop::layout::spacearoundkeyword#space_before_missing?()","rubocop::cop::surroundingspace#space_between?()","rubocop::cop::layout::spacebeforeblockbraces#space_detected()","rubocop::cop::spaceafterpunctuation#space_forbidden_before_rcurly?()","rubocop::cop::layout::spaceinsideblockbraces#space_inside_left_brace()","rubocop::cop::layout::spaceinsideblockbraces#space_inside_right_brace()","rubocop::cop::layout::spacebeforeblockbraces#space_missing()","rubocop::cop::spaceafterpunctuation#space_missing?()","rubocop::cop::spacebeforepunctuation#space_missing?()","rubocop::cop::layout::spaceinsidestringinterpolation#space_on_any_side?()","rubocop::cop::layout::spacearoundequalsinparameterdefault#space_on_both_sides?()","rubocop::cop::layout::spaceinsidestringinterpolation#space_on_each_side?()","rubocop::cop::layout::spaceinsidehashliteralbraces#space_range()","rubocop::cop::lint::parenthesesasgroupedexpression#space_range()","rubocop::cop::spacebeforepunctuation#space_required_after?()","rubocop::cop::spacebeforepunctuation#space_required_after_lcurly?()","rubocop::cop::spaceafterpunctuation#space_required_before?()","rubocop::cop::layout::spaceaftercomma#space_style_before_rcurly()","rubocop::cop::layout::spaceaftersemicolon#space_style_before_rcurly()","rubocop::cop::lint::parenthesesasgroupedexpression#spaces_before_left_parenthesis()","rubocop::cop::generator#spec_path()","rubocop::cop::layout::firstparameterindentation#special_inner_call_indentation?()","rubocop::cop::lint::literalininterpolation#special_keyword?()","rubocop::cop::rails::httppositionalarguments#special_keyword_arg?()","rubocop::cop::layout::indentationwidth#special_modifier?()","rubocop::cop::layout::spaceinsidebrackets#specifics()","rubocop::cop::layout::spaceinsideparens#specifics()","rubocop::magiccomment#specified?()","rubocop::cop::lint::formatparametermismatch#splat_args?()","rubocop::ast::parameterizednode#splat_argument?()","rubocop::cop::performance::casewhensplat#splat_offenses()","rubocop::cop::style::trailingunderscorevariable#splat_variable_before?()","rubocop::cop::style::annotationcomment#split_comment()","rubocop::cop::style::formatstringtoken#split_token()","rubocop::cop::lint::formatparametermismatch#sprintf?()","rubocop::ast::arraynode#square_brackets?()","rubocop::cop::style::stabbylambdaparentheses#stabby_lambda_with_args?()","rubocop::cop::style::lineendconcatenation#standard_string_literal?()","rubocop::cop::lint::blockalignment#start_for_block_node()","rubocop::cop::lint::endalignment#start_line_range()","rubocop::cop::lint::uselessaccessmodifier#start_of_new_scope?()","rubocop::cop::style::unneededpercentq#start_with_percent_q_variant?()","rubocop::cop::lint::scriptpermission#start_with_shebang?()","rubocop::formatter::baseformatter#started()","rubocop::formatter::disabledlinesformatter#started()","rubocop::formatter::fuubarstyleformatter#started()","rubocop::formatter::htmlformatter#started()","rubocop::formatter::jsonformatter#started()","rubocop::formatter::offensecountformatter#started()","rubocop::formatter::progressformatter#started()","rubocop::formatter::simpletextformatter#started()","rubocop::formatter::tapformatter#started()","rubocop::formatter::worstoffendersformatter#started()","rubocop::cop::layout::indentationwidth#starts_with_access_modifier?()","rubocop::cop::rails::dynamicfindby#static_method_name()","rubocop::cop::style::stderrputs#stderr_gvar?()","rubocop::cop::style::stderrputs#stderr_puts_range()","rubocop::cop::lint::implicitstringconcatenation#str_content()","rubocop::cop::style::formatstringtoken#str_contents()","rubocop::cop::lint::implicitstringconcatenation#string_literal?()","rubocop::cop::style::unneededpercentq#string_literal?()","rubocop::cop::layout::tab#string_literal_lines()","rubocop::cop::style::emptyliteral#string_literals_config()","rubocop::cop::style::percentliteraldelimiters#string_source()","rubocop::cop::rails::filepath#string_with_slash?()","rubocop::cop::util#stripped_source_upto()","rubocop::cop::configurableenforcedstyle#style()","rubocop::cop::layout::emptylinesaroundbeginbody#style()","rubocop::cop::layout::emptylinesaroundexceptionhandlingkeywords#style()","rubocop::cop::layout::emptylinesaroundmethodbody#style()","rubocop::cop::layout::indentheredoc#style()","rubocop::cop::configurableenforcedstyle#style_detected()","rubocop::cop::layout::spacebeforeblockbraces#style_for_empty_braces()","rubocop::cop::layout::spaceinsideblockbraces#style_for_empty_braces()","rubocop::runner#style_guide_cops_only?()","rubocop::cop::messageannotator#style_guide_url()","rubocop::cop::configurableenforcedstyle#style_parameter_name()","rubocop::cop::endkeywordalignment#style_parameter_name()","rubocop::cop::layout::spacearoundblockparameters#style_parameter_name()","rubocop::cop::lint::blockalignment#style_parameter_name()","rubocop::cop::rails::uniqbeforepluck#style_parameter_name()","rubocop::cop::trailingcomma#style_parameter_name()","rubocop::formatter::simpletextformatter::report#summary()","rubocop::cop::style::symbolproc#super?()","rubocop::cop::autocorrectlogic#support_autocorrect?()","rubocop::cop::targetrailsversion#support_target_rails_version?()","rubocop::cop::targetrubyversion#support_target_ruby_version?()","rubocop::cop::configurableenforcedstyle#supported_styles()","rubocop::cop::layout::multilineassignmentlayout#supported_types()","rubocop::cop::style::optionhash#suspicious_name?()","rubocop::cop::orderedgemnode#swap_range()","rubocop::cop::style::hashsyntax#sym_indices?()","rubocop::cop::util#symbol_without_quote?()","rubocop::cop::style::symbolarray#symbols_contain_spaces?()","rubocop::resultcache#symlink_protection_triggered?()","rubocop::cop::layout::multilinemethodcallindentation#syntactic_alignment_base()","rubocop::cop::lint::shadowedexception#system_call_err?()","rubocop::cop::style::conditionalassignmenthelper#tail()","rubocop::cop::style::identicalconditionalbranches#tail()","rubocop::cop::style::orassignment#take_variable_and_default_from_ternary()","rubocop::cop::style::orassignment#take_variable_and_default_from_unless()","rubocop::cop::style::singlelineblockparams#target_args()","rubocop::targetfinder#target_files_in_dir()","rubocop::cop::generator::requirefileinjector#target_line()","rubocop::cop::layout::alignparameters#target_method_lineno()","rubocop::config#target_rails_version()","rubocop::cop::cop#target_rails_version()","rubocop::config#target_ruby_source()","rubocop::config#target_ruby_version()","rubocop::cop::cop#target_ruby_version()","rubocop::configloader::target_ruby_version_to_f!()","rubocop::cop::lint::rescueexception#targets_exception?()","rubocop::cop::style::ternarycorrector::ternary()","rubocop::ast::ifnode#ternary?()","rubocop::cop::style::conditionalassignment#ternary_condition?()","rubocop::ast::whennode#then?()","rubocop::cop::performance::redundantmerge#to_assignments()","rubocop::config#to_h()","rubocop::cop::registry#to_h()","rubocop::config#to_hash()","rubocop::targetfinder#to_inspect?()","rubocop::cacheddata#to_json()","rubocop::cop::style::ifunlessmodifier#to_modifier_form()","rubocop::cop::naming::filename#to_module_name()","rubocop::cop::naming::filename#to_namespace()","rubocop::cop::style::multilineifmodifier#to_normal_if()","rubocop::ast::regexpnode#to_regexp()","rubocop::config#to_s()","rubocop::cop::badge#to_s()","rubocop::cop::offense#to_s()","rubocop::cop::severity#to_s()","rubocop::rspec::expectoffense::annotatedsource#to_s()","rubocop::token#to_s()","rubocop::cop::util#to_string_literal()","rubocop::cop::util#to_supported_styles()","rubocop::cop::util#to_symbol_literal()","rubocop::cop::style::onelineconditional#to_ternary()","rubocop::cop::generator#todo()","rubocop::cop::style::lineendconcatenation#token_after_last_string()","rubocop::cop::style::formatstringtoken#token_ranges()","rubocop::cop::surroundingspace#token_table()","rubocop::processedsource#tokenize()","rubocop::cop::style::formatstringtoken#tokens()","rubocop::magiccomment::editorcomment#tokens()","rubocop::cop::style::semicolon#tokens_for_lines()","rubocop::cop::style::mixinusage#top_level_node?()","rubocop::targetfinder#toplevel_dirs()","rubocop::formatter::offensecountformatter#total_offense_count()","rubocop::formatter::worstoffendersformatter#total_offense_count()","rubocop::cop::lint::unneededdisable#trailing_range?()","rubocop::configloader::transform()","rubocop::cli#trap_interrupt()","rubocop::cop::lint::assignmentincondition#traverse_node()","rubocop::cop::style::trivialaccessors#trivial_accessor_kind()","rubocop::cop::rails::delegate#trivial_delegate?()","rubocop::cop::style::trivialaccessors#trivial_reader?()","rubocop::cop::style::trivialaccessors#trivial_writer?()","rubocop::cop::style::parallelassignment::assignmentsorter#tsort_each_child()","rubocop::cop::style::parallelassignment::assignmentsorter#tsort_each_node()","rubocop::cop::layout::commentindentation#two_alternatives?()","rubocop::cop::percentliteral#type()","rubocop::cop::layout::extraspacing#unary_plus_non_offense?()","rubocop::cop::style::stringliterals#unexpected_double_quotes?()","rubocop::cop::layout::accessmodifierindentation#unexpected_indent_offset()","rubocop::cop::style::stringliterals#unexpected_single_quotes?()","rubocop::cop::configurableenforcedstyle#unexpected_style_detected()","rubocop::cop::layout::endofline#unimportant_missing_cr?()","rubocop::nodepattern::compiler#union_terms()","rubocop::cop::rails::unknownenv#unknown_env_name?()","rubocop::ast::ifnode#unless?()","rubocop::cop::style::nonnilcheck#unless_and_nil_check?()","rubocop::cop::rails::blank#unless_condition()","rubocop::cop::rails::present#unless_condition()","rubocop::cop::style::missingelse#unless_else_config()","rubocop::cop::style::missingelse#unless_else_cop_enabled?()","rubocop::cop::style::frozenstringliteralcomment#unnecessary_comment_offense()","rubocop::cop::lint::unneededsplatexpansion#unneeded_brackets?()","rubocop::cop::style::trailingunderscorevariable#unneeded_ranges()","rubocop::cop::style::lambda#unparenthesized_literal_args?()","rubocop::cop::style::ternaryparentheses#unparenthesized_method_call?()","rubocop::cop::configurableenforcedstyle#unrecognized_style_detected()","rubocop::cop::style::ternaryparentheses#unsafe_autocorrect?()","rubocop::cop::style::safenavigation#unsafe_method?()","rubocop::cop::style::trailingunderscorevariable#unused_range()","rubocop::cop::style::trailingunderscorevariable#unused_variables_only?()","rubocop::cop::style::methoddefparentheses#unwanted_parentheses()","rubocop::cop::style::stabbylambdaparentheses#unwanted_parentheses_corrector()","rubocop::cop::performance::redundantmerge::eachwithobjectinspector#unwind()","rubocop::cop::generator::requirefileinjector#updated_directives()","rubocop::cop::metrics::linelength#uri_regexp()","rubocop::cop::messageannotator#urls()","rubocop::cop::variableforce::assignment#used?()","rubocop::cop::variableforce::variable#used?()","rubocop::cop::style::globalvars#user_vars()","rubocop::cop::style::percentliteraldelimiters#uses_preferred_delimiter?()","rubocop::resultcache#valid?()","rubocop::ast::hashelementnode::hashelementdelta#valid_argument_types?()","rubocop::cop::lint::rescuetype#valid_exceptions()","rubocop::formatter::clangstyleformatter#valid_line?()","rubocop::cop::configurableformatting#valid_name?()","rubocop::cop::rails::hasmanyorhasonedependent#valid_options?()","rubocop::processedsource#valid_syntax?()","rubocop::cop::metrics::linelength#valid_uri?()","rubocop::config#validate()","rubocop::optionsvalidator#validate_compatibility()","rubocop::cop::layout::multilinemethodcallindentation#validate_config()","rubocop::cop::layout::multilineoperationindentation#validate_config()","rubocop::cop::team#validate_config()","rubocop::optionsvalidator::validate_cop_list()","rubocop::config#validate_enforced_styles()","rubocop::optionsvalidator#validate_exclude_limit_option()","rubocop::cli#validate_options_vs_config()","rubocop::optionsvalidator#validate_parallel()","rubocop::config#validate_parameter_names()","rubocop::config#validate_section_presence()","rubocop::config#validate_syntax_cop()","rubocop::ast::hashelementnode#value()","rubocop::ast::hashelementnode#value_delta()","rubocop::ast::hashelementnode::hashelementdelta#value_delta()","rubocop::cop::hashalignment::separatoralignment#value_delta()","rubocop::cop::hashalignment::tablealignment#value_delta()","rubocop::cop::performance::redundantmerge::eachwithobjectinspector#value_used?()","rubocop::ast::arraynode#values()","rubocop::ast::hashnode#values()","rubocop::cop::style::variableinterpolation#var_nodes()","rubocop::ast::fornode#variable()","rubocop::cop::endkeywordalignment#variable_alignment?()","rubocop::cop::variableforce::variabletable#variable_exist?()","rubocop::cop::style::methodcallwithoutargsparentheses#variable_in_mass_assignment?()","rubocop::cop::style::unneededinterpolation#variable_interpolation?()","rubocop::cop::lint::uselessassignment#variable_like_method_invocation?()","rubocop::cop::style::multiplecomparison#variable_name()","rubocop::cop::lint::unusedblockargument#variable_type()","rubocop::cop::lint::unusedargument#variable_used?()","rubocop::cop::style::multiplecomparison#variables_in_node()","rubocop::cop::style::multiplecomparison#variables_in_simple_node()","rubocop::version::version()","rubocop::ast::blocknode#void_context?()","rubocop::ast::defnode#void_context?()","rubocop::ast::fornode#void_context?()","rubocop::cop::lint::returninvoidcontext#void_context_method?()","rubocop::ast::traversal#walk()","rubocop::runner#warm_cache()","rubocop::config#warn_about_unrecognized_cops()","rubocop::cop::performance::casewhensplat#when_branch_range()","rubocop::ast::casenode#when_branches()","rubocop::cop::style::conditionalcorrectorhelper#white_space_range()","rubocop::cop::lint::safenavigationchain#whitelist()","rubocop::cop::rails::dynamicfindby#whitelist()","rubocop::cop::style::trivialaccessors#whitelist()","rubocop::cop::style::nestedparenthesizedcalls#whitelisted?()","rubocop::cop::style::nestedparenthesizedcalls#whitelisted_methods()","rubocop::cop::style::blockdelimiters#whitespace_after?()","rubocop::cop::style::ternaryparentheses#whitespace_after?()","rubocop::cop::layout::spaceafternot#whitespace_after_operator?()","rubocop::cop::style::blockdelimiters#whitespace_before?()","rubocop::cop::style::andor#whitespace_before_arg()","rubocop::cop::endkeywordalignment#whitespace_range()","rubocop::cop::layout::caseindentation#whitespace_range()","rubocop::cop::layout::rescueensurealignment#whitespace_range()","rubocop::platform::windows?()","rubocop::cop::registry#with()","rubocop::formatter::fuubarstyleformatter#with_color()","rubocop::cop::commissioner#with_cop_error_handling()","rubocop::cop::badge#with_department()","rubocop::cop::registry#with_department()","rubocop::cop::lint::redundantwithindex#with_index_range()","rubocop::cop::lint::redundantwithobject#with_object_range()","rubocop::rspec::expectoffense::annotatedsource#with_offense_annotations()","rubocop::nodepattern::compiler#with_temp_node()","rubocop::nodepattern::compiler#with_temp_variable()","rubocop::cop::autocorrectalignment#within?()","rubocop::cop::rails::reversiblemigration#within_change_method?()","rubocop::cop::rails::reversiblemigration#within_reversible_block?()","rubocop::cop::registry#without_department()","rubocop::cop::style::wordarray#word_regex()","rubocop::cop::style::hashsyntax#word_symbol_pair?()","rubocop::cop::rails::readwriteattribute#write_attribute_replacement()","rubocop::cop::generator#write_source()","rubocop::cop::generator#write_spec()","rubocop::cop::generator#write_unless_file_exists()","rubocop::cop::rails::requestreferer#wrong_method_name()","rubocop::cop::stringliteralshelp#wrong_quotes?()","rubocop::configloader::yaml_safe_load()","rubocop::cop::style::yodacondition#yoda_condition?()","",""],"info":[["CopHelper","","CopHelper.html","","<p>This module provides methods that make it easier to test Cops.\n"],["Heredoc","","Heredoc.html","","<p>Common functionality for working with heredoc strings.\n"],["HostEnvironmentSimulatorHelper","","HostEnvironmentSimulatorHelper.html","","<p>RuboCop can be run in contexts where unexpected other libraries are\nincluded, which may interfere with …\n"],["Object","","Object.html","",""],["RuboCop","","RuboCop.html","","<p>rubocop:disable Metrics/ClassLength\n<p>frozen_string_literal: true\n<p>rubocop:disable Metrics/ModuleLength\n"],["RuboCop::AST","","RuboCop/AST.html","",""],["RuboCop::AST::AndNode","","RuboCop/AST/AndNode.html","","<p>A node extension for `until` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::ArgsNode","","RuboCop/AST/ArgsNode.html","","<p>A node extension for `args` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::ArrayNode","","RuboCop/AST/ArrayNode.html","","<p>A node extension for `array` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::BinaryOperatorNode","","RuboCop/AST/BinaryOperatorNode.html","","<p>Common functionality for nodes that are binary operations: `or`, `and` …\n"],["RuboCop::AST::BlockNode","","RuboCop/AST/BlockNode.html","","<p>A node extension for `block` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::Builder","","RuboCop/AST/Builder.html","","<p>`RuboCop::Builder` is an AST builder that is utilized to let `Parser`\ngenerate ASTs with {RuboCop::AST::Node}. …\n"],["RuboCop::AST::CaseNode","","RuboCop/AST/CaseNode.html","","<p>A node extension for `case` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::CollectionNode","","RuboCop/AST/CollectionNode.html","","<p>A mixin that helps give collection nodes array polymorphism.\n"],["RuboCop::AST::ConditionalNode","","RuboCop/AST/ConditionalNode.html","","<p>Common functionality for nodes that have conditions: `if`, `while`,\n`until`, `case`. This currently doesn&#39;t …\n"],["RuboCop::AST::DefNode","","RuboCop/AST/DefNode.html","","<p>A node extension for `def` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::EnsureNode","","RuboCop/AST/EnsureNode.html","","<p>A node extension for `ensure` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::ForNode","","RuboCop/AST/ForNode.html","","<p>A node extension for `for` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::HashElementNode","","RuboCop/AST/HashElementNode.html","","<p>Common functionality for nodes that can be used as hash elements: `pair`,\n`kwsplat`\n"],["RuboCop::AST::HashElementNode::HashElementDelta","","RuboCop/AST/HashElementNode/HashElementDelta.html","","<p>A helper class for comparing the positions of different parts of a `pair`\nnode.\n"],["RuboCop::AST::HashNode","","RuboCop/AST/HashNode.html","","<p>A node extension for `hash` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::IfNode","","RuboCop/AST/IfNode.html","","<p>A node extension for `if` nodes. This will be used in place of a plain node\nwhen the builder constructs …\n"],["RuboCop::AST::KeywordSplatNode","","RuboCop/AST/KeywordSplatNode.html","","<p>A node extension for `kwsplat` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::MethodDispatchNode","","RuboCop/AST/MethodDispatchNode.html","","<p>Common functionality for nodes that are a kind of method dispatch: `send`,\n`csend`, `super`, `zsuper`, …\n"],["RuboCop::AST::MethodIdentifierPredicates","","RuboCop/AST/MethodIdentifierPredicates.html","","<p>Common predicates for nodes that reference method identifiers: `send`,\n`csend`, `def`, `defs`, `super`, …\n"],["RuboCop::AST::ModifierNode","","RuboCop/AST/ModifierNode.html","","<p>Common functionality for nodes that can be used as modifiers: `if`,\n`while`, `until`\n"],["RuboCop::AST::Node","","RuboCop/AST/Node.html","","<p>`RuboCop::AST::Node` is a subclass of `Parser::AST::Node`. It provides\naccess to parent nodes and an …\n"],["RuboCop::AST::OrNode","","RuboCop/AST/OrNode.html","","<p>A node extension for `or` nodes. This will be used in place of a plain node\nwhen the builder constructs …\n"],["RuboCop::AST::PairNode","","RuboCop/AST/PairNode.html","","<p>A node extension for `pair` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::ParameterizedNode","","RuboCop/AST/ParameterizedNode.html","","<p>Common functionality for nodes that are parameterized: `send`, `super`,\n`zsuper`, `def`, `defs`\n"],["RuboCop::AST::PredicateOperatorNode","","RuboCop/AST/PredicateOperatorNode.html","","<p>Common functionality for nodes that are predicates: `or`, `and` …\n"],["RuboCop::AST::RegexpNode","","RuboCop/AST/RegexpNode.html","","<p>A node extension for `regexp` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::ResbodyNode","","RuboCop/AST/ResbodyNode.html","","<p>A node extension for `resbody` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::SendNode","","RuboCop/AST/SendNode.html","","<p>A node extension for `send` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::Sexp","","RuboCop/AST/Sexp.html","","<p>This module provides a shorthand method to create a {Node} like\n`Parser::AST::Sexp`.\n<p>@see rubydoc.info/gems/ast/AST/Sexp …\n"],["RuboCop::AST::SuperNode","","RuboCop/AST/SuperNode.html","","<p>A node extension for `super`- and `zsuper` nodes. This will be used in\nplace of a plain node when the …\n"],["RuboCop::AST::Traversal","","RuboCop/AST/Traversal.html","","<p>Provides methods for traversing an AST. Does not transform an AST; for\nthat, use Parser::AST::Processor …\n"],["RuboCop::AST::UntilNode","","RuboCop/AST/UntilNode.html","","<p>A node extension for `until` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::WhenNode","","RuboCop/AST/WhenNode.html","","<p>A node extension for `when` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::WhileNode","","RuboCop/AST/WhileNode.html","","<p>A node extension for `while` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::AST::YieldNode","","RuboCop/AST/YieldNode.html","","<p>A node extension for `yield` nodes. This will be used in place of a plain\nnode when the builder constructs …\n"],["RuboCop::CLI","","RuboCop/CLI.html","","<p>The CLI is a class responsible of handling all the command line interface\nlogic.\n"],["RuboCop::CLI::Finished","","RuboCop/CLI/Finished.html","",""],["RuboCop::CachedData","","RuboCop/CachedData.html","","<p>Converts RuboCop objects to and from the serialization format JSON.\n"],["RuboCop::CommentConfig","","RuboCop/CommentConfig.html","","<p>This class parses the special `rubocop:disable` comments in a source and\nprovides a way to check if each …\n"],["RuboCop::Config","","RuboCop/Config.html","","<p>This class represents the configuration of the RuboCop application and all\nits cops. A Config is associated …\n"],["RuboCop::ConfigLoader","","RuboCop/ConfigLoader.html","","<p>This class represents the configuration of the RuboCop application and all\nits cops. A Config is associated …\n"],["RuboCop::ConfigLoaderResolver","","RuboCop/ConfigLoaderResolver.html","","<p>A mixin to break up ConfigLoader\n"],["RuboCop::ConfigStore","","RuboCop/ConfigStore.html","","<p>Handles caching of configurations and association of inspected ruby files\nto configurations.\n"],["RuboCop::Cop","","RuboCop/Cop.html","",""],["RuboCop::Cop::AmbiguousCopName","","RuboCop/Cop/AmbiguousCopName.html","","<p>Error raised when an unqualified cop name is used that could refer to two\nor more cops under different …\n"],["RuboCop::Cop::ArrayHashIndentation","","RuboCop/Cop/ArrayHashIndentation.html","","<p>Common code for indenting literal arrays and hashes.\n"],["RuboCop::Cop::ArrayMinSize","","RuboCop/Cop/ArrayMinSize.html","","<p>Handles the `MinSize` configuration option for array-based cops\n`Style/SymbolArray` and `Style/WordArray`, …\n"],["RuboCop::Cop::ArraySyntax","","RuboCop/Cop/ArraySyntax.html","","<p>Common code for ordinary arrays with [] that can be written with % syntax.\n"],["RuboCop::Cop::AutocorrectAlignment","","RuboCop/Cop/AutocorrectAlignment.html","","<p>This module does auto-correction of nodes that should just be moved to the\nleft or to the right, amount …\n"],["RuboCop::Cop::AutocorrectLogic","","RuboCop/Cop/AutocorrectLogic.html","","<p>This module encapsulates the logic for autocorrect behavior for a cop.\n"],["RuboCop::Cop::Badge","","RuboCop/Cop/Badge.html","","<p>Identifier of all cops containing a department and cop name.\n<p>All cops are identified by their badge.  …\n"],["RuboCop::Cop::Badge::InvalidBadge","","RuboCop/Cop/Badge/InvalidBadge.html","","<p>Error raised when a badge parse fails.\n"],["RuboCop::Cop::Bundler","","RuboCop/Cop/Bundler.html","",""],["RuboCop::Cop::Bundler::DuplicatedGem","","RuboCop/Cop/Bundler/DuplicatedGem.html","","<p>A Gem&#39;s requirements should be listed only once in a Gemfile. @example\n\n<pre># bad\ngem &#39;rubocop&#39;\ngem &#39;rubocop&#39; ...</pre>\n"],["RuboCop::Cop::Bundler::InsecureProtocolSource","","RuboCop/Cop/Bundler/InsecureProtocolSource.html","","<p>The symbol argument `:gemcutter`, `:rubygems` and `:rubyforge` are\ndeprecated. So please change your …\n"],["RuboCop::Cop::Bundler::OrderedGems","","RuboCop/Cop/Bundler/OrderedGems.html","","<p>Gems should be alphabetically sorted within groups.\n<p>@example\n\n<pre># bad\ngem &#39;rubocop&#39;\ngem &#39;rspec&#39;\n\n# good\ngem ...</pre>\n"],["RuboCop::Cop::CheckAssignment","","RuboCop/Cop/CheckAssignment.html","","<p>Common functionality for checking assignment nodes.\n"],["RuboCop::Cop::CheckAssignment::Util","","RuboCop/Cop/CheckAssignment/Util.html","",""],["RuboCop::Cop::ClassishLength","","RuboCop/Cop/ClassishLength.html","","<p>Common functionality for checking length of classes and modules.\n"],["RuboCop::Cop::CodeLength","","RuboCop/Cop/CodeLength.html","","<p>Common functionality for checking length of code segments.\n"],["RuboCop::Cop::Commissioner","","RuboCop/Cop/Commissioner.html","","<p>Commissioner class is responsible for processing the AST and delegating\nwork to the specified cops.\n"],["RuboCop::Cop::ConfigurableEnforcedStyle","","RuboCop/Cop/ConfigurableEnforcedStyle.html","","<p>Handles `EnforcedStyle` configuration parameters.\n"],["RuboCop::Cop::ConfigurableFormatting","","RuboCop/Cop/ConfigurableFormatting.html","","<p>Shared functionality between mixins that enforce naming conventions\n"],["RuboCop::Cop::ConfigurableMax","","RuboCop/Cop/ConfigurableMax.html","","<p>Handles `Max` configuration parameters, especially setting them to an\nappropriate value with –auto-gen-config. …\n"],["RuboCop::Cop::ConfigurableNaming","","RuboCop/Cop/ConfigurableNaming.html","","<p>This module provides functionality for checking if names match the\nconfigured EnforcedStyle.\n"],["RuboCop::Cop::ConfigurableNumbering","","RuboCop/Cop/ConfigurableNumbering.html","","<p>This module provides functionality for checking if numbering match the\nconfigured EnforcedStyle.\n"],["RuboCop::Cop::Cop","","RuboCop/Cop/Cop.html","","<p>A scaffold for concrete cops.\n<p>The Cop class is meant to be extended.\n<p>Cops track offenses and can autocorrect …\n"],["RuboCop::Cop::Corrector","","RuboCop/Cop/Corrector.html","","<p>This class takes a source buffer and rewrite its source based on the\ndifferent correction rules supplied. …\n"],["RuboCop::Cop::DefNode","","RuboCop/Cop/DefNode.html","","<p>Common functionality for checking def nodes.\n"],["RuboCop::Cop::DocumentationComment","","RuboCop/Cop/DocumentationComment.html","","<p>Common functionality for checking documentation.\n"],["RuboCop::Cop::Duplication","","RuboCop/Cop/Duplication.html","","<p>Common functionality for dealing with duplication.\n"],["RuboCop::Cop::EndKeywordAlignment","","RuboCop/Cop/EndKeywordAlignment.html","","<p>Functions for checking the alignment of the `end` keyword.\n"],["RuboCop::Cop::EnforceSuperclass","","RuboCop/Cop/EnforceSuperclass.html","","<p>Common functionality for enforcing a specific superclass\n"],["RuboCop::Cop::FirstElementLineBreak","","RuboCop/Cop/FirstElementLineBreak.html","","<p>Common functionality for checking for a line break before the first element\nin a multi-line collection. …\n"],["RuboCop::Cop::Force","","RuboCop/Cop/Force.html","","<p>A scaffold for concrete forces.\n"],["RuboCop::Cop::FrozenStringLiteral","","RuboCop/Cop/FrozenStringLiteral.html","","<p>Common functionality for dealing with frozen string literals.\n"],["RuboCop::Cop::Gemspec","","RuboCop/Cop/Gemspec.html","",""],["RuboCop::Cop::Gemspec::OrderedDependencies","","RuboCop/Cop/Gemspec/OrderedDependencies.html","","<p>Dependencies in the gemspec should be alphabetically sorted.\n<p>@example\n\n<pre># bad\nspec.add_dependency &#39;rubocop&#39; ...</pre>\n"],["RuboCop::Cop::Generator","","RuboCop/Cop/Generator.html","","<p>Source and spec generator for new cops\n<p>This generator will take a cop name and generate a source file …\n"],["RuboCop::Cop::Generator::RequireFileInjector","","RuboCop/Cop/Generator/RequireFileInjector.html","","<p>A class that injects a require directive into the root RuboCop file. It\nlooks for other directives that …\n"],["RuboCop::Cop::HashAlignment","","RuboCop/Cop/HashAlignment.html","","<p>Common functionality for checking hash alignment.\n"],["RuboCop::Cop::HashAlignment::KeyAlignment","","RuboCop/Cop/HashAlignment/KeyAlignment.html","","<p>Handles calculation of deltas when the enforced style is &#39;key&#39;.\n"],["RuboCop::Cop::HashAlignment::SeparatorAlignment","","RuboCop/Cop/HashAlignment/SeparatorAlignment.html","","<p>Handles calculation of deltas when the enforced style is\n&#39;separator&#39;.\n"],["RuboCop::Cop::HashAlignment::TableAlignment","","RuboCop/Cop/HashAlignment/TableAlignment.html","","<p>Handles calculation of deltas when the enforced style is &#39;table&#39;.\n"],["RuboCop::Cop::HashAlignment::ValueAlignment","","RuboCop/Cop/HashAlignment/ValueAlignment.html","","<p>Common functionality for checking alignment of hash values.\n"],["RuboCop::Cop::IgnoredNode","","RuboCop/Cop/IgnoredNode.html","","<p>Handles adding and checking ignored nodes.\n"],["RuboCop::Cop::IgnoredPattern","","RuboCop/Cop/IgnoredPattern.html","","<p>This module encapsulates the ability to ignore certain lines when parsing.\n"],["RuboCop::Cop::IntegerNode","","RuboCop/Cop/IntegerNode.html","","<p>Common functionality for checking integer nodes.\n"],["RuboCop::Cop::InternalAffairs","","RuboCop/Cop/InternalAffairs.html","",""],["RuboCop::Cop::InternalAffairs::DeprecatedPositionalArguments","","RuboCop/Cop/InternalAffairs/DeprecatedPositionalArguments.html","","<p>Enforces use of keyword arguments for `#add_offense`.\n<p>@example\n\n<pre># bad\nadd_offense(node, :selector, &#39;message&#39;) ...</pre>\n"],["RuboCop::Cop::InternalAffairs::NodeTypePredicate","","RuboCop/Cop/InternalAffairs/NodeTypePredicate.html","","<p>Checks that node types are checked using the predicate helpers.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">type</span> <span class=\"ruby-operator\">==</span> :<span class=\"ruby-identifier\">send</span>\n\n<span class=\"ruby-comment\"># good ...</span>\n</pre>\n"],["RuboCop::Cop::InternalAffairs::OffenseLocationKeyword","","RuboCop/Cop/InternalAffairs/OffenseLocationKeyword.html","","<p>Checks for potential uses of the location keywords which can be used as\nshortcut arguments to `#add_offense`. …\n"],["RuboCop::Cop::InternalAffairs::RedundantLocationArgument","","RuboCop/Cop/InternalAffairs/RedundantLocationArgument.html","","<p>Checks for redundant `location` argument to `#add_offense`. `location`\nargument has a default value of …\n"],["RuboCop::Cop::InternalAffairs::RedundantMessageArgument","","RuboCop/Cop/InternalAffairs/RedundantMessageArgument.html","","<p>Checks for redundant message arguments to `#add_offense`. This method will\nautomatically use `#message` …\n"],["RuboCop::Cop::InternalAffairs::UselessMessageAssertion","","RuboCop/Cop/InternalAffairs/UselessMessageAssertion.html","","<p>Checks that cops are not tested using `described_class::MSG`.\n<p>@example\n\n<pre># bad\nexpect(cop.messages).to eq([described_class::MSG]) ...</pre>\n"],["RuboCop::Cop::Layout","","RuboCop/Cop/Layout.html","",""],["RuboCop::Cop::Layout::AccessModifierIndentation","","RuboCop/Cop/Layout/AccessModifierIndentation.html","","<p>Modifiers should be indented as deep as method definitions, or as deep as\nthe class/module keyword, depending …\n"],["RuboCop::Cop::Layout::AlignArray","","RuboCop/Cop/Layout/AlignArray.html","","<p>Here we check if the elements of a multi-line array literal are aligned.\n<p>@example\n\n<pre># bad\na = [1, 2, 3,\n ...</pre>\n"],["RuboCop::Cop::Layout::AlignHash","","RuboCop/Cop/Layout/AlignHash.html","","<p>Check that the keys, separators, and values of a multi-line hash literal\nare aligned according to configuration. …\n"],["RuboCop::Cop::Layout::AlignParameters","","RuboCop/Cop/Layout/AlignParameters.html","","<p>Here we check if the parameters on a multi-line method call or definition\nare aligned.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># EnforcedStyle: ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::BlockEndNewline","","RuboCop/Cop/Layout/BlockEndNewline.html","","<p>This cop checks whether the end statement of a do..end block is on its own\nline.\n<p>@example\n\n<pre># bad\nblah do ...</pre>\n"],["RuboCop::Cop::Layout::CaseIndentation","","RuboCop/Cop/Layout/CaseIndentation.html","","<p>This cop checks how the *when*s of a <strong>case</strong> expression are\nindented in relation to its <strong>case</strong> or <strong>end</strong>\nkeyword. …\n"],["RuboCop::Cop::Layout::ClosingParenthesisIndentation","","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html","","<p>This cops checks the indentation of hanging closing parentheses in method\ncalls, method definitions, …\n"],["RuboCop::Cop::Layout::CommentIndentation","","RuboCop/Cop/Layout/CommentIndentation.html","","<p>This cops checks the indentation of comments.\n"],["RuboCop::Cop::Layout::DotPosition","","RuboCop/Cop/Layout/DotPosition.html","","<p>This cop checks the . position in multi-line method calls.\n<p>@example\n\n<pre># bad\nsomething.\n  mehod\n\n# good\nsomething ...</pre>\n"],["RuboCop::Cop::Layout::ElseAlignment","","RuboCop/Cop/Layout/ElseAlignment.html","","<p>This cops checks the alignment of else keywords. Normally they should be\naligned with an if/unless/while/until/begin/def …\n"],["RuboCop::Cop::Layout::EmptyLineAfterMagicComment","","RuboCop/Cop/Layout/EmptyLineAfterMagicComment.html","","<p>Checks for a newline after the final magic comment.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-comment\"># frozen_string_literal: true</span>\n\n<span class=\"ruby-comment\"># Some ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::EmptyLineBetweenDefs","","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html","","<p>This cop checks whether method definitions are separated by one empty line.\n<p>`NumberOfEmptyLines` can be …\n"],["RuboCop::Cop::Layout::EmptyLines","","RuboCop/Cop/Layout/EmptyLines.html","","<p>This cops checks for two or more consecutive blank lines.\n"],["RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html","","<p>Access modifiers should be surrounded by blank lines.\n<p>@example\n\n<pre># bad\nclass Foo\n  def bar; end\n  private ...</pre>\n"],["RuboCop::Cop::Layout::EmptyLinesAroundBeginBody","","RuboCop/Cop/Layout/EmptyLinesAroundBeginBody.html","","<p>This cops checks if empty lines exist around the bodies of begin-end\nblocks.\n<p>@example\n\n<pre># good\n\nbegin\n  ... ...</pre>\n"],["RuboCop::Cop::Layout::EmptyLinesAroundBlockBody","","RuboCop/Cop/Layout/EmptyLinesAroundBlockBody.html","","<p>This cops checks if empty lines around the bodies of blocks match the\nconfiguration.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># EnforcedStyle: ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::EmptyLinesAroundBody","","RuboCop/Cop/Layout/EmptyLinesAroundBody.html","","<p>Common functionality for checking if presence/absence of empty lines around\nsome kind of body matches …\n"],["RuboCop::Cop::Layout::EmptyLinesAroundClassBody","","RuboCop/Cop/Layout/EmptyLinesAroundClassBody.html","","<p>This cops checks if empty lines around the bodies of classes match the\nconfiguration.\n<p>@example\n\n<pre>EnforcedStyle: ...</pre>\n"],["RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html","","<p>This cops checks if empty lines exist around the bodies of `begin`\nsections. This cop doesn&#39;t check …\n"],["RuboCop::Cop::Layout::EmptyLinesAroundMethodBody","","RuboCop/Cop/Layout/EmptyLinesAroundMethodBody.html","","<p>This cops checks if empty lines exist around the bodies of methods.\n<p>@example\n\n<pre># good\n\ndef foo\n  ...\nend ...</pre>\n"],["RuboCop::Cop::Layout::EmptyLinesAroundModuleBody","","RuboCop/Cop/Layout/EmptyLinesAroundModuleBody.html","","<p>This cops checks if empty lines around the bodies of modules match the\nconfiguration.\n<p>@example\n\n<pre>EnforcedStyle: ...</pre>\n"],["RuboCop::Cop::Layout::EndOfLine","","RuboCop/Cop/Layout/EndOfLine.html","","<p>This cop checks for Windows-style line endings in the source code.\n"],["RuboCop::Cop::Layout::ExtraSpacing","","RuboCop/Cop/Layout/ExtraSpacing.html","","<p>This cop checks for extra/unnecessary whitespace.\n<p>@example\n\n<pre># good if AllowForAlignment is true\nname    ...</pre>\n"],["RuboCop::Cop::Layout::FirstArrayElementLineBreak","","RuboCop/Cop/Layout/FirstArrayElementLineBreak.html","","<p>This cop checks for a line break before the first element in a multi-line\narray.\n<p>@example\n\n<pre># bad\n[ :a,\n ...</pre>\n"],["RuboCop::Cop::Layout::FirstHashElementLineBreak","","RuboCop/Cop/Layout/FirstHashElementLineBreak.html","","<p>This cop checks for a line break before the first element in a multi-line\nhash.\n<p>@example\n\n<pre># bad\n{ a: 1, ...</pre>\n"],["RuboCop::Cop::Layout::FirstMethodArgumentLineBreak","","RuboCop/Cop/Layout/FirstMethodArgumentLineBreak.html","","<p>This cop checks for a line break before the first argument in a multi-line\nmethod call.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::FirstMethodParameterLineBreak","","RuboCop/Cop/Layout/FirstMethodParameterLineBreak.html","","<p>This cop checks for a line break before the first parameter in a multi-line\nmethod parameter definition. …\n"],["RuboCop::Cop::Layout::FirstParameterIndentation","","RuboCop/Cop/Layout/FirstParameterIndentation.html","","<p>This cop checks the indentation of the first parameter in a method call.\nParameters after the first one …\n"],["RuboCop::Cop::Layout::IndentArray","","RuboCop/Cop/Layout/IndentArray.html","","<p>This cop checks the indentation of the first element in an array literal\nwhere the opening bracket and …\n"],["RuboCop::Cop::Layout::IndentAssignment","","RuboCop/Cop/Layout/IndentAssignment.html","","<p>This cop checks the indentation of the first line of the right-hand-side of\na multi-line assignment. …\n"],["RuboCop::Cop::Layout::IndentHash","","RuboCop/Cop/Layout/IndentHash.html","","<p>This cops checks the indentation of the first key in a hash literal where\nthe opening brace and the first …\n"],["RuboCop::Cop::Layout::IndentHeredoc","","RuboCop/Cop/Layout/IndentHeredoc.html","","<p>This cops checks the indentation of the here document bodies. The bodies\nare indented one step. In Ruby …\n"],["RuboCop::Cop::Layout::IndentationConsistency","","RuboCop/Cop/Layout/IndentationConsistency.html","","<p>This cops checks for inconsistent indentation.\n<p>@example\n\n<pre>class A\n  def test\n    puts &#39;hello&#39;\n     puts &#39;world&#39; ...</pre>\n"],["RuboCop::Cop::Layout::IndentationWidth","","RuboCop/Cop/Layout/IndentationWidth.html","","<p>This cops checks for indentation that doesn&#39;t use the specified number\nof spaces.\n<p>See also the IndentationConsistency …\n"],["RuboCop::Cop::Layout::InitialIndentation","","RuboCop/Cop/Layout/InitialIndentation.html","","<p>This cops checks for indentation of the first non-blank non-comment line in\na file.\n"],["RuboCop::Cop::Layout::LeadingCommentSpace","","RuboCop/Cop/Layout/LeadingCommentSpace.html","","<p>This cop checks whether comments have a leading space after the `#`\ndenoting the start of the comment. …\n"],["RuboCop::Cop::Layout::MultilineArrayBraceLayout","","RuboCop/Cop/Layout/MultilineArrayBraceLayout.html","","<p>This cop checks that the closing brace in an array literal is either on the\nsame line as the last array …\n"],["RuboCop::Cop::Layout::MultilineAssignmentLayout","","RuboCop/Cop/Layout/MultilineAssignmentLayout.html","","<p>This cop checks whether the multiline assignments have a newline after the\nassignment operator.\n<p>@example …\n"],["RuboCop::Cop::Layout::MultilineBlockLayout","","RuboCop/Cop/Layout/MultilineBlockLayout.html","","<p>This cop checks whether the multiline do end blocks have a newline after\nthe start of the block. Additionally …\n"],["RuboCop::Cop::Layout::MultilineHashBraceLayout","","RuboCop/Cop/Layout/MultilineHashBraceLayout.html","","<p>This cop checks that the closing brace in a hash literal is either on the\nsame line as the last hash …\n"],["RuboCop::Cop::Layout::MultilineMethodCallBraceLayout","","RuboCop/Cop/Layout/MultilineMethodCallBraceLayout.html","","<p>This cop checks that the closing brace in a method call is either on the\nsame line as the last method …\n"],["RuboCop::Cop::Layout::MultilineMethodCallIndentation","","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html","","<p>This cop checks the indentation of the method name part in method calls\nthat span more than one line. …\n"],["RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout","","RuboCop/Cop/Layout/MultilineMethodDefinitionBraceLayout.html","","<p>This cop checks that the closing brace in a method definition is either on\nthe same line as the last …\n"],["RuboCop::Cop::Layout::MultilineOperationIndentation","","RuboCop/Cop/Layout/MultilineOperationIndentation.html","","<p>This cop checks the indentation of the right hand side operand in binary\noperations that span more than …\n"],["RuboCop::Cop::Layout::RescueEnsureAlignment","","RuboCop/Cop/Layout/RescueEnsureAlignment.html","","<p>This cop checks whether the rescue and ensure keywords are aligned\nproperly.\n<p>@example\n\n<pre># bad\nbegin\n  something ...</pre>\n"],["RuboCop::Cop::Layout::SpaceAfterColon","","RuboCop/Cop/Layout/SpaceAfterColon.html","","<p>Checks for colon (:) not followed by some kind of space. N.B. this cop does\nnot handle spaces after a …\n"],["RuboCop::Cop::Layout::SpaceAfterComma","","RuboCop/Cop/Layout/SpaceAfterComma.html","","<p>Checks for comma (,) not followed by some kind of space.\n<p>@example\n\n<pre># bad\n1,2\n{ foo:bar,}\n\n# good\n1, 2\n{ ...</pre>\n"],["RuboCop::Cop::Layout::SpaceAfterMethodName","","RuboCop/Cop/Layout/SpaceAfterMethodName.html","","<p>Checks for space between a method name and a left parenthesis in defs.\n<p>@example\n\n<pre># bad\ndef func (x) ... ...</pre>\n"],["RuboCop::Cop::Layout::SpaceAfterNot","","RuboCop/Cop/Layout/SpaceAfterNot.html","","<p>This cop checks for space after `!`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-operator\">!</span> <span class=\"ruby-identifier\">something</span>\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-operator\">!</span><span class=\"ruby-identifier\">something</span>\n</pre>\n"],["RuboCop::Cop::Layout::SpaceAfterSemicolon","","RuboCop/Cop/Layout/SpaceAfterSemicolon.html","","<p>Checks for semicolon (;) not followed by some kind of space.\n"],["RuboCop::Cop::Layout::SpaceAroundBlockParameters","","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html","","<p>Checks the spacing inside and after block parameters pipes.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># EnforcedStyleInsidePipes: no_space ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html","","<p>Checks that the equals signs in parameter default assignments have or\ndon&#39;t have surrounding space …\n"],["RuboCop::Cop::Layout::SpaceAroundKeyword","","RuboCop/Cop/Layout/SpaceAroundKeyword.html","","<p>Checks the spacing around the keywords.\n<p>@example\n\n<pre># bad\nsomething &#39;test&#39;do|x|\nend\n\nwhile(something)\nend ...</pre>\n"],["RuboCop::Cop::Layout::SpaceAroundOperators","","RuboCop/Cop/Layout/SpaceAroundOperators.html","","<p>Checks that operators have space around them, except for ** which should\nnot have surrounding space. …\n"],["RuboCop::Cop::Layout::SpaceBeforeBlockBraces","","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html","","<p>Checks that block braces have or don&#39;t have a space before the opening\nbrace depending on configuration. …\n"],["RuboCop::Cop::Layout::SpaceBeforeComma","","RuboCop/Cop/Layout/SpaceBeforeComma.html","","<p>Checks for comma (,) preceded by space.\n"],["RuboCop::Cop::Layout::SpaceBeforeComment","","RuboCop/Cop/Layout/SpaceBeforeComment.html","","<p>This cop checks for missing space between a token and a comment on the same\nline.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span><span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::SpaceBeforeFirstArg","","RuboCop/Cop/Layout/SpaceBeforeFirstArg.html","","<p>Checks that exactly one space is used between a method name and the first\nargument for method calls without …\n"],["RuboCop::Cop::Layout::SpaceBeforeSemicolon","","RuboCop/Cop/Layout/SpaceBeforeSemicolon.html","","<p>Checks for semicolon (;) preceded by space.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-identifier\">x</span> = <span class=\"ruby-value\">1</span> ; <span class=\"ruby-identifier\">y</span> = <span class=\"ruby-value\">2</span>\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-identifier\">x</span> = <span class=\"ruby-value\">1</span>; <span class=\"ruby-identifier\">y</span> = <span class=\"ruby-value\">2</span>\n</pre>\n"],["RuboCop::Cop::Layout::SpaceInLambdaLiteral","","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html","","<p>This cop checks for spaces between -&gt; and opening parameter brace in\nlambda literals.\n<p>@example\n\n<pre>EnforcedStyle: ...</pre>\n"],["RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral","","RuboCop/Cop/Layout/SpaceInsideArrayPercentLiteral.html","","<p>Checks for unnecessary additional spaces inside array percent literals\n(i.e. %i/%w).\n<p>@example\n\n<pre>@good\n%i(foo ...</pre>\n"],["RuboCop::Cop::Layout::SpaceInsideBlockBraces","","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html","","<p>Checks that block braces have or don&#39;t have surrounding space inside\nthem on configuration. For blocks …\n"],["RuboCop::Cop::Layout::SpaceInsideBrackets","","RuboCop/Cop/Layout/SpaceInsideBrackets.html","","<p>Checks for spaces inside square brackets.\n"],["RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html","","<p>Checks that braces used for hash literals have or don&#39;t have\nsurrounding space depending on configuration. …\n"],["RuboCop::Cop::Layout::SpaceInsideParens","","RuboCop/Cop/Layout/SpaceInsideParens.html","","<p>Checks for spaces inside ordinary round parentheses.\n<p>@example\n\n<pre># bad\nf( 3)\ng = (a + 3 )\n\n# good\nf(3)\ng = ...</pre>\n"],["RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html","","<p>Checks for unnecessary additional spaces inside the delimiters of %i/%w/%x\nliterals.\n<p>@example\n\n<pre># good\n%i(foo ...</pre>\n"],["RuboCop::Cop::Layout::SpaceInsideRangeLiteral","","RuboCop/Cop/Layout/SpaceInsideRangeLiteral.html","","<p>Checks for spaces inside range literals.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">..</span> <span class=\"ruby-value\">3</span>\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>\n\n<span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-string\">&#39;a&#39;</span> <span class=\"ruby-operator\">..</span> <span class=\"ruby-string\">&#39;z&#39;</span>\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-string\">&#39;a&#39;</span><span class=\"ruby-operator\">..</span><span class=\"ruby-string\">&#39;z&#39;</span>\n</pre>\n"],["RuboCop::Cop::Layout::SpaceInsideStringInterpolation","","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html","","<p>This cop checks for whitespace within string interpolations.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Good if EnforcedStyle is no_space, ...</span>\n</pre>\n"],["RuboCop::Cop::Layout::Tab","","RuboCop/Cop/Layout/Tab.html","","<p>This cop checks for tabs inside the source code.\n"],["RuboCop::Cop::Layout::TrailingBlankLines","","RuboCop/Cop/Layout/TrailingBlankLines.html","","<p>This cop looks for trailing blank lines and a final newline in the source\ncode.\n"],["RuboCop::Cop::Layout::TrailingWhitespace","","RuboCop/Cop/Layout/TrailingWhitespace.html","","<p>This cop looks for trailing whitespace in the source code.\n"],["RuboCop::Cop::Lint","","RuboCop/Cop/Lint.html","",""],["RuboCop::Cop::Lint::AmbiguousBlockAssociation","","RuboCop/Cop/Lint/AmbiguousBlockAssociation.html","","<p>This cop checks for ambiguous block association with method when param\npassed without parentheses.\n<p>@example …\n"],["RuboCop::Cop::Lint::AmbiguousOperator","","RuboCop/Cop/Lint/AmbiguousOperator.html","","<p>This cop checks for ambiguous operators in the first argument of a method\ninvocation without parentheses. …\n"],["RuboCop::Cop::Lint::AmbiguousRegexpLiteral","","RuboCop/Cop/Lint/AmbiguousRegexpLiteral.html","","<p>This cop checks for ambiguous regexp literals in the first argument of a\nmethod invocation without parentheses. …\n"],["RuboCop::Cop::Lint::AssignmentInCondition","","RuboCop/Cop/Lint/AssignmentInCondition.html","","<p>This cop checks for assignments in the conditions of if/while/until.\n<p>@example\n\n<pre># bad\n\nif some_var = true ...</pre>\n"],["RuboCop::Cop::Lint::BlockAlignment","","RuboCop/Cop/Lint/BlockAlignment.html","","<p>This cop checks whether the end keywords are aligned properly for do end\nblocks.\n<p>Three modes are supported …\n"],["RuboCop::Cop::Lint::BooleanSymbol","","RuboCop/Cop/Lint/BooleanSymbol.html","","<p>This cop checks for `:true` and `:false` symbols. In most cases it would be\na typo.\n<p>@example\n\n<pre># bad\n:true ...</pre>\n"],["RuboCop::Cop::Lint::CircularArgumentReference","","RuboCop/Cop/Lint/CircularArgumentReference.html","","<p>This cop checks for circular argument references in optional keyword\narguments and optional ordinal arguments. …\n"],["RuboCop::Cop::Lint::ConditionPosition","","RuboCop/Cop/Lint/ConditionPosition.html","","<p>This cop checks for conditions that are not on the same line as\nif/while/until.\n<p>@example\n\n<pre># bad\n\nif\n  some_condition ...</pre>\n"],["RuboCop::Cop::Lint::Debugger","","RuboCop/Cop/Lint/Debugger.html","","<p>This cop checks for calls to debugger or pry.\n<p>@example\n\n<pre># bad (ok during development)\n\n# using pry\ndef some_method ...</pre>\n"],["RuboCop::Cop::Lint::DefEndAlignment","","RuboCop/Cop/Lint/DefEndAlignment.html","","<p>This cop checks whether the end keywords of method definitions are aligned\nproperly.\n<p>Two modes are supported …\n"],["RuboCop::Cop::Lint::DeprecatedClassMethods","","RuboCop/Cop/Lint/DeprecatedClassMethods.html","","<p>This cop checks for uses of the deprecated class method usages.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-constant\">File</span>.<span class=\"ruby-identifier\">exists?</span>(<span class=\"ruby-identifier\">some_path</span>)\n</pre>\n"],["RuboCop::Cop::Lint::DeprecatedClassMethods::DeprecatedClassMethod","","RuboCop/Cop/Lint/DeprecatedClassMethods/DeprecatedClassMethod.html","","<p>Inner class to DeprecatedClassMethods. This class exists to add abstraction\nand clean naming to the objects …\n"],["RuboCop::Cop::Lint::DuplicateCaseCondition","","RuboCop/Cop/Lint/DuplicateCaseCondition.html","","<p>This cop checks that there are no repeated conditions used in case\n&#39;when&#39; expressions.\n<p>@example …\n"],["RuboCop::Cop::Lint::DuplicateMethods","","RuboCop/Cop/Lint/DuplicateMethods.html","","<p>This cop checks for duplicated instance (or singleton) method definitions.\n<p>@example\n\n<pre># bad\n\ndef duplicated ...</pre>\n"],["RuboCop::Cop::Lint::DuplicatedKey","","RuboCop/Cop/Lint/DuplicatedKey.html","","<p>This cop checks for duplicated keys in hash literals.\n<p>This cop mirrors a warning in Ruby 2.2.\n<p>@example …\n"],["RuboCop::Cop::Lint::EachWithObjectArgument","","RuboCop/Cop/Lint/EachWithObjectArgument.html","","<p>This cop checks if each_with_object is called with an immutable argument.\nSince the argument is the object …\n"],["RuboCop::Cop::Lint::ElseLayout","","RuboCop/Cop/Lint/ElseLayout.html","","<p>This cop checks for odd else block layout - like having an expression on\nthe same line as the else keyword, …\n"],["RuboCop::Cop::Lint::EmptyEnsure","","RuboCop/Cop/Lint/EmptyEnsure.html","","<p>This cop checks for empty `ensure` blocks\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">some_method</span>\n  <span class=\"ruby-identifier\">do_something</span>\n<span class=\"ruby-keyword\">ensure</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["RuboCop::Cop::Lint::EmptyExpression","","RuboCop/Cop/Lint/EmptyExpression.html","","<p>This cop checks for the presence of empty expressions.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-identifier\">foo</span> = ()\n<span class=\"ruby-keyword\">if</span> ()\n  <span class=\"ruby-identifier\">bar</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["RuboCop::Cop::Lint::EmptyInterpolation","","RuboCop/Cop/Lint/EmptyInterpolation.html","","<p>This cop checks for empty interpolation.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-node\">&quot;result is #{}&quot;</span>\n</pre>\n"],["RuboCop::Cop::Lint::EmptyWhen","","RuboCop/Cop/Lint/EmptyWhen.html","","<p>This cop checks for the presence of `when` branches without a body.\n<p>@example\n\n<pre># bad\n\ncase foo\nwhen bar then ...</pre>\n"],["RuboCop::Cop::Lint::EndAlignment","","RuboCop/Cop/Lint/EndAlignment.html","","<p>This cop checks whether the end keywords are aligned properly.\n<p>Three modes are supported through the `EnforcedStyleAlignWith` …\n"],["RuboCop::Cop::Lint::EndInMethod","","RuboCop/Cop/Lint/EndInMethod.html","","<p>This cop checks for END blocks in method definitions.\n<p>@example\n\n<pre># bad\n\ndef some_method\n  END { do_something ...</pre>\n"],["RuboCop::Cop::Lint::EnsureReturn","","RuboCop/Cop/Lint/EnsureReturn.html","","<p>This cop checks for <strong>return</strong> from an <strong>ensure</strong>\nblock.\n<p>@example\n\n<pre># bad\n\nbegin\n  do_something\nensure\n  do_something_else ...</pre>\n"],["RuboCop::Cop::Lint::FloatOutOfRange","","RuboCop/Cop/Lint/FloatOutOfRange.html","","<p>This cop identifies Float literals which are, like, really really really\nreally really really really …\n"],["RuboCop::Cop::Lint::FormatParameterMismatch","","RuboCop/Cop/Lint/FormatParameterMismatch.html","","<p>This lint sees if there is a mismatch between the number of expected fields\nfor format/sprintf/#% and …\n"],["RuboCop::Cop::Lint::HandleExceptions","","RuboCop/Cop/Lint/HandleExceptions.html","","<p>This cop checks for <strong>rescue</strong> blocks with no body.\n<p>@example\n\n<pre># bad\n\ndef some_method\n  do_something\nrescue\n ...</pre>\n"],["RuboCop::Cop::Lint::ImplicitStringConcatenation","","RuboCop/Cop/Lint/ImplicitStringConcatenation.html","","<p>This cop checks for implicit string concatenation of string literals which\nare on the same line.\n<p>@example …\n"],["RuboCop::Cop::Lint::IneffectiveAccessModifier","","RuboCop/Cop/Lint/IneffectiveAccessModifier.html","","<p>This cop checks for `private` or `protected` access modifiers which are\napplied to a singleton method. …\n"],["RuboCop::Cop::Lint::InheritException","","RuboCop/Cop/Lint/InheritException.html","","<p>This cop looks for error classes inheriting from `Exception` and its\nstandard library subclasses, excluding …\n"],["RuboCop::Cop::Lint::InterpolationCheck","","RuboCop/Cop/Lint/InterpolationCheck.html","","<p>This cop checks for interpolation in a single quoted string.\n<p>@example\n\n<pre># bad\n\nfoo = &#39;something with #{interpolation} ...</pre>\n"],["RuboCop::Cop::Lint::LiteralAsCondition","","RuboCop/Cop/Lint/LiteralAsCondition.html","","<p>This cop checks for literals used as the conditions or as operands in\nand/or expressions serving as the …\n"],["RuboCop::Cop::Lint::LiteralInInterpolation","","RuboCop/Cop/Lint/LiteralInInterpolation.html","","<p>This cop checks for interpolated literals.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-node\">&quot;result is #{10}&quot;</span>\n</pre>\n"],["RuboCop::Cop::Lint::Loop","","RuboCop/Cop/Lint/Loop.html","","<p>This cop checks for uses of *begin…end while/until something*.\n<p>@example\n\n<pre># bad\n\n# using while\nbegin\n  ...</pre>\n"],["RuboCop::Cop::Lint::MultipleCompare","","RuboCop/Cop/Lint/MultipleCompare.html","","<p>In math and Python, we can use `x &lt; y &lt; z` style comparison to\ncompare multiple value. However …\n"],["RuboCop::Cop::Lint::NestedMethodDefinition","","RuboCop/Cop/Lint/NestedMethodDefinition.html","","<p>This cop checks for nested method definitions.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-comment\"># `bar` definition actually produces methods ...</span>\n</pre>\n"],["RuboCop::Cop::Lint::NextWithoutAccumulator","","RuboCop/Cop/Lint/NextWithoutAccumulator.html","","<p>Don&#39;t omit the accumulator when calling `next` in a `reduce` block.\n<p>@example\n\n<pre># bad\n\nresult = (1..4).reduce(0) ...</pre>\n"],["RuboCop::Cop::Lint::NonLocalExitFromIterator","","RuboCop/Cop/Lint/NonLocalExitFromIterator.html","","<p>This cop checks for non-local exits from iterators without a return value.\nIt registers an offense under …\n"],["RuboCop::Cop::Lint::ParenthesesAsGroupedExpression","","RuboCop/Cop/Lint/ParenthesesAsGroupedExpression.html","","<p>Checks for space between a the name of a called method and a left\nparenthesis.\n<p>@example\n\n<pre># bad\n\nputs (x ...</pre>\n"],["RuboCop::Cop::Lint::PercentStringArray","","RuboCop/Cop/Lint/PercentStringArray.html","","<p>This cop checks for quotes and commas in %w, e.g. `%w(&#39;foo&#39;,\n“bar”)`\n<p>It is more likely …\n"],["RuboCop::Cop::Lint::PercentSymbolArray","","RuboCop/Cop/Lint/PercentSymbolArray.html","","<p>This cop checks for colons and commas in %i, e.g. `%i(:foo, :bar)`\n<p>It is more likely that the additional …\n"],["RuboCop::Cop::Lint::RandOne","","RuboCop/Cop/Lint/RandOne.html","","<p>This cop checks for `rand(1)` calls. Such calls always return `0`.\n<p>@example\n\n<pre># bad\n\nrand 1\nKernel.rand(-1) ...</pre>\n"],["RuboCop::Cop::Lint::RedundantWithIndex","","RuboCop/Cop/Lint/RedundantWithIndex.html","","<p>This cop checks for redundant `with_index`.\n<p>@example\n\n<pre># bad\nary.each_with_index do |v|\n  v\nend\n\n# good\nary.each ...</pre>\n"],["RuboCop::Cop::Lint::RedundantWithObject","","RuboCop/Cop/Lint/RedundantWithObject.html","","<p>This cop checks for redundant `with_object`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-identifier\">ary</span>.<span class=\"ruby-identifier\">each_with_object</span>([]) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">v</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">v</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["RuboCop::Cop::Lint::RegexpAsCondition","","RuboCop/Cop/Lint/RegexpAsCondition.html","","<p>This cop checks for regexp literals used as `match-current-line`. If a\nregexp literal is in condition, …\n"],["RuboCop::Cop::Lint::RequireParentheses","","RuboCop/Cop/Lint/RequireParentheses.html","","<p>This cop checks for expressions where there is a call to a predicate method\nwith at least one argument, …\n"],["RuboCop::Cop::Lint::RescueException","","RuboCop/Cop/Lint/RescueException.html","","<p>This cop checks for <strong>rescue</strong> blocks targeting the Exception\nclass.\n<p>@example\n\n<pre># bad\n\nbegin\n  do_something\nrescue ...</pre>\n"],["RuboCop::Cop::Lint::RescueType","","RuboCop/Cop/Lint/RescueType.html","","<p>Check for arguments to `rescue` that will result in a `TypeError` if an\nexception is raised.\n<p>@example …\n"],["RuboCop::Cop::Lint::RescueWithoutErrorClass","","RuboCop/Cop/Lint/RescueWithoutErrorClass.html","","<p>This cop checks for uses of `rescue` with no error class specified.\n<p>@example\n\n<pre># good\nbegin\n  foo\nrescue ...</pre>\n"],["RuboCop::Cop::Lint::ReturnInVoidContext","","RuboCop/Cop/Lint/ReturnInVoidContext.html","","<p>This cop checks for the use of a return with a value in a context where the\nvalue will be ignored. (initialize …\n"],["RuboCop::Cop::Lint::SafeNavigationChain","","RuboCop/Cop/Lint/SafeNavigationChain.html","","<p>The safe navigation operator returns nil if the receiver is nil.  If you\nchain an ordinary method call …\n"],["RuboCop::Cop::Lint::ScriptPermission","","RuboCop/Cop/Lint/ScriptPermission.html","","<p>This cop checks if a file which has a shebang line as its first line is\ngranted execute permission.\n"],["RuboCop::Cop::Lint::ShadowedException","","RuboCop/Cop/Lint/ShadowedException.html","","<p>This cop checks for a rescued exception that get shadowed by a less\nspecific exception being rescued …\n"],["RuboCop::Cop::Lint::ShadowingOuterLocalVariable","","RuboCop/Cop/Lint/ShadowingOuterLocalVariable.html","","<p>This cop looks for use of the same name as outer local variables for block\narguments or block local variables. …\n"],["RuboCop::Cop::Lint::StringConversionInInterpolation","","RuboCop/Cop/Lint/StringConversionInInterpolation.html","","<p>This cop checks for string conversion in string interpolation, which is\nredundant.\n<p>@example\n\n<pre># bad\n\n&quot;result ...</pre>\n"],["RuboCop::Cop::Lint::Syntax","","RuboCop/Cop/Lint/Syntax.html","","<p>This is actually not a cop and inspects nothing. It just provides methods\nto repack Parser&#39;s diagnostics/errors …\n"],["RuboCop::Cop::Lint::UnderscorePrefixedVariableName","","RuboCop/Cop/Lint/UnderscorePrefixedVariableName.html","","<p>This cop checks for underscore-prefixed variables that are actually used.\n<p>@example\n\n<pre># bad\n\n[1, 2, 3].each ...</pre>\n"],["RuboCop::Cop::Lint::UnifiedInteger","","RuboCop/Cop/Lint/UnifiedInteger.html","","<p>This cop checks for using Fixnum or Bignum constant.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">is_a?</span>(<span class=\"ruby-constant\">Fixnum</span>)\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">is_a?</span>(<span class=\"ruby-constant\">Bignum</span>)\n</pre>\n"],["RuboCop::Cop::Lint::UnneededDisable","","RuboCop/Cop/Lint/UnneededDisable.html","","<p>This cop detects instances of rubocop:disable comments that can be removed\nwithout causing any offenses …\n"],["RuboCop::Cop::Lint::UnneededRequireStatement","","RuboCop/Cop/Lint/UnneededRequireStatement.html","","<p>Checks for unnecessary `require` statement.\n<p>The following features are unnecessary `require` statement …\n"],["RuboCop::Cop::Lint::UnneededSplatExpansion","","RuboCop/Cop/Lint/UnneededSplatExpansion.html","","<p>This cop checks for unneeded usages of splat expansion\n<p>@example\n\n<pre># bad\n\na = *[1, 2, 3]\na = *&#39;a&#39;\na = *1\n ...</pre>\n"],["RuboCop::Cop::Lint::UnreachableCode","","RuboCop/Cop/Lint/UnreachableCode.html","","<p>This cop checks for unreachable code. The check are based on the presence\nof flow of control statement …\n"],["RuboCop::Cop::Lint::UnusedArgument","","RuboCop/Cop/Lint/UnusedArgument.html","","<p>Common functionality for cops handling unused arguments.\n"],["RuboCop::Cop::Lint::UnusedBlockArgument","","RuboCop/Cop/Lint/UnusedBlockArgument.html","","<p>This cop checks for unused block arguments.\n<p>@example\n\n<pre># bad\n\ndo_something do |used, unused|\n  puts used ...</pre>\n"],["RuboCop::Cop::Lint::UnusedMethodArgument","","RuboCop/Cop/Lint/UnusedMethodArgument.html","","<p>This cop checks for unused method arguments.\n<p>@example\n\n<pre># bad\n\ndef some_method(used, unused, _unused_but_allowed) ...</pre>\n"],["RuboCop::Cop::Lint::UriEscapeUnescape","","RuboCop/Cop/Lint/UriEscapeUnescape.html","","<p>This cop identifies places where `URI.escape` can be replaced by\n`CGI.escape`, `URI.encode_www_form` …\n"],["RuboCop::Cop::Lint::UriRegexp","","RuboCop/Cop/Lint/UriRegexp.html","","<p>This cop identifies places where `URI.regexp` is obsolete and should not be\nused. Instead, use `URI::DEFAULT_PARSER.make_regexp`. …\n"],["RuboCop::Cop::Lint::UselessAccessModifier","","RuboCop/Cop/Lint/UselessAccessModifier.html","","<p>This cop checks for redundant access modifiers, including those with no\ncode, those which are repeated, …\n"],["RuboCop::Cop::Lint::UselessAssignment","","RuboCop/Cop/Lint/UselessAssignment.html","","<p>This cop checks for every useless assignment to local variable in every\nscope. The basic idea for this …\n"],["RuboCop::Cop::Lint::UselessComparison","","RuboCop/Cop/Lint/UselessComparison.html","","<p>This cop checks for comparison of something with itself.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">top</span> <span class=\"ruby-operator\">&gt;=</span> <span class=\"ruby-identifier\">x</span>.<span class=\"ruby-identifier\">top</span>\n</pre>\n"],["RuboCop::Cop::Lint::UselessElseWithoutRescue","","RuboCop/Cop/Lint/UselessElseWithoutRescue.html","","<p>This cop checks for useless `else` in `begin..end` without `rescue`.\n<p>@example\n\n<pre># bad\n\nbegin\n  do_something ...</pre>\n"],["RuboCop::Cop::Lint::UselessSetterCall","","RuboCop/Cop/Lint/UselessSetterCall.html","","<p>This cop checks for setter call to local variable as the final expression\nof a function definition.\n<p>@example …\n"],["RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html","","<p>This class tracks variable assignments in a method body and if a variable\ncontains object passed as argument …\n"],["RuboCop::Cop::Lint::Void","","RuboCop/Cop/Lint/Void.html","","<p>This cop checks for operators, variables and literals used in void context.\n<p>@example\n\n<pre># bad\n\ndef some_method ...</pre>\n"],["RuboCop::Cop::MatchRange","","RuboCop/Cop/MatchRange.html","","<p>Common functionality for obtaining source ranges from regexp matches\n"],["RuboCop::Cop::MessageAnnotator","","RuboCop/Cop/MessageAnnotator.html","","<p>Message Annotator class annotates a basic offense message based on params\npassed into initializer.\n<p>@see …\n"],["RuboCop::Cop::MethodComplexity","","RuboCop/Cop/MethodComplexity.html","","<p>This module handles measurement and reporting of complexity in methods.\n"],["RuboCop::Cop::MethodPreference","","RuboCop/Cop/MethodPreference.html","","<p>Common code for cops that deal with preferred methods.\n"],["RuboCop::Cop::Metrics","","RuboCop/Cop/Metrics.html","",""],["RuboCop::Cop::Metrics::AbcSize","","RuboCop/Cop/Metrics/AbcSize.html","","<p>This cop checks that the ABC size of methods is not higher than the\nconfigured maximum. The ABC size …\n"],["RuboCop::Cop::Metrics::BlockLength","","RuboCop/Cop/Metrics/BlockLength.html","","<p>This cop checks if the length of a block exceeds some maximum value.\nComment lines can optionally be …\n"],["RuboCop::Cop::Metrics::BlockNesting","","RuboCop/Cop/Metrics/BlockNesting.html","","<p>This cop checks for excessive nesting of conditional and looping\nconstructs.\n<p>You can configure if blocks …\n"],["RuboCop::Cop::Metrics::ClassLength","","RuboCop/Cop/Metrics/ClassLength.html","","<p>This cop checks if the length a class exceeds some maximum value. Comment\nlines can optionally be ignored. …\n"],["RuboCop::Cop::Metrics::CyclomaticComplexity","","RuboCop/Cop/Metrics/CyclomaticComplexity.html","","<p>This cop checks that the cyclomatic complexity of methods is not higher\nthan the configured maximum. …\n"],["RuboCop::Cop::Metrics::LineLength","","RuboCop/Cop/Metrics/LineLength.html","","<p>This cop checks the length of lines in the source code. The maximum length\nis configurable.\n"],["RuboCop::Cop::Metrics::MethodLength","","RuboCop/Cop/Metrics/MethodLength.html","","<p>This cop checks if the length of a method exceeds some maximum value.\nComment lines can optionally be …\n"],["RuboCop::Cop::Metrics::ModuleLength","","RuboCop/Cop/Metrics/ModuleLength.html","","<p>This cop checks if the length a module exceeds some maximum value. Comment\nlines can optionally be ignored. …\n"],["RuboCop::Cop::Metrics::ParameterLists","","RuboCop/Cop/Metrics/ParameterLists.html","","<p>This cop checks for methods with too many parameters. The maximum number of\nparameters is configurable. …\n"],["RuboCop::Cop::Metrics::PerceivedComplexity","","RuboCop/Cop/Metrics/PerceivedComplexity.html","","<p>This cop tries to produce a complexity score that&#39;s a measure of the\ncomplexity the reader experiences …\n"],["RuboCop::Cop::MinBodyLength","","RuboCop/Cop/MinBodyLength.html","","<p>Common functionality for checking minimum body length.\n"],["RuboCop::Cop::MultilineExpressionIndentation","","RuboCop/Cop/MultilineExpressionIndentation.html","","<p>Common functionality for checking multiline method calls and binary\noperations.\n"],["RuboCop::Cop::MultilineLiteralBraceLayout","","RuboCop/Cop/MultilineLiteralBraceLayout.html","","<p>Common functionality for checking the closing brace of a literal is either\non the same line as the last …\n"],["RuboCop::Cop::Naming","","RuboCop/Cop/Naming.html","",""],["RuboCop::Cop::Naming::AccessorMethodName","","RuboCop/Cop/Naming/AccessorMethodName.html","","<p>This cop makes sure that accessor methods are named properly.\n<p>@example\n\n<pre># bad\ndef set_attribute(value) ... ...</pre>\n"],["RuboCop::Cop::Naming::AsciiIdentifiers","","RuboCop/Cop/Naming/AsciiIdentifiers.html","","<p>This cop checks for non-ascii characters in identifier names.\n"],["RuboCop::Cop::Naming::BinaryOperatorParameterName","","RuboCop/Cop/Naming/BinaryOperatorParameterName.html","","<p>This cop makes sure that certain binary operator methods have their sole \nparameter named `other`.\n<p>@example …\n"],["RuboCop::Cop::Naming::ClassAndModuleCamelCase","","RuboCop/Cop/Naming/ClassAndModuleCamelCase.html","","<p>This cops checks for class and module names with an underscore in them.\n"],["RuboCop::Cop::Naming::ConstantName","","RuboCop/Cop/Naming/ConstantName.html","","<p>This cop checks whether constant names are written using\nSCREAMING_SNAKE_CASE.\n<p>To avoid false positives, …\n"],["RuboCop::Cop::Naming::FileName","","RuboCop/Cop/Naming/FileName.html","","<p>This cop makes sure that Ruby source files have snake_case names. Ruby\nscripts (i.e. source files with …\n"],["RuboCop::Cop::Naming::HeredocDelimiterCase","","RuboCop/Cop/Naming/HeredocDelimiterCase.html","","<p>This cop checks that your heredocs are using the configured case. By\ndefault it is configured to enforce …\n"],["RuboCop::Cop::Naming::HeredocDelimiterNaming","","RuboCop/Cop/Naming/HeredocDelimiterNaming.html","","<p>This cop checks that your heredocs are using meaningful delimiters. By\ndefault it disallows `END` and …\n"],["RuboCop::Cop::Naming::MethodName","","RuboCop/Cop/Naming/MethodName.html","","<p>This cop makes sure that all methods use the configured style, snake_case\nor camelCase, for their names. …\n"],["RuboCop::Cop::Naming::PredicateName","","RuboCop/Cop/Naming/PredicateName.html","","<p>This cop makes sure that predicates are named properly.\n<p>@example\n\n<pre># bad\ndef is_even?(value) ...\n\n# good ...</pre>\n"],["RuboCop::Cop::Naming::VariableName","","RuboCop/Cop/Naming/VariableName.html","","<p>This cop makes sure that all variables use the configured style, snake_case\nor camelCase, for their names. …\n"],["RuboCop::Cop::Naming::VariableNumber","","RuboCop/Cop/Naming/VariableNumber.html","","<p>This cop makes sure that all numbered variables use the configured style,\nsnake_case, normalcase or  …\n"],["RuboCop::Cop::NegativeConditional","","RuboCop/Cop/NegativeConditional.html","","<p>Some common code shared between `NegatedIf` and `NegatedWhile` cops.\n"],["RuboCop::Cop::Offense","","RuboCop/Cop/Offense.html","","<p>An offense represents a style violation detected by RuboCop.\n"],["RuboCop::Cop::OnNormalIfUnless","","RuboCop/Cop/OnNormalIfUnless.html","","<p>Common functionality for cops checking if and unless expressions.\n"],["RuboCop::Cop::OrderedGemNode","","RuboCop/Cop/OrderedGemNode.html","","<p>Common functionality for Bundler/OrderedGems and\nGemspec/OrderedDependencies.\n"],["RuboCop::Cop::Parentheses","","RuboCop/Cop/Parentheses.html","","<p>Common functionality for handling parentheses.\n"],["RuboCop::Cop::ParserDiagnostic","","RuboCop/Cop/ParserDiagnostic.html","","<p>Common functionality for cops which processes Parser&#39;s diagnostics.\nThis mixin requires its user …\n"],["RuboCop::Cop::PercentArray","","RuboCop/Cop/PercentArray.html","","<p>Common functionality for handling percent arrays.\n"],["RuboCop::Cop::PercentLiteral","","RuboCop/Cop/PercentLiteral.html","","<p>Common functionality for handling percent literals.\n"],["RuboCop::Cop::Performance","","RuboCop/Cop/Performance.html","",""],["RuboCop::Cop::Performance::Caller","","RuboCop/Cop/Performance/Caller.html","","<p>This cop identifies places where `caller` can be replaced by\n`caller(n..n).first`.\n<p>@example\n\n<pre># bad\ncaller[1] ...</pre>\n"],["RuboCop::Cop::Performance::CaseWhenSplat","","RuboCop/Cop/Performance/CaseWhenSplat.html","","<p>Place `when` conditions that use splat at the end of the list of `when`\nbranches.\n<p>Ruby has to allocate …\n"],["RuboCop::Cop::Performance::Casecmp","","RuboCop/Cop/Performance/Casecmp.html","","<p>This cop identifies places where a case-insensitive string comparison can\nbetter be implemented using …\n"],["RuboCop::Cop::Performance::CompareWithBlock","","RuboCop/Cop/Performance/CompareWithBlock.html","","<p>This cop identifies places where `sort { |a, b| a.foo &lt;=&gt; b.foo }`\ncan be replaced by `sort_by(&amp;:foo)`. …\n"],["RuboCop::Cop::Performance::Count","","RuboCop/Cop/Performance/Count.html","","<p>This cop is used to identify usages of `count` on an `Enumerable` that\nfollow calls to `select` or `reject`. …\n"],["RuboCop::Cop::Performance::Detect","","RuboCop/Cop/Performance/Detect.html","","<p>This cop is used to identify usages of `select.first`, `select.last`,\n`find_all.first`, and `find_all.last` …\n"],["RuboCop::Cop::Performance::DoubleStartEndWith","","RuboCop/Cop/Performance/DoubleStartEndWith.html","","<p>This cop checks for double `#start_with?` or `#end_with?` calls separated\nby `||`. In some cases such …\n"],["RuboCop::Cop::Performance::EndWith","","RuboCop/Cop/Performance/EndWith.html","","<p>This cop identifies unnecessary use of a regex where `String#end_with?`\nwould suffice.\n<p>@example\n\n<pre>@bad\n&#39;abc&#39; ...</pre>\n"],["RuboCop::Cop::Performance::FixedSize","","RuboCop/Cop/Performance/FixedSize.html","","<p>Do not compute the size of statically sized objects.\n"],["RuboCop::Cop::Performance::FlatMap","","RuboCop/Cop/Performance/FlatMap.html","","<p>This cop is used to identify usages of\n<p>@example\n\n<pre># bad\n[1, 2, 3, 4].map { |e| [e, e] }.flatten(1)\n[1, 2, ...</pre>\n"],["RuboCop::Cop::Performance::HashEachMethods","","RuboCop/Cop/Performance/HashEachMethods.html","","<p>This cop checks for uses of `each_key` and `each_value` Hash methods.\n<p>Note: If you have an array of two-element …\n"],["RuboCop::Cop::Performance::LstripRstrip","","RuboCop/Cop/Performance/LstripRstrip.html","","<p>This cop identifies places where `lstrip.rstrip` can be replaced by\n`strip`.\n<p>@example\n\n<pre>@bad\n&#39;abc&#39;.lstrip.rstrip ...</pre>\n"],["RuboCop::Cop::Performance::RangeInclude","","RuboCop/Cop/Performance/RangeInclude.html","","<p>This cop identifies uses of `Range#include?`, which iterates over each item\nin a `Range` to see if a …\n"],["RuboCop::Cop::Performance::RedundantBlockCall","","RuboCop/Cop/Performance/RedundantBlockCall.html","","<p>This cop identifies the use of a `&amp;block` parameter and `block.call`\nwhere `yield` would do just …\n"],["RuboCop::Cop::Performance::RedundantMatch","","RuboCop/Cop/Performance/RedundantMatch.html","","<p>This cop identifies the use of `Regexp#match` or `String#match`, which\nreturns `#&lt;MatchData&gt;`/`nil`. …\n"],["RuboCop::Cop::Performance::RedundantMerge","","RuboCop/Cop/Performance/RedundantMerge.html","","<p>This cop identifies places where `Hash#merge!` can be replaced by\n`Hash#[]=`.\n<p>@example\n\n<pre>hash.merge!(a: 1) ...</pre>\n"],["RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector","","RuboCop/Cop/Performance/RedundantMerge/EachWithObjectInspector.html","","<p>A utility class for checking the use of values within an `each_with_object`\ncall.\n"],["RuboCop::Cop::Performance::RedundantSortBy","","RuboCop/Cop/Performance/RedundantSortBy.html","","<p>This cop identifies places where `sort_by { … }` can be replaced by `sort`.\n<p>@example\n\n<pre>@bad\narray.sort_by ...</pre>\n"],["RuboCop::Cop::Performance::RegexpMatch","","RuboCop/Cop/Performance/RegexpMatch.html","","<p>In Ruby 2.4, `String#match?`, `Regexp#match?` and `Symbol#match?` have been\nadded. The methods are faster …\n"],["RuboCop::Cop::Performance::ReverseEach","","RuboCop/Cop/Performance/ReverseEach.html","","<p>This cop is used to identify usages of `reverse.each` and change them to\nuse `reverse_each` instead. …\n"],["RuboCop::Cop::Performance::Sample","","RuboCop/Cop/Performance/Sample.html","","<p>This cop is used to identify usages of `shuffle.first`, `shuffle.last` and\n`shuffle[]` and change them …\n"],["RuboCop::Cop::Performance::Size","","RuboCop/Cop/Performance/Size.html","","<p>This cop is used to identify usages of `count` on an `Array` and `Hash` and\nchange them to `size`.\n<p>@example …\n"],["RuboCop::Cop::Performance::StartWith","","RuboCop/Cop/Performance/StartWith.html","","<p>This cop identifies unnecessary use of a regex where `String#start_with?`\nwould suffice.\n<p>@example\n\n<pre>@bad ...</pre>\n"],["RuboCop::Cop::Performance::StringReplacement","","RuboCop/Cop/Performance/StringReplacement.html","","<p>This cop identifies places where `gsub` can be replaced by `tr` or\n`delete`.\n<p>@example\n\n<pre>@bad\n&#39;abc&#39;.gsub(&#39;b&#39;, ...</pre>\n"],["RuboCop::Cop::Performance::TimesMap","","RuboCop/Cop/Performance/TimesMap.html","","<p>This cop checks for .times.map calls. In most cases such calls can be\nreplaced with an explicit array …\n"],["RuboCop::Cop::Performance::UnfreezeString","","RuboCop/Cop/Performance/UnfreezeString.html","","<p>In Ruby 2.3 or later, use unary plus operator to unfreeze a string literal\ninstead of `String#dup` and …\n"],["RuboCop::Cop::Performance::UriDefaultParser","","RuboCop/Cop/Performance/UriDefaultParser.html","","<p>This cop identifies places where `URI::Parser.new` can be replaced by\n`URI::DEFAULT_PARSER`.\n<p>@example …\n"],["RuboCop::Cop::PrecedingFollowingAlignment","","RuboCop/Cop/PrecedingFollowingAlignment.html","","<p>Common functionality for checking whether an AST node/token is aligned with\nsomething on a preceding …\n"],["RuboCop::Cop::Rails","","RuboCop/Cop/Rails.html","",""],["RuboCop::Cop::Rails::ActionFilter","","RuboCop/Cop/Rails/ActionFilter.html","","<p>This cop enforces the consistent use of action filter methods.\n<p>The cop is configurable and can enforce …\n"],["RuboCop::Cop::Rails::ActiveSupportAliases","","RuboCop/Cop/Rails/ActiveSupportAliases.html","","<p>This cop checks that ActiveSupport aliases to core ruby methods are not\nused.\n<p>@example\n\n<pre># good\n&#39;some_string&#39;.start_with?(&#39;prefix&#39;) ...</pre>\n"],["RuboCop::Cop::Rails::ApplicationJob","","RuboCop/Cop/Rails/ApplicationJob.html","","<p>This cop checks that jobs subclass ApplicationJob with Rails 5.0.\n<p>@example\n\n<pre># good\nclass Rails5Job &lt; ApplicationJob ...</pre>\n"],["RuboCop::Cop::Rails::ApplicationRecord","","RuboCop/Cop/Rails/ApplicationRecord.html","","<p>This cop checks that models subclass ApplicationRecord with Rails 5.0.\n<p>@example\n\n<pre># good\nclass Rails5Model ...</pre>\n"],["RuboCop::Cop::Rails::Blank","","RuboCop/Cop/Rails/Blank.html","","<p>This cops checks for code that can be changed to `blank?`. Settings:\n\n<pre>NilOrEmpty: Convert checks for `nil` ...</pre>\n"],["RuboCop::Cop::Rails::Date","","RuboCop/Cop/Rails/Date.html","","<p>This cop checks for the correct use of Date methods, such as Date.today,\nDate.current etc.\n<p>Using Date.today …\n"],["RuboCop::Cop::Rails::Delegate","","RuboCop/Cop/Rails/Delegate.html","","<p>This cop looks for delegations that could have been created automatically\nwith the `delegate` method. …\n"],["RuboCop::Cop::Rails::DelegateAllowBlank","","RuboCop/Cop/Rails/DelegateAllowBlank.html","","<p>This cop looks for delegations that pass :allow_blank as an option instead\nof :allow_nil. :allow_blank …\n"],["RuboCop::Cop::Rails::DynamicFindBy","","RuboCop/Cop/Rails/DynamicFindBy.html","","<p>This cop checks dynamic `find_by_*` methods. Use `find_by` instead of\ndynamic method. See. github.com/bbatsov/rails-style-guide#find_by …\n"],["RuboCop::Cop::Rails::EnumUniqueness","","RuboCop/Cop/Rails/EnumUniqueness.html","","<p>This cop looks for duplicate values in enum declarations.\n<p>@example\n\n<pre># bad\nenum status: { active: 0, archived: ...</pre>\n"],["RuboCop::Cop::Rails::Exit","","RuboCop/Cop/Rails/Exit.html","","<p>This cop enforces that &#39;exit&#39; calls are not used within a rails\napp. Valid options are instead …\n"],["RuboCop::Cop::Rails::FilePath","","RuboCop/Cop/Rails/FilePath.html","","<p>This cop is used to identify usages of file path joining process to use\n`Rails.root.join` clause.\n<p>@example …\n"],["RuboCop::Cop::Rails::FindBy","","RuboCop/Cop/Rails/FindBy.html","","<p>This cop is used to identify usages of `where.first` and change them to use\n`find_by` instead.\n<p>@example …\n"],["RuboCop::Cop::Rails::FindEach","","RuboCop/Cop/Rails/FindEach.html","","<p>This cop is used to identify usages of `all.each` and change them to use\n`all.find_each` instead.\n<p>@example …\n"],["RuboCop::Cop::Rails::HasAndBelongsToMany","","RuboCop/Cop/Rails/HasAndBelongsToMany.html","","<p>This cop checks for the use of the has_and_belongs_to_many macro.\n"],["RuboCop::Cop::Rails::HasManyOrHasOneDependent","","RuboCop/Cop/Rails/HasManyOrHasOneDependent.html","","<p>This cop looks for `has_many` or `has_one` associations that don&#39;t\nspecify a `:dependent` option. …\n"],["RuboCop::Cop::Rails::HttpPositionalArguments","","RuboCop/Cop/Rails/HttpPositionalArguments.html","","<p>This cop is used to identify usages of http methods like `get`, `post`,\n`put`, `patch` without the usage …\n"],["RuboCop::Cop::Rails::NotNullColumn","","RuboCop/Cop/Rails/NotNullColumn.html","","<p>This cop checks for add_column call with NOT NULL constraint in migration\nfile.\n<p>@example\n\n<pre># bad\nadd_column ...</pre>\n"],["RuboCop::Cop::Rails::Output","","RuboCop/Cop/Rails/Output.html","","<p>This cop checks for the use of output calls like puts and print\n"],["RuboCop::Cop::Rails::OutputSafety","","RuboCop/Cop/Rails/OutputSafety.html","","<p>This cop checks for the use of output safety calls like html_safe, raw, and\nsafe_concat. These methods …\n"],["RuboCop::Cop::Rails::PluralizationGrammar","","RuboCop/Cop/Rails/PluralizationGrammar.html","","<p>This cop checks for correct grammar when using ActiveSupport&#39;s core\nextensions to the numeric classes. …\n"],["RuboCop::Cop::Rails::Present","","RuboCop/Cop/Rails/Present.html","","<p>This cops checks for code that can be changed to `blank?`. Settings:\n\n<pre>NotNilAndNotEmpty: Convert checks ...</pre>\n"],["RuboCop::Cop::Rails::ReadWriteAttribute","","RuboCop/Cop/Rails/ReadWriteAttribute.html","","<p>This cop checks for the use of the read_attribute or write_attribute\nmethods.\n<p>@example\n\n<pre># bad\nx = read_attribute(:attr) ...</pre>\n"],["RuboCop::Cop::Rails::RelativeDateConstant","","RuboCop/Cop/Rails/RelativeDateConstant.html","","<p>This cop checks whether constant value isn&#39;t relative date. Because the\nrelative date will be evaluated …\n"],["RuboCop::Cop::Rails::RequestReferer","","RuboCop/Cop/Rails/RequestReferer.html","","<p>This cop checks for consistent uses of `request.referer` or\n`request.referrer`, depending on the cop&#39;s …\n"],["RuboCop::Cop::Rails::ReversibleMigration","","RuboCop/Cop/Rails/ReversibleMigration.html","","<p>This cop checks whether the change method of the migration file is\nreversible.\n<p>@example\n\n<pre># bad\ndef change ...</pre>\n"],["RuboCop::Cop::Rails::SafeNavigation","","RuboCop/Cop/Rails/SafeNavigation.html","","<p>This cop converts usages of `try!` to `&amp;.`. It can also be configured\nto convert `try`. It will convert …\n"],["RuboCop::Cop::Rails::SaveBang","","RuboCop/Cop/Rails/SaveBang.html","","<p>This cop identifies possible cases where Active Record save! or related\nshould be used instead of save …\n"],["RuboCop::Cop::Rails::ScopeArgs","","RuboCop/Cop/Rails/ScopeArgs.html","","<p>This cop checks for scope calls where it was passed a method (usually a\nscope) instead of a lambda/proc. …\n"],["RuboCop::Cop::Rails::SkipsModelValidations","","RuboCop/Cop/Rails/SkipsModelValidations.html","","<p>This cop checks for the use of methods which skip validations which are\nlisted in\nguides.rubyonrails.org/active_record_validations.html#skipping-validations\n…\n"],["RuboCop::Cop::Rails::TimeZone","","RuboCop/Cop/Rails/TimeZone.html","","<p>This cop checks for the use of Time methods without zone.\n<p>Built on top of Ruby on Rails style guide ( …\n"],["RuboCop::Cop::Rails::UniqBeforePluck","","RuboCop/Cop/Rails/UniqBeforePluck.html","","<p>Prefer the use of uniq (or distinct), before pluck instead of after.\n<p>The use of uniq before pluck is preferred …\n"],["RuboCop::Cop::Rails::UnknownEnv","","RuboCop/Cop/Rails/UnknownEnv.html","","<p>This cop checks that environments called with `Rails.env` predicates exist.\n<p>@example\n\n<pre># bad\nRails.env.proudction? ...</pre>\n"],["RuboCop::Cop::Rails::Validation","","RuboCop/Cop/Rails/Validation.html","","<p>This cop checks for the use of old-style attribute validation macros.\n"],["RuboCop::Cop::Registry","","RuboCop/Cop/Registry.html","","<p>Registry that tracks all cops by their badge and department.\n"],["RuboCop::Cop::RescueNode","","RuboCop/Cop/RescueNode.html","","<p>Common functionality for checking `rescue` nodes.\n"],["RuboCop::Cop::SafeAssignment","","RuboCop/Cop/SafeAssignment.html","","<p>Common functionality for safe assignment. By safe assignment we mean\nputting parentheses around an assignment …\n"],["RuboCop::Cop::SafeMode","","RuboCop/Cop/SafeMode.html","","<p>Common functionality for Rails safe mode.\n"],["RuboCop::Cop::Security","","RuboCop/Cop/Security.html","",""],["RuboCop::Cop::Security::Eval","","RuboCop/Cop/Security/Eval.html","","<p>This cop checks for the use of `Kernel#eval` and `Binding#eval`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n\n<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-identifier\">something</span>)\n<span class=\"ruby-identifier\">binding</span>.<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-identifier\">something</span>)\n</pre>\n"],["RuboCop::Cop::Security::JSONLoad","","RuboCop/Cop/Security/JSONLoad.html","","<p>This cop checks for the use of JSON class methods which have potential\nsecurity issues.\n<p>Autocorrect is …\n"],["RuboCop::Cop::Security::MarshalLoad","","RuboCop/Cop/Security/MarshalLoad.html","","<p>This cop checks for the use of Marshal class methods which have potential\nsecurity issues leading to …\n"],["RuboCop::Cop::Security::YAMLLoad","","RuboCop/Cop/Security/YAMLLoad.html","","<p>This cop checks for the use of YAML class methods which have potential\nsecurity issues leading to remote …\n"],["RuboCop::Cop::Severity","","RuboCop/Cop/Severity.html","","<p>Severity class is simple value object about severity\n"],["RuboCop::Cop::SpaceAfterPunctuation","","RuboCop/Cop/SpaceAfterPunctuation.html","","<p>Common functionality for cops checking for missing space after punctuation.\n"],["RuboCop::Cop::SpaceBeforePunctuation","","RuboCop/Cop/SpaceBeforePunctuation.html","","<p>Common functionality for cops checking for space before punctuation.\n"],["RuboCop::Cop::SpaceInside","","RuboCop/Cop/SpaceInside.html","","<p>Common functionality for checking for spaces inside various kinds of\nbrackets.\n"],["RuboCop::Cop::SpaceInside::Brackets","","RuboCop/Cop/SpaceInside/Brackets.html","","<p>Wraps info about the brackets. Makes it easy to check whether a token is\none of the brackets.\n<p>@example …\n"],["RuboCop::Cop::StatementModifier","","RuboCop/Cop/StatementModifier.html","","<p>Common functionality for modifier cops.\n"],["RuboCop::Cop::StringHelp","","RuboCop/Cop/StringHelp.html","","<p>Classes that include this module just implement functions to determine what\nis an offense and how to …\n"],["RuboCop::Cop::StringLiteralsHelp","","RuboCop/Cop/StringLiteralsHelp.html","","<p>Common functionality for cops checking single/double quotes.\n"],["RuboCop::Cop::Style","","RuboCop/Cop/Style.html","",""],["RuboCop::Cop::Style::Alias","","RuboCop/Cop/Style/Alias.html","","<p>This cop enforces the use of either `#alias` or `#alias_method` depending\non configuration. It also flags …\n"],["RuboCop::Cop::Style::AndOr","","RuboCop/Cop/Style/AndOr.html","","<p>This cop checks for uses of `and` and `or`, and suggests using `&amp;&amp;`\nand `|| instead`. It can …\n"],["RuboCop::Cop::Style::AnnotationComment","","RuboCop/Cop/Style/AnnotationComment.html","","<p>Common functionality related to annotation comments.\n"],["RuboCop::Cop::Style::ArrayJoin","","RuboCop/Cop/Style/ArrayJoin.html","","<p>This cop checks for uses of “*” as a substitute for <strong>join</strong>.\n<p>Not all cases can reliably checked, …\n"],["RuboCop::Cop::Style::AsciiComments","","RuboCop/Cop/Style/AsciiComments.html","","<p>This cop checks for non-ascii (non-English) characters in comments.\n"],["RuboCop::Cop::Style::Attr","","RuboCop/Cop/Style/Attr.html","","<p>This cop checks for uses of Module#attr.\n"],["RuboCop::Cop::Style::AutoResourceCleanup","","RuboCop/Cop/Style/AutoResourceCleanup.html","","<p>This cop checks for cases when you could use a block accepting version of a\nmethod that does automatic …\n"],["RuboCop::Cop::Style::BarePercentLiterals","","RuboCop/Cop/Style/BarePercentLiterals.html","","<p>This cop checks if usage of %() or %Q() matches configuration.\n"],["RuboCop::Cop::Style::BeginBlock","","RuboCop/Cop/Style/BeginBlock.html","","<p>This cop checks for BEGIN blocks.\n"],["RuboCop::Cop::Style::BlockComments","","RuboCop/Cop/Style/BlockComments.html","","<p>This cop looks for uses of block comments (=begin…=end).\n"],["RuboCop::Cop::Style::BlockDelimiters","","RuboCop/Cop/Style/BlockDelimiters.html","","<p>Check for uses of braces or do/end around single line or multi-line blocks.\n"],["RuboCop::Cop::Style::BracesAroundHashParameters","","RuboCop/Cop/Style/BracesAroundHashParameters.html","","<p>This cop checks for braces around the last parameter in a method call if\nthe last parameter is a hash. …\n"],["RuboCop::Cop::Style::CaseCorrector","","RuboCop/Cop/Style/CaseCorrector.html","","<p>Corrector to correct conditional assignment in `case` statements.\n"],["RuboCop::Cop::Style::CaseEquality","","RuboCop/Cop/Style/CaseEquality.html","","<p>This cop checks for uses of the case equality operator(===).\n"],["RuboCop::Cop::Style::CharacterLiteral","","RuboCop/Cop/Style/CharacterLiteral.html","","<p>Checks for uses of the character literal ?x.\n"],["RuboCop::Cop::Style::ClassAndModuleChildren","","RuboCop/Cop/Style/ClassAndModuleChildren.html","","<p>This cop checks the style of children definitions at classes and modules.\nBasically there are two different …\n"],["RuboCop::Cop::Style::ClassAndModuleChildren::class","","RuboCop/Cop/Style/ClassAndModuleChildren/class.html","",""],["RuboCop::Cop::Style::ClassCheck","","RuboCop/Cop/Style/ClassCheck.html","","<p>This cop enforces consistent use of `Object#is_a?` or `Object#kind_of?`.\n"],["RuboCop::Cop::Style::ClassMethods","","RuboCop/Cop/Style/ClassMethods.html","","<p>This cop checks for uses of the class/module name instead of self, when\ndefining class/module methods. …\n"],["RuboCop::Cop::Style::ClassVars","","RuboCop/Cop/Style/ClassVars.html","","<p>This cop checks for uses of class variables. Offenses are signaled only on\nassignment to class variables …\n"],["RuboCop::Cop::Style::CollectionMethods","","RuboCop/Cop/Style/CollectionMethods.html","","<p>This cop enforces the use of consistent method names from the Enumerable\nmodule.\n<p>Unfortunately we cannot …\n"],["RuboCop::Cop::Style::ColonMethodCall","","RuboCop/Cop/Style/ColonMethodCall.html","","<p>This cop checks for methods invoked via the  &mdash; operator instead\n\n<p>of the . operator (like FileUtils::rmdir …\n"],["RuboCop::Cop::Style::CommandLiteral","","RuboCop/Cop/Style/CommandLiteral.html","","<p>This cop enforces using “ or %x around command literals.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Good if EnforcedStyle is backticks ...</span>\n</pre>\n"],["RuboCop::Cop::Style::CommentAnnotation","","RuboCop/Cop/Style/CommentAnnotation.html","","<p>This cop checks that comment annotation keywords are written according to\nguidelines.\n"],["RuboCop::Cop::Style::CommentedKeyword","","RuboCop/Cop/Style/CommentedKeyword.html","","<p>This cop checks for comments put on the same line as some keywords. These\nkeywords are: `begin`, `class`, …\n"],["RuboCop::Cop::Style::ConditionalAssignment","","RuboCop/Cop/Style/ConditionalAssignment.html","","<p>Check for `if` and `case` statements where each branch is used for\nassignment to the same variable when …\n"],["RuboCop::Cop::Style::ConditionalAssignmentHelper","","RuboCop/Cop/Style/ConditionalAssignmentHelper.html","","<p>Helper module to provide common methods to classes needed for the\nConditionalAssignment Cop.\n"],["RuboCop::Cop::Style::ConditionalCorrectorHelper","","RuboCop/Cop/Style/ConditionalCorrectorHelper.html","","<p>Helper module to provide common methods to ConditionalAssignment correctors\n"],["RuboCop::Cop::Style::Copyright","","RuboCop/Cop/Style/Copyright.html","","<p>Check that a copyright notice was given in each source file.\n<p>The default regexp for an acceptable copyright …\n"],["RuboCop::Cop::Style::DateTime","","RuboCop/Cop/Style/DateTime.html","","<p>This cop checks for uses of `DateTime` that should be replaced by `Date` or\n`Time`.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad - uses ...</span>\n</pre>\n"],["RuboCop::Cop::Style::DefWithParentheses","","RuboCop/Cop/Style/DefWithParentheses.html","","<p>This cop checks for parentheses in the definition of a method, that does\nnot take any arguments. Both …\n"],["RuboCop::Cop::Style::Dir","","RuboCop/Cop/Style/Dir.html","","<p>This cop checks for places where the `#__dir__` method can replace more\ncomplex constructs to retrieve …\n"],["RuboCop::Cop::Style::Documentation","","RuboCop/Cop/Style/Documentation.html","","<p>This cop checks for missing top-level documentation of classes and modules.\nClasses with no body are …\n"],["RuboCop::Cop::Style::DocumentationMethod","","RuboCop/Cop/Style/DocumentationMethod.html","","<p>This cop checks for missing documentation comment for public methods. It\ncan optionally be configured …\n"],["RuboCop::Cop::Style::DoubleNegation","","RuboCop/Cop/Style/DoubleNegation.html","","<p>This cop checks for uses of double negation (!!) to convert something to a\nboolean value. As this is …\n"],["RuboCop::Cop::Style::EachForSimpleLoop","","RuboCop/Cop/Style/EachForSimpleLoop.html","","<p>This cop checks for loops which iterate a constant number of times, using a\nRange literal and `#each`. …\n"],["RuboCop::Cop::Style::EachWithObject","","RuboCop/Cop/Style/EachWithObject.html","","<p>This cop looks for inject / reduce calls where the passed in object is\nreturned at the end and so could …\n"],["RuboCop::Cop::Style::EmptyCaseCondition","","RuboCop/Cop/Style/EmptyCaseCondition.html","","<p>This cop checks for case statements with an empty condition.\n<p>@example\n\n<pre># bad:\ncase\nwhen x == 0\n  puts &#39;x ...</pre>\n"],["RuboCop::Cop::Style::EmptyElse","","RuboCop/Cop/Style/EmptyElse.html","","<p>Checks for empty else-clauses, possibly including comments and/or an\nexplicit `nil` depending on the …\n"],["RuboCop::Cop::Style::EmptyLiteral","","RuboCop/Cop/Style/EmptyLiteral.html","","<p>This cop checks for the use of a method, the result of which would be a\nliteral, like an empty array, …\n"],["RuboCop::Cop::Style::EmptyMethod","","RuboCop/Cop/Style/EmptyMethod.html","","<p>This cop checks for the formatting of empty method definitions. By default\nit enforces empty method definitions …\n"],["RuboCop::Cop::Style::Encoding","","RuboCop/Cop/Style/Encoding.html","","<p>This cop checks ensures source files have no utf-8 encoding comments.\n"],["RuboCop::Cop::Style::EndBlock","","RuboCop/Cop/Style/EndBlock.html","","<p>This cop checks for END blocks.\n"],["RuboCop::Cop::Style::EvenOdd","","RuboCop/Cop/Style/EvenOdd.html","","<p>This cop checks for places where Integer#even? or Integer#odd? should have\nbeen used.\n<p>@example\n\n<pre># bad\nif ...</pre>\n"],["RuboCop::Cop::Style::FlipFlop","","RuboCop/Cop/Style/FlipFlop.html","","<p>This cop looks for uses of flip flop operator\n"],["RuboCop::Cop::Style::For","","RuboCop/Cop/Style/For.html","","<p>This cop looks for uses of the <strong>for</strong> keyword, or\n<strong>each</strong> method. The preferred alternative is set in the  …\n"],["RuboCop::Cop::Style::FormatString","","RuboCop/Cop/Style/FormatString.html","","<p>This cop enforces the use of a single string formatting utility. Valid\noptions include Kernel#format …\n"],["RuboCop::Cop::Style::FormatStringToken","","RuboCop/Cop/Style/FormatStringToken.html","","<p>Use a consistent style for named format string tokens.\n<p>@example\n\n<pre>EnforcedStyle: annotated\n\n# bad\n\nformat(&#39;%{greeting}&#39;, ...</pre>\n"],["RuboCop::Cop::Style::FrozenStringLiteralComment","","RuboCop/Cop/Style/FrozenStringLiteralComment.html","","<p>This cop is designed to help upgrade to Ruby 3.0. It will add the comment\n`# frozen_string_literal: true` …\n"],["RuboCop::Cop::Style::GlobalVars","","RuboCop/Cop/Style/GlobalVars.html","","<p>This cops looks for uses of global variables. It does not report offenses\nfor built-in global variables. …\n"],["RuboCop::Cop::Style::GuardClause","","RuboCop/Cop/Style/GuardClause.html","","<p>Use a guard clause instead of wrapping the code inside a conditional\nexpression\n<p>@example\n\n<pre># bad\ndef test ...</pre>\n"],["RuboCop::Cop::Style::HashSyntax","","RuboCop/Cop/Style/HashSyntax.html","","<p>This cop checks hash literal syntax.\n<p>It can enforce either the use of the class hash rocket syntax or …\n"],["RuboCop::Cop::Style::IdenticalConditionalBranches","","RuboCop/Cop/Style/IdenticalConditionalBranches.html","","<p>This cop checks for identical lines at the beginning or end of each branch\nof a conditional statement. …\n"],["RuboCop::Cop::Style::IfCorrector","","RuboCop/Cop/Style/IfCorrector.html","","<p>Corrector to correct conditional assignment in `if` statements.\n"],["RuboCop::Cop::Style::IfInsideElse","","RuboCop/Cop/Style/IfInsideElse.html","","<p>If the `else` branch of a conditional consists solely of an `if` node, it\ncan be combined with the `else` …\n"],["RuboCop::Cop::Style::IfUnlessModifier","","RuboCop/Cop/Style/IfUnlessModifier.html","","<p>Checks for if and unless statements that would fit on one line if written\nas a modifier if/unless. The …\n"],["RuboCop::Cop::Style::IfUnlessModifierOfIfUnless","","RuboCop/Cop/Style/IfUnlessModifierOfIfUnless.html","","<p>Checks for if and unless statements used as modifiers of other if or unless\nstatements.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad ...</span>\n</pre>\n"],["RuboCop::Cop::Style::IfWithSemicolon","","RuboCop/Cop/Style/IfWithSemicolon.html","","<p>Checks for uses of semicolon in if statements.\n"],["RuboCop::Cop::Style::ImplicitRuntimeError","","RuboCop/Cop/Style/ImplicitRuntimeError.html","","<p>This cop checks for `raise` or `fail` statements which do not specify an\nexplicit exception class. (This …\n"],["RuboCop::Cop::Style::InfiniteLoop","","RuboCop/Cop/Style/InfiniteLoop.html","","<p>Use `Kernel#loop` for infinite loops.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-keyword\">while</span> <span class=\"ruby-keyword\">true</span>\n  <span class=\"ruby-identifier\">work</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-identifier\">loop</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">work</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["RuboCop::Cop::Style::InlineComment","","RuboCop/Cop/Style/InlineComment.html","","<p>This cop checks for trailing inline comments.\n<p>@example\n\n<pre># good\nfoo.each do |f|\n  # Standalone comment\n  ...</pre>\n"],["RuboCop::Cop::Style::InverseMethods","","RuboCop/Cop/Style/InverseMethods.html","","<p>This cop check for usages of not (`not` or `!`) called on a method when an\ninverse of that method can …\n"],["RuboCop::Cop::Style::Lambda","","RuboCop/Cop/Style/Lambda.html","","<p>This cop (by default) checks for uses of the lambda literal syntax for\nsingle line lambdas, and the method …\n"],["RuboCop::Cop::Style::LambdaCall","","RuboCop/Cop/Style/LambdaCall.html","","<p>This cop checks for use of the lambda.(args) syntax.\n<p>@example\n\n<pre># bad\nlambda.(x, y)\n\n# good\nlambda.call(x, ...</pre>\n"],["RuboCop::Cop::Style::LineEndConcatenation","","RuboCop/Cop/Style/LineEndConcatenation.html","","<p>This cop checks for string literal concatenation at the end of a line.\n<p>@example\n\n<pre># bad\nsome_str = &#39;ala&#39; ...</pre>\n"],["RuboCop::Cop::Style::MethodCallWithArgsParentheses","","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html","","<p>This cop checks presence of parentheses in method calls containing\nparameters. By default, macro methods …\n"],["RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html","","<p>This cop checks for unwanted parentheses in parameterless method calls.\n<p>@example\n\n<pre># bad\nobject.some_method() ...</pre>\n"],["RuboCop::Cop::Style::MethodCalledOnDoEndBlock","","RuboCop/Cop/Style/MethodCalledOnDoEndBlock.html","","<p>This cop checks for methods called on a do…end block. The point of this\ncheck is that it&#39;s easy …\n"],["RuboCop::Cop::Style::MethodDefParentheses","","RuboCop/Cop/Style/MethodDefParentheses.html","","<p>This cops checks for parentheses around the arguments in method\ndefinitions. Both instance and class/singleton …\n"],["RuboCop::Cop::Style::MethodMissing","","RuboCop/Cop/Style/MethodMissing.html","","<p>This cop checks for the presence of `method_missing` without also defining\n`respond_to_missing?` and …\n"],["RuboCop::Cop::Style::MinMax","","RuboCop/Cop/Style/MinMax.html","","<p>This cop checks for potential uses of `Enumerable#minmax`.\n<p>@example\n\n<pre>@bad\nbar = [foo.min, foo.max]\nreturn ...</pre>\n"],["RuboCop::Cop::Style::MissingElse","","RuboCop/Cop/Style/MissingElse.html","","<p>Checks for `if` expressions that do not have an `else` branch.\nSupportedStyles\n<p>if @example\n\n<pre># bad\nif condition ...</pre>\n"],["RuboCop::Cop::Style::MixinGrouping","","RuboCop/Cop/Style/MixinGrouping.html","","<p>This cop checks for grouping of mixins in `class` and `module` bodies. By\ndefault it enforces mixins …\n"],["RuboCop::Cop::Style::MixinUsage","","RuboCop/Cop/Style/MixinUsage.html","","<p>This cop checks that `include`, `extend` and `prepend` exists at the top\nlevel. Using these at the top …\n"],["RuboCop::Cop::Style::ModuleFunction","","RuboCop/Cop/Style/ModuleFunction.html","","<p>This cops checks for use of `extend self` or `module_function` in a module.\n<p>Supported styles are: module_function …\n"],["RuboCop::Cop::Style::MultilineBlockChain","","RuboCop/Cop/Style/MultilineBlockChain.html","","<p>This cop checks for chaining of a block after another block that spans\nmultiple lines.\n<p>@example\n\n<pre>Thread.list.find_all ...</pre>\n"],["RuboCop::Cop::Style::MultilineIfModifier","","RuboCop/Cop/Style/MultilineIfModifier.html","","<p>Checks for uses of if/unless modifiers with multiple-lines bodies.\n<p>@example\n\n<pre># bad\n{\n  result: &#39;this should ...</pre>\n"],["RuboCop::Cop::Style::MultilineIfThen","","RuboCop/Cop/Style/MultilineIfThen.html","","<p>Checks for uses of the `then` keyword in multi-line if statements.\n<p>@example This is considered bad practice: …\n"],["RuboCop::Cop::Style::MultilineMemoization","","RuboCop/Cop/Style/MultilineMemoization.html","","<p>This cop checks expressions wrapping styles for multiline memoization.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># EnforcedStyle: keyword ...</span>\n</pre>\n"],["RuboCop::Cop::Style::MultilineTernaryOperator","","RuboCop/Cop/Style/MultilineTernaryOperator.html","","<p>This cop checks for multi-line ternary op expressions.\n"],["RuboCop::Cop::Style::MultipleComparison","","RuboCop/Cop/Style/MultipleComparison.html","","<p>This cop checks against comparing a variable with multiple items, where\n`Array#include?` could be used …\n"],["RuboCop::Cop::Style::MutableConstant","","RuboCop/Cop/Style/MutableConstant.html","","<p>This cop checks whether some constant value isn&#39;t a mutable literal\n(e.g. array or hash).\n<p>@example …\n"],["RuboCop::Cop::Style::NegatedIf","","RuboCop/Cop/Style/NegatedIf.html","","<p>Checks for uses of if with a negated condition. Only ifs without else are\nconsidered. There are three …\n"],["RuboCop::Cop::Style::NegatedWhile","","RuboCop/Cop/Style/NegatedWhile.html","","<p>Checks for uses of while with a negated condition.\n"],["RuboCop::Cop::Style::NestedModifier","","RuboCop/Cop/Style/NestedModifier.html","","<p>This cop checks for nested use of if, unless, while and until in their\nmodifier form.\n<p>@example\n\n<pre># bad\nsomething ...</pre>\n"],["RuboCop::Cop::Style::NestedParenthesizedCalls","","RuboCop/Cop/Style/NestedParenthesizedCalls.html","","<p>This cop checks for unparenthesized method calls in the argument list of a\nparenthesized method call. …\n"],["RuboCop::Cop::Style::NestedTernaryOperator","","RuboCop/Cop/Style/NestedTernaryOperator.html","","<p>This cop checks for nested ternary op expressions.\n"],["RuboCop::Cop::Style::Next","","RuboCop/Cop/Style/Next.html","","<p>Use `next` to skip iteration instead of a condition at the end.\n<p>@example\n\n<pre># bad\n[1, 2].each do |a|\n  if ...</pre>\n"],["RuboCop::Cop::Style::NilComparison","","RuboCop/Cop/Style/NilComparison.html","","<p>This cop checks for comparison of something with nil using ==.\n<p>@example\n\n<pre># bad\nif x == nil\n\n# good\nif x.nil?</pre>\n"],["RuboCop::Cop::Style::NonNilCheck","","RuboCop/Cop/Style/NonNilCheck.html","","<p>This cop checks for non-nil checks, which are usually redundant.\n<p>@example\n\n<pre># bad\nif x != nil\n\n# good (when ...</pre>\n"],["RuboCop::Cop::Style::Not","","RuboCop/Cop/Style/Not.html","","<p>This cop checks for uses if the keyword <strong>not</strong> instead of !.\n"],["RuboCop::Cop::Style::NumericLiteralPrefix","","RuboCop/Cop/Style/NumericLiteralPrefix.html","","<p>This cop checks for octal, hex, binary and decimal literals using uppercase\nprefixes and corrects them …\n"],["RuboCop::Cop::Style::NumericLiterals","","RuboCop/Cop/Style/NumericLiterals.html","","<p>This cop checks for big numeric literals without _ between groups of digits\nin them.\n<p>@example\n\n<pre># bad\n\n1000000 ...</pre>\n"],["RuboCop::Cop::Style::NumericPredicate","","RuboCop/Cop/Style/NumericPredicate.html","","<p>This cop checks for usage of comparison operators (`==`, `&gt;`, `&lt;`) to\ntest numbers as zero, positive, …\n"],["RuboCop::Cop::Style::OneLineConditional","","RuboCop/Cop/Style/OneLineConditional.html","","<p>TODO: Make configurable. Checks for uses of if/then/else/end on a single\nline.\n"],["RuboCop::Cop::Style::OptionHash","","RuboCop/Cop/Style/OptionHash.html","","<p>This cop checks for options hashes and discourages them if the current Ruby\nversion supports keyword …\n"],["RuboCop::Cop::Style::OptionalArguments","","RuboCop/Cop/Style/OptionalArguments.html","","<p>This cop checks for optional arguments to methods that do not come at the\nend of the argument list\n<p>@example …\n"],["RuboCop::Cop::Style::OrAssignment","","RuboCop/Cop/Style/OrAssignment.html","","<p>This cop checks for potential usage of the `||=` operator.\n<p>@example\n\n<pre># bad\nname = name ? name : &#39;Bozhidar&#39; ...</pre>\n"],["RuboCop::Cop::Style::ParallelAssignment","","RuboCop/Cop/Style/ParallelAssignment.html","","<p>Checks for simple usages of parallel assignment. This will only complain\nwhen the number of variables …\n"],["RuboCop::Cop::Style::ParallelAssignment::AssignmentSorter","","RuboCop/Cop/Style/ParallelAssignment/AssignmentSorter.html","","<p>Helper class necessitated by silly design of TSort prior to Ruby 2.1 Newer\nversions have a better API …\n"],["RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html","","<p>An internal class for correcting parallel assignment\n"],["RuboCop::Cop::Style::ParallelAssignment::ModifierCorrector","","RuboCop/Cop/Style/ParallelAssignment/ModifierCorrector.html","","<p>An internal class for correcting parallel assignment guarded by if, unless,\nwhile, or until\n"],["RuboCop::Cop::Style::ParallelAssignment::RescueCorrector","","RuboCop/Cop/Style/ParallelAssignment/RescueCorrector.html","","<p>An internal class for correcting parallel assignment protected by rescue\n"],["RuboCop::Cop::Style::ParenthesesAroundCondition","","RuboCop/Cop/Style/ParenthesesAroundCondition.html","","<p>This cop checks for the presence of superfluous parentheses around the\ncondition of if/unless/while/until. …\n"],["RuboCop::Cop::Style::PercentLiteralDelimiters","","RuboCop/Cop/Style/PercentLiteralDelimiters.html","","<p>This cop enforces the consistent usage of `%`-literal delimiters.\n<p>Specify the &#39;default&#39; key to …\n"],["RuboCop::Cop::Style::PercentQLiterals","","RuboCop/Cop/Style/PercentQLiterals.html","","<p>This cop checks for usage of the %Q() syntax when %q() would do.\n"],["RuboCop::Cop::Style::PerlBackrefs","","RuboCop/Cop/Style/PerlBackrefs.html","","<p>This cop looks for uses of Perl-style regexp match backreferences like $1,\n$2, etc.\n"],["RuboCop::Cop::Style::PreferredHashMethods","","RuboCop/Cop/Style/PreferredHashMethods.html","","<p>This cop (by default) checks for uses of methods Hash#has_key? and\nHash#has_value? where it enforces …\n"],["RuboCop::Cop::Style::Proc","","RuboCop/Cop/Style/Proc.html","","<p>This cops checks for uses of Proc.new where Kernel#proc would be more\nappropriate.\n"],["RuboCop::Cop::Style::RaiseArgs","","RuboCop/Cop/Style/RaiseArgs.html","","<p>This cop checks the args passed to `fail` and `raise`. For exploded style\n(default), it recommends passing …\n"],["RuboCop::Cop::Style::RedundantBegin","","RuboCop/Cop/Style/RedundantBegin.html","","<p>This cop checks for redundant `begin` blocks.\n<p>Currently it checks for code like this:\n<p>@example\n"],["RuboCop::Cop::Style::RedundantConditional","","RuboCop/Cop/Style/RedundantConditional.html","","<p>This cop checks for redundant returning of true/false in conditionals.\n<p>@example\n\n<pre># bad\nx == y ? true : false ...</pre>\n"],["RuboCop::Cop::Style::RedundantException","","RuboCop/Cop/Style/RedundantException.html","","<p>This cop checks for RuntimeError as the argument of raise/fail.\n<p>It checks for code like this:\n<p>@example …\n"],["RuboCop::Cop::Style::RedundantFreeze","","RuboCop/Cop/Style/RedundantFreeze.html","","<p>This cop check for uses of Object#freeze on immutable objects.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-constant\">CONST</span> = <span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">freeze</span>\n\n<span class=\"ruby-comment\"># good ...</span>\n</pre>\n"],["RuboCop::Cop::Style::RedundantParentheses","","RuboCop/Cop/Style/RedundantParentheses.html","","<p>This cop checks for redundant parentheses.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n(<span class=\"ruby-identifier\">x</span>) <span class=\"ruby-keyword\">if</span> ((<span class=\"ruby-identifier\">y</span>.<span class=\"ruby-identifier\">z</span>).<span class=\"ruby-identifier\">nil?</span>)\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-identifier\">x</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">y</span>.<span class=\"ruby-identifier\">z</span>.<span class=\"ruby-identifier\">nil?</span>\n</pre>\n"],["RuboCop::Cop::Style::RedundantReturn","","RuboCop/Cop/Style/RedundantReturn.html","","<p>This cop checks for redundant `return` expressions.\n<p>@example\n\n<pre>def test\n  return something\nend\n\ndef test ...</pre>\n"],["RuboCop::Cop::Style::RedundantSelf","","RuboCop/Cop/Style/RedundantSelf.html","","<p>This cop checks for redundant uses of `self`.\n<p>`self` is only needed when:\n<p>Sending a message to same object …\n"],["RuboCop::Cop::Style::RegexpLiteral","","RuboCop/Cop/Style/RegexpLiteral.html","","<p>This cop enforces using // or %r around regular expressions.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Good if EnforcedStyle is slashes ...</span>\n</pre>\n"],["RuboCop::Cop::Style::RescueModifier","","RuboCop/Cop/Style/RescueModifier.html","","<p>This cop checks for uses of rescue in its modifier form.\n"],["RuboCop::Cop::Style::ReturnNil","","RuboCop/Cop/Style/ReturnNil.html","","<p>This cop enforces consistency between &#39;return nil&#39; and\n&#39;return&#39;.\n<p>Supported styles are: …\n"],["RuboCop::Cop::Style::SafeNavigation","","RuboCop/Cop/Style/SafeNavigation.html","","<p>This cop transforms usages of a method call safeguarded by a non `nil`\ncheck for the variable whose method …\n"],["RuboCop::Cop::Style::SelfAssignment","","RuboCop/Cop/Style/SelfAssignment.html","","<p>This cop enforces the use the shorthand for self-assignment.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-identifier\">x</span> = <span class=\"ruby-identifier\">x</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">1</span>\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-identifier\">x</span> <span class=\"ruby-operator\">+=</span> <span class=\"ruby-value\">1</span>\n</pre>\n"],["RuboCop::Cop::Style::Semicolon","","RuboCop/Cop/Style/Semicolon.html","","<p>This cop checks for multiple expressions placed on the same line. It also\nchecks for lines terminated …\n"],["RuboCop::Cop::Style::Send","","RuboCop/Cop/Style/Send.html","","<p>This cop checks for the use of the send method.\n"],["RuboCop::Cop::Style::SignalException","","RuboCop/Cop/Style/SignalException.html","","<p>This cop checks for uses of `fail` and `raise`.\n"],["RuboCop::Cop::Style::SingleLineBlockParams","","RuboCop/Cop/Style/SingleLineBlockParams.html","","<p>This cop checks whether the block parameters of a single-line method\naccepting a block match the names …\n"],["RuboCop::Cop::Style::SingleLineMethods","","RuboCop/Cop/Style/SingleLineMethods.html","","<p>This cop checks for single-line method definitions. It can optionally\naccept single-line methods with …\n"],["RuboCop::Cop::Style::SpecialGlobalVars","","RuboCop/Cop/Style/SpecialGlobalVars.html","","<p>This cop looks for uses of Perl-style global variables.\n"],["RuboCop::Cop::Style::StabbyLambdaParentheses","","RuboCop/Cop/Style/StabbyLambdaParentheses.html","","<p>Check for parentheses around stabby lambda arguments. There are two\ndifferent styles. Defaults to `require_parentheses`. …\n"],["RuboCop::Cop::Style::StderrPuts","","RuboCop/Cop/Style/StderrPuts.html","","<p>This cop identifies places where `$stderr.puts` can be replaced by `warn`.\n<p>@example\n\n<pre># bad\n$stderr.puts(&#39;hello&#39;) ...</pre>\n"],["RuboCop::Cop::Style::StringLiterals","","RuboCop/Cop/Style/StringLiterals.html","","<p>Checks if uses of quotes match the configured preference.\n"],["RuboCop::Cop::Style::StringLiteralsInInterpolation","","RuboCop/Cop/Style/StringLiteralsInInterpolation.html","","<p>This cop checks that quotes inside the string interpolation match the\nconfigured preference.\n<p>@example …\n"],["RuboCop::Cop::Style::StringMethods","","RuboCop/Cop/Style/StringMethods.html","","<p>This cop enforces the use of consistent method names from the String class.\n"],["RuboCop::Cop::Style::StructInheritance","","RuboCop/Cop/Style/StructInheritance.html","","<p>This cop checks for inheritance from Struct.new.\n<p>@example\n\n<pre># bad\nclass Person &lt; Struct.new(:first_name, ...</pre>\n"],["RuboCop::Cop::Style::SymbolArray","","RuboCop/Cop/Style/SymbolArray.html","","<p>This cop can check for array literals made up of symbols that are not using\nthe %i() syntax.\n<p>Alternatively …\n"],["RuboCop::Cop::Style::SymbolLiteral","","RuboCop/Cop/Style/SymbolLiteral.html","","<p>This cop checks symbol literal syntax.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n:<span class=\"ruby-string\">&quot;symbol&quot;</span>\n\n<span class=\"ruby-comment\"># good</span>\n:<span class=\"ruby-identifier\">symbol</span>\n</pre>\n"],["RuboCop::Cop::Style::SymbolProc","","RuboCop/Cop/Style/SymbolProc.html","","<p>Use symbols as procs when possible.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-identifier\">something</span>.<span class=\"ruby-identifier\">map</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">s</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">upcase</span> }\n\n<span class=\"ruby-comment\"># good</span>\n<span class=\"ruby-identifier\">something</span>.<span class=\"ruby-identifier\">map</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">upcase</span>)\n</pre>\n"],["RuboCop::Cop::Style::TernaryCorrector","","RuboCop/Cop/Style/TernaryCorrector.html","","<p>Corrector to correct conditional assignment in ternary conditions.\n"],["RuboCop::Cop::Style::TernaryParentheses","","RuboCop/Cop/Style/TernaryParentheses.html","","<p>This cop checks for the presence of parentheses around ternary conditions.\nIt is configurable to enforce …\n"],["RuboCop::Cop::Style::TrailingCommaInArguments","","RuboCop/Cop/Style/TrailingCommaInArguments.html","","<p>This cop checks for trailing comma in argument lists.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># always bad</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>,)\n\n<span class=\"ruby-comment\"># good if EnforcedStyleForMultiline ...</span>\n</pre>\n"],["RuboCop::Cop::Style::TrailingCommaInLiteral","","RuboCop/Cop/Style/TrailingCommaInLiteral.html","","<p>This cop checks for trailing comma in array and hash literals.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># always bad</span>\n<span class=\"ruby-identifier\">a</span> = [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>,]\n\n<span class=\"ruby-comment\"># good ...</span>\n</pre>\n"],["RuboCop::Cop::Style::TrailingUnderscoreVariable","","RuboCop/Cop/Style/TrailingUnderscoreVariable.html","","<p>This cop checks for extra underscores in variable assignment.\n<p>@example\n\n<pre># bad\na, b, _ = foo()\na, b, _, = ...</pre>\n"],["RuboCop::Cop::Style::TrivialAccessors","","RuboCop/Cop/Style/TrivialAccessors.html","","<p>This cop looks for trivial reader/writer methods, that could have been\ncreated with the attr_* family …\n"],["RuboCop::Cop::Style::UnlessCorrector","","RuboCop/Cop/Style/UnlessCorrector.html","","<p>Corrector to correct conditional assignment in `unless` statements.\n"],["RuboCop::Cop::Style::UnlessElse","","RuboCop/Cop/Style/UnlessElse.html","","<p>This cop looks for <strong>unless</strong> expressions with\n<strong>else</strong> clauses.\n"],["RuboCop::Cop::Style::UnneededCapitalW","","RuboCop/Cop/Style/UnneededCapitalW.html","","<p>This cop checks for usage of the %W() syntax when %w() would do.\n"],["RuboCop::Cop::Style::UnneededInterpolation","","RuboCop/Cop/Style/UnneededInterpolation.html","","<p>This cop checks for strings that are just an interpolated expression.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># bad</span>\n<span class=\"ruby-node\">&quot;#{@var}&quot;</span>\n\n<span class=\"ruby-comment\"># good ...</span>\n</pre>\n"],["RuboCop::Cop::Style::UnneededPercentQ","","RuboCop/Cop/Style/UnneededPercentQ.html","","<p>This cop checks for usage of the %q/%Q syntax when &#39;&#39; or “” would\ndo.\n"],["RuboCop::Cop::Style::VariableInterpolation","","RuboCop/Cop/Style/VariableInterpolation.html","","<p>This cop checks for variable interpolation (like “#@ivar”).\n"],["RuboCop::Cop::Style::WhenThen","","RuboCop/Cop/Style/WhenThen.html","","<p>This cop checks for <strong>when;</strong> uses in <strong>case</strong>\nexpressions.\n"],["RuboCop::Cop::Style::WhileUntilDo","","RuboCop/Cop/Style/WhileUntilDo.html","","<p>Checks for uses of `do` in multi-line `while/until` statements.\n"],["RuboCop::Cop::Style::WhileUntilModifier","","RuboCop/Cop/Style/WhileUntilModifier.html","","<p>Checks for while and until statements that would fit on one line if written\nas a modifier while/until. …\n"],["RuboCop::Cop::Style::WordArray","","RuboCop/Cop/Style/WordArray.html","","<p>This cop can check for array literals made up of word-like strings, that\nare not using the %w() syntax. …\n"],["RuboCop::Cop::Style::YodaCondition","","RuboCop/Cop/Style/YodaCondition.html","","<p>This cop checks for Yoda conditions, i.e. comparison operations where\nreadability is reduced because …\n"],["RuboCop::Cop::Style::ZeroLengthPredicate","","RuboCop/Cop/Style/ZeroLengthPredicate.html","","<p>This cop checks for numeric comparisons that can be replaced by a predicate\nmethod, such as receiver.length …\n"],["RuboCop::Cop::SurroundingSpace","","RuboCop/Cop/SurroundingSpace.html","","<p>Common functionality for checking surrounding space.\n"],["RuboCop::Cop::TargetRailsVersion","","RuboCop/Cop/TargetRailsVersion.html","","<p>Common functionality for checking target rails version.\n"],["RuboCop::Cop::TargetRubyVersion","","RuboCop/Cop/TargetRubyVersion.html","","<p>Common functionality for checking target ruby version.\n"],["RuboCop::Cop::Team","","RuboCop/Cop/Team.html","","<p>FIXME\n"],["RuboCop::Cop::TooManyLines","","RuboCop/Cop/TooManyLines.html","","<p>Common functionality for checking for too many lines.\n"],["RuboCop::Cop::TrailingComma","","RuboCop/Cop/TrailingComma.html","","<p>Common methods shared by Style/TrailingCommaInArguments and\nStyle/TrailingCommaInLiteral\n"],["RuboCop::Cop::Util","","RuboCop/Cop/Util.html","","<p>This module contains a collection of useful utility methods.\n"],["RuboCop::Cop::VariableForce","","RuboCop/Cop/VariableForce.html","","<p>This force provides a way to track local variables and scopes of Ruby. Cops\ninteract with this force …\n"],["RuboCop::Cop::VariableForce::And","","RuboCop/Cop/VariableForce/And.html","","<p>left_body &amp;&amp; right_body\n"],["RuboCop::Cop::VariableForce::Assignment","","RuboCop/Cop/VariableForce/Assignment.html","","<p>This class represents each assignment of a variable.\n"],["RuboCop::Cop::VariableForce::Branch","","RuboCop/Cop/VariableForce/Branch.html","","<p>Namespace for branch classes for each control structure.\n"],["RuboCop::Cop::VariableForce::Branchable","","RuboCop/Cop/VariableForce/Branchable.html","","<p>Mix-in module for classes which own a node and need branch information of\nthe node. The user classes …\n"],["RuboCop::Cop::VariableForce::Case","","RuboCop/Cop/VariableForce/Case.html","","<p>case target when /pattern/ # when_clause else\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">else_body</span>\n</pre>\n<p>end\n"],["RuboCop::Cop::VariableForce::Ensure","","RuboCop/Cop/VariableForce/Ensure.html","","<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">main_body</span>\n</pre>\n<p>ensure\n"],["RuboCop::Cop::VariableForce::ExceptionHandler","","RuboCop/Cop/VariableForce/ExceptionHandler.html","","<p>Mix-in module for exception handling control structures.\n"],["RuboCop::Cop::VariableForce::For","","RuboCop/Cop/VariableForce/For.html","","<p>for element in collection\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">loop_body</span>\n</pre>\n<p>end\n"],["RuboCop::Cop::VariableForce::If","","RuboCop/Cop/VariableForce/If.html","","<p>if conditional_clause\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">truthy_body</span>\n</pre>\n<p>else\n"],["RuboCop::Cop::VariableForce::LogicalOperator","","RuboCop/Cop/VariableForce/LogicalOperator.html","","<p>Mix-in module for logical operator control structures.\n"],["RuboCop::Cop::VariableForce::Or","","RuboCop/Cop/VariableForce/Or.html","","<p>left_body || right_body\n"],["RuboCop::Cop::VariableForce::Reference","","RuboCop/Cop/VariableForce/Reference.html","","<p>This class represents each reference of a variable.\n"],["RuboCop::Cop::VariableForce::Rescue","","RuboCop/Cop/VariableForce/Rescue.html","","<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">main_body</span>\n</pre>\n<p>rescue StandardError =&gt; error # rescue_clause else\n"],["RuboCop::Cop::VariableForce::Scope","","RuboCop/Cop/VariableForce/Scope.html","","<p>A Scope represents a context of local variable visibility. This is a place\nwhere local variables belong …\n"],["RuboCop::Cop::VariableForce::SimpleConditional","","RuboCop/Cop/VariableForce/SimpleConditional.html","","<p>Mix-in module for simple conditional control structures.\n"],["RuboCop::Cop::VariableForce::Until","","RuboCop/Cop/VariableForce/Until.html","","<p>until conditional_clause\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">loop_body</span>\n</pre>\n<p>end\n"],["RuboCop::Cop::VariableForce::UntilPost","","RuboCop/Cop/VariableForce/UntilPost.html","","<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">loop_body</span>\n</pre>\n<p>end until conditional_clause\n"],["RuboCop::Cop::VariableForce::Variable","","RuboCop/Cop/VariableForce/Variable.html","","<p>A Variable represents existence of a local variable. This holds a variable\ndeclaration node, and some …\n"],["RuboCop::Cop::VariableForce::VariableTable","","RuboCop/Cop/VariableForce/VariableTable.html","","<p>A VariableTable manages the lifetime of all scopes and local variables in a\nprogram. This holds scopes …\n"],["RuboCop::Cop::VariableForce::While","","RuboCop/Cop/VariableForce/While.html","","<p>while conditional_clause\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">loop_body</span>\n</pre>\n<p>end\n"],["RuboCop::Cop::VariableForce::WhilePost","","RuboCop/Cop/VariableForce/WhilePost.html","","<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">loop_body</span>\n</pre>\n<p>end while conditional_clause\n"],["RuboCop::Error","","RuboCop/Error.html","","<p>An Error exception is different from an Offense with severity\n&#39;error&#39; When this exception is …\n"],["RuboCop::Formatter","","RuboCop/Formatter.html","",""],["RuboCop::Formatter::BaseFormatter","","RuboCop/Formatter/BaseFormatter.html","","<p>Abstract base class for formatter, implements all public API methods.\n<p>## Creating Custom Formatter\n<p>You …\n"],["RuboCop::Formatter::ClangStyleFormatter","","RuboCop/Formatter/ClangStyleFormatter.html","","<p>This formatter formats report data in clang style. The precise location of\nthe problem is shown together …\n"],["RuboCop::Formatter::Colorizable","","RuboCop/Formatter/Colorizable.html","","<p>This mix-in module provides string coloring methods for terminals. It\nautomatically disables coloring …\n"],["RuboCop::Formatter::DisabledConfigFormatter","","RuboCop/Formatter/DisabledConfigFormatter.html","","<p>This formatter displays a YAML configuration file where all cops that\ndetected any offenses are configured …\n"],["RuboCop::Formatter::DisabledLinesFormatter","","RuboCop/Formatter/DisabledLinesFormatter.html","","<p>A basic formatter that displays the lines disabled inline comments.\n"],["RuboCop::Formatter::EmacsStyleFormatter","","RuboCop/Formatter/EmacsStyleFormatter.html","","<p>This formatter displays the report data in format that&#39;s easy to\nprocess in the Emacs text editor. …\n"],["RuboCop::Formatter::FileListFormatter","","RuboCop/Formatter/FileListFormatter.html","","<p>This formatter displays just a list of the files with offenses in them,\nseparated by newlines. The output …\n"],["RuboCop::Formatter::FormatterSet","","RuboCop/Formatter/FormatterSet.html","","<p>This is a collection of formatters. A FormatterSet can hold multiple\nformatter instances and provides …\n"],["RuboCop::Formatter::FuubarStyleFormatter","","RuboCop/Formatter/FuubarStyleFormatter.html","","<p>This formatter displays a progress bar and shows details of offenses as\nsoon as they are detected. This …\n"],["RuboCop::Formatter::HTMLFormatter","","RuboCop/Formatter/HTMLFormatter.html","","<p>This formatter saves the output as an html file.\n"],["RuboCop::Formatter::HTMLFormatter::ERBContext","","RuboCop/Formatter/HTMLFormatter/ERBContext.html","","<p>This class provides helper methods used in the ERB template.\n"],["RuboCop::Formatter::JSONFormatter","","RuboCop/Formatter/JSONFormatter.html","","<p>This formatter formats the report data in JSON format.\n"],["RuboCop::Formatter::OffenseCountFormatter","","RuboCop/Formatter/OffenseCountFormatter.html","","<p>This formatter displays the list of offended cops with a count of how many\noffenses of their kind were …\n"],["RuboCop::Formatter::ProgressFormatter","","RuboCop/Formatter/ProgressFormatter.html","","<p>This formatter display dots for files with no offenses and letters for\nfiles with problems in the them. …\n"],["RuboCop::Formatter::SimpleTextFormatter","","RuboCop/Formatter/SimpleTextFormatter.html","","<p>A basic formatter that displays only files with offenses. Offenses are\ndisplayed at compact form - just …\n"],["RuboCop::Formatter::SimpleTextFormatter::Report","","RuboCop/Formatter/SimpleTextFormatter/Report.html","","<p>A helper class for building the report summary text.\n"],["RuboCop::Formatter::TapFormatter","","RuboCop/Formatter/TapFormatter.html","","<p>This formatter formats report data using the Test Anything Protocol. TAP\nallows for to communicate tests …\n"],["RuboCop::Formatter::TextUtil","","RuboCop/Formatter/TextUtil.html","","<p>Common logic for UI texts.\n"],["RuboCop::Formatter::WorstOffendersFormatter","","RuboCop/Formatter/WorstOffendersFormatter.html","","<p>This formatter displays the list of offensive files, sorted by number of\noffenses with the worst offenders …\n"],["RuboCop::MagicComment","","RuboCop/MagicComment.html","","<p>Parse different formats of magic comments.\n<p>@abstract parent of three different magic comment handlers …\n"],["RuboCop::MagicComment::EditorComment","","RuboCop/MagicComment/EditorComment.html","","<p>Parent to Vim and Emacs magic comment handling.\n<p>@abstract\n"],["RuboCop::MagicComment::EmacsComment","","RuboCop/MagicComment/EmacsComment.html","","<p>Wrapper for Emacs style magic comments.\n<p>@example Emacs style comment\n\n<pre>comment = RuboCop::MagicComment.parse( ...</pre>\n"],["RuboCop::MagicComment::SimpleComment","","RuboCop/MagicComment/SimpleComment.html","","<p>Wrapper for regular magic comments not bound to an editor.\n<p>Simple comments can only specify one setting …\n"],["RuboCop::MagicComment::VimComment","","RuboCop/MagicComment/VimComment.html","","<p>Wrapper for Vim style magic comments.\n<p>@example Vim style comment\n\n<pre>comment = RuboCop::MagicComment.parse( ...</pre>\n"],["RuboCop::NameSimilarity","","RuboCop/NameSimilarity.html","","<p>Common functionality for finding names that are similar to a given name.\n"],["RuboCop::NodePattern","","RuboCop/NodePattern.html","","<p>This class performs a pattern-matching operation on an AST node.\n<p>Initialize a new `NodePattern` with `NodePattern.new(pattern_string)`, …\n"],["RuboCop::NodePattern::Compiler","","RuboCop/NodePattern/Compiler.html","","<p>@private Builds Ruby code which implements a pattern\n"],["RuboCop::NodePattern::Macros","","RuboCop/NodePattern/Macros.html","","<p>Helpers for defining methods based on a pattern string\n"],["RuboCop::Options","","RuboCop/Options.html","","<p>This class handles command line options.\n"],["RuboCop::OptionsHelp","","RuboCop/OptionsHelp.html","","<p>This module contains help texts for command line options.\n"],["RuboCop::OptionsValidator","","RuboCop/OptionsValidator.html","","<p>Validates option arguments and the options&#39; compatibility with each\nother.\n"],["RuboCop::PathUtil","","RuboCop/PathUtil.html","","<p>Common methods and behaviors for dealing with paths.\n"],["RuboCop::Platform","","RuboCop/Platform.html","","<p>This module provides information on the platform that RuboCop is being run\non.\n"],["RuboCop::ProcessedSource","","RuboCop/ProcessedSource.html","","<p>ProcessedSource contains objects which are generated by Parser and other\ninformation such as disabled …\n"],["RuboCop::RSpec","","RuboCop/RSpec.html","",""],["RuboCop::RSpec::ExpectOffense","","RuboCop/RSpec/ExpectOffense.html","","<p>Mixin for `expect_offense` and `expect_no_offenses`\n<p>This mixin makes it easier to specify strict offense …\n"],["RuboCop::RSpec::ExpectOffense::AnnotatedSource","","RuboCop/RSpec/ExpectOffense/AnnotatedSource.html","","<p>Parsed representation of code annotated with the `^^^ Message` style\n"],["RuboCop::RakeTask","","RuboCop/RakeTask.html","","<p>Provides a custom rake task.\n<p>require &#39;rubocop/rake_task&#39; RuboCop::RakeTask.new\n"],["RuboCop::RemoteConfig","","RuboCop/RemoteConfig.html","","<p>Common methods and behaviors for dealing with remote config files.\n"],["RuboCop::ResultCache","","RuboCop/ResultCache.html","","<p>Provides functionality for caching rubocop runs.\n"],["RuboCop::Runner","","RuboCop/Runner.html","","<p>This class handles the processing of files, which includes dealing with\nformatters and letting cops inspect …\n"],["RuboCop::Runner::InfiniteCorrectionLoop","","RuboCop/Runner/InfiniteCorrectionLoop.html","","<p>An exception indicating that the inspection loop got stuck correcting\noffenses back and forth.\n"],["RuboCop::StringInterpreter","","RuboCop/StringInterpreter.html","","<p>Take a string with embedded escapes, and convert the escapes as the Ruby\ninterpreter would when reading …\n"],["RuboCop::StringUtil","","RuboCop/StringUtil.html","","<p>This module provides approximate string matching methods.\n"],["RuboCop::StringUtil::Jaro","","RuboCop/StringUtil/Jaro.html","","<p>This class computes Jaro distance, which is a measure of similarity between\ntwo strings.\n"],["RuboCop::StringUtil::JaroWinkler","","RuboCop/StringUtil/JaroWinkler.html","","<p>This class computes Jaro-Winkler distance, which adds prefix-matching bonus\nto Jaro distance.\n"],["RuboCop::TargetFinder","","RuboCop/TargetFinder.html","","<p>This class finds target files to inspect by scanning the directory tree and\npicking ruby files.\n"],["RuboCop::Token","","RuboCop/Token.html","","<p>A basic wrapper around Parser&#39;s tokens.\n"],["RuboCop::ValidationError","","RuboCop/ValidationError.html","",""],["RuboCop::Version","","RuboCop/Version.html","","<p>This module holds the RuboCop version information.\n"],["RuboCop::Warning","","RuboCop/Warning.html","","<p>A Warning exception is different from an Offense with severity\n&#39;warning&#39; When a Warning is raised, …\n"],["<=>","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-3C-3D-3E","(other)","<p>@api public\n<p>Returns `-1`, `0` or `+1` if this offense is less than, equal to, or\ngreater than `other`. …\n"],["<=>","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-i-3C-3D-3E","(other)","<p>@api private\n"],["==","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-3D-3D","(other)",""],["==","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-3D-3D","(other)","<p>@api public\n<p>@return [Boolean]\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">returns</span> <span class=\"ruby-value\">%x`true`</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">two</span> <span class=\"ruby-identifier\">offenses</span> <span class=\"ruby-identifier\">contain</span> <span class=\"ruby-identifier\">same</span> <span class=\"ruby-identifier\">attributes</span>\n</pre>\n"],["==","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-3D-3D","(other)",""],["==","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-i-3D-3D","(other)","<p>@api private\n"],["==","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-3D-3D","(other)",""],["[]","RuboCop::Config","RuboCop/Config.html#method-i-5B-5D","(key)",""],["[]","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-5B-5D","(*args)",""],["[]=","RuboCop::Config","RuboCop/Config.html#method-i-5B-5D-3D","(key, value)",""],["_investigate","CopHelper","CopHelper.html#method-i-_investigate","(cop, processed_source)",""],["abort","RuboCop::Runner","RuboCop/Runner.html#method-i-abort","()",""],["absolute?","RuboCop::PathUtil","RuboCop/PathUtil.html#method-i-absolute-3F","(path)","<p>Returns true for an absolute Unix or Windows path.\n"],["accept_child_double_quotes?","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-accept_child_double_quotes-3F","(nodes)",""],["accept_first_call?","RuboCop::Cop::Performance::Detect","RuboCop/Cop/Performance/Detect.html#method-i-accept_first_call-3F","(receiver, body)",""],["accept_first_param?","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-accept_first_param-3F","(first_param)",""],["accept_left_parenthesis?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-accept_left_parenthesis-3F","(range)",""],["accept_left_square_bracket?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-accept_left_square_bracket-3F","(range)",""],["accept_second_param?","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-accept_second_param-3F","(second_param)",""],["acceptable?","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-acceptable-3F","()",""],["acceptable_19_syntax_symbol?","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-acceptable_19_syntax_symbol-3F","(sym_name)",""],["acceptable_capital_q?","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-acceptable_capital_q-3F","(node)",""],["acceptable_exploded_args?","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-acceptable_exploded_args-3F","(args)",""],["acceptable_methods","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-acceptable_methods","(klass, method_name, node)",""],["acceptable_q?","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-acceptable_q-3F","(node)",""],["accepted_form?","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-accepted_form-3F","(node, ending = false)",""],["accepted_if?","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-accepted_if-3F","(node, ending)",""],["accepted_opening_delimiter?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-accepted_opening_delimiter-3F","(range, char)",""],["access_modifier?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-access_modifier-3F","()","<p>Checks whether the dispatched method is a bare access modifier affects all\nmethods defined after the …\n"],["accesses?","RuboCop::Cop::Style::ParallelAssignment::AssignmentSorter","RuboCop/Cop/Style/ParallelAssignment/AssignmentSorter.html#method-i-accesses-3F","(rhs, lhs)","<p>`lhs` is an assignment method call like `obj.attr=` or `ary=`. Does `rhs`\naccess the same value which …\n"],["accessible_variables","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-accessible_variables","()",""],["accessor","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-accessor","(kind, method_name)",""],["accumulator_param_assigned_to?","RuboCop::Cop::Style::EachWithObject","RuboCop/Cop/Style/EachWithObject.html#method-i-accumulator_param_assigned_to-3F","(body, args)","<p>if the accumulator parameter is assigned to in the block, then we can&#39;t\nconvert to each_with_object …\n"],["act_on_options","RuboCop::CLI","RuboCop/CLI.html#method-i-act_on_options","()",""],["actual_code_range","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-actual_code_range","(node)",""],["actual_indent","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-actual_indent","(lines, buffer)",""],["add_arg_offense","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-add_arg_offense","(arg, type)",""],["add_boolean_flags","RuboCop::Options","RuboCop/Options.html#method-i-add_boolean_flags","(opts)",""],["add_braces","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-add_braces","(corrector, node)",""],["add_braces","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-add_braces","(corrector, node)",""],["add_brackets","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-add_brackets","(corrector, node)",""],["add_configuration_options","RuboCop::Options","RuboCop/Options.html#method-i-add_configuration_options","(opts, args)",""],["add_cop_selection_csv_option","RuboCop::Options","RuboCop/Options.html#method-i-add_cop_selection_csv_option","(option, opts)",""],["add_excludes_from_files","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-add_excludes_from_files","(config, config_file)",""],["add_excludes_from_higher_level","RuboCop::Config","RuboCop/Config.html#method-i-add_excludes_from_higher_level","(highest_config)",""],["add_flags_with_optional_args","RuboCop::Options","RuboCop/Options.html#method-i-add_flags_with_optional_args","(opts)",""],["add_formatter","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-add_formatter","(formatter_type, output_path = nil)",""],["add_formatting_options","RuboCop::Options","RuboCop/Options.html#method-i-add_formatting_options","(opts)",""],["add_list_options","RuboCop::Options","RuboCop/Options.html#method-i-add_list_options","(opts)",""],["add_missing_namespaces","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-add_missing_namespaces","(path, hash)","<p>rubocop:disable Performance/HashEachMethods\n"],["add_offense","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-add_offense","(node, *args, **kwargs, &block)",""],["add_offense_common","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-add_offense_common","(node, location: :expression, message: nil, severity: nil)","<p>rubocop:disable Metrics/CyclomaticComplexity\n"],["add_offense_deprecated","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-add_offense_deprecated","(node, loc = :expression, message = nil, severity = nil, &block)",""],["add_offense_for_args","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-add_offense_for_args","(node)",""],["add_offense_for_double_call","RuboCop::Cop::Performance::DoubleStartEndWith","RuboCop/Cop/Performance/DoubleStartEndWith.html#method-i-add_offense_for_double_call","(node, receiver, method, combined_args)",""],["add_offense_for_entire_comment","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-add_offense_for_entire_comment","(comment, cops)",""],["add_offense_for_expression","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-add_offense_for_expression","(node, expr, msg)",""],["add_offense_for_misalignment","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-add_offense_for_misalignment","(node, align_with)",""],["add_offense_for_some_cops","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-add_offense_for_some_cops","(comment, cops)",""],["add_offense_for_wrong_style","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-add_offense_for_wrong_style","(node, good, bad)",""],["add_offense_from_diagnostic","RuboCop::Cop::Lint::Syntax","RuboCop/Cop/Lint/Syntax.html#method-i-add_offense_from_diagnostic","(diagnostic, ruby_version)",""],["add_offense_from_error","RuboCop::Cop::Lint::Syntax","RuboCop/Cop/Lint/Syntax.html#method-i-add_offense_from_error","(error)",""],["add_offenses","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-add_offenses","(unneeded_cops)",""],["add_offenses_for_unnecessary_spaces","RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html#method-i-add_offenses_for_unnecessary_spaces","(node)",""],["add_only_options","RuboCop::Options","RuboCop/Options.html#method-i-add_only_options","(opts)",""],["add_parentheses","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-add_parentheses","(node, corrector)",""],["add_scope","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-add_scope","(node, local_variables = [])",""],["add_self_to_getters","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-add_self_to_getters","(right_elements)","<p>Converts (send nil :something) nodes to (send (:self) :something). This\nmakes the sorting algorithm work …\n"],["add_severity_option","RuboCop::Options","RuboCop/Options.html#method-i-add_severity_option","(opts)",""],["add_space_before","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-add_space_before","(loc, delta)",""],["add_unneeded_disables","RuboCop::Runner","RuboCop/Runner.html#method-i-add_unneeded_disables","(file, offenses, source)",""],["adjacent_braces","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-adjacent_braces","(left_brace, right_brace)",""],["adjust","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-adjust","(corrector, delta, range)",""],["after_leaving_scope","RuboCop::Cop::Lint::UnderscorePrefixedVariableName","RuboCop/Cop/Lint/UnderscorePrefixedVariableName.html#method-i-after_leaving_scope","(scope, _variable_table)",""],["after_leaving_scope","RuboCop::Cop::Lint::UnusedArgument","RuboCop/Cop/Lint/UnusedArgument.html#method-i-after_leaving_scope","(scope, _variable_table)",""],["after_leaving_scope","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-after_leaving_scope","(scope, _variable_table)",""],["after_leaving_scope","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-after_leaving_scope","(scope, _variable_table)",""],["alias_keyword_possible?","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-alias_keyword_possible-3F","(node)",""],["alias_method_possible?","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-alias_method_possible-3F","(node)",""],["align","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-align","(node, align_to)",""],["align_column","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-align_column","(asgn_token)",""],["align_equal_sign","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-align_equal_sign","(corrector, token, align_to)",""],["align_equal_signs","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-align_equal_signs","(range, corrector)",""],["align_hash_cop_config","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-align_hash_cop_config","()",""],["align_with_base_message","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-align_with_base_message","(rhs)",""],["aligned_assignment?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_assignment-3F","(range, line)",""],["aligned_char?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_char-3F","(range, line)",""],["aligned_comments?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-aligned_comments-3F","(token)",""],["aligned_identical?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_identical-3F","(range, line)",""],["aligned_operator?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_operator-3F","(range, line)",""],["aligned_tok?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-aligned_tok-3F","(token)",""],["aligned_token?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_token-3F","(range, line)",""],["aligned_with_adjacent_line?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_with_adjacent_line-3F","(range, predicate)",""],["aligned_with_any_line?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_with_any_line-3F","(line_ranges, range, indent = nil, &predicate)",""],["aligned_with_any_line_range?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_with_any_line_range-3F","(line_ranges, range, &predicate)",""],["aligned_with_line?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_with_line-3F","(line_nos, range, indent = nil)",""],["aligned_with_next_comment?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-aligned_with_next_comment-3F","(ix)",""],["aligned_with_operator?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_with_operator-3F","(range)",""],["aligned_with_previous_comment?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-aligned_with_previous_comment-3F","(ix)",""],["aligned_with_something?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_with_something-3F","(range)",""],["aligned_words?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-aligned_words-3F","(range, line)",""],["alignment_base","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-alignment_base","(node, rhs, given_style)",""],["alignment_column","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-alignment_column","(align_to)",""],["alignment_for","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-alignment_for","(pair)",""],["alignment_for_colons","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-alignment_for_colons","()",""],["alignment_for_hash_rockets","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-alignment_for_hash_rockets","()",""],["alignment_node","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-alignment_node","(node)",""],["all","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-all","()",""],["all","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-c-all","()",""],["all_cop_names","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-all_cop_names","()",""],["all_cop_names","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-all_cop_names","()",""],["all_disabled?","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-all_disabled-3F","(comment)",""],["all_hash_key?","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-all_hash_key-3F","(args, *keys)",""],["all_string_literals?","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-all_string_literals-3F","(nodes)",""],["allow","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-allow","(method_name, node)",""],["allow_blank_option","RuboCop::Cop::Rails::DelegateAllowBlank","RuboCop/Cop/Rails/DelegateAllowBlank.html#method-i-allow_blank_option","(node)",""],["allow_dsl_writers?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-allow_dsl_writers-3F","()",""],["allow_empty?","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-allow_empty-3F","()",""],["allow_for_alignment?","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-allow_for_alignment-3F","()",""],["allow_heredoc?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-allow_heredoc-3F","()",""],["allow_inner_backticks?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-allow_inner_backticks-3F","()",""],["allow_inner_slashes?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-allow_inner_slashes-3F","()",""],["allow_multiple_return_values?","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-allow_multiple_return_values-3F","()",""],["allow_named_underscore_variables","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-allow_named_underscore_variables","()",""],["allow_predicates?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-allow_predicates-3F","()",""],["allow_self","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-allow_self","(node)",""],["allow_symlinks_in_cache_location?","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-allow_symlinks_in_cache_location-3F","(config_store)",""],["allow_unused_keyword_arguments?","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-allow_unused_keyword_arguments-3F","()",""],["allow_uri?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-allow_uri-3F","()",""],["allowed_acronyms","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-allowed_acronyms","()",""],["allowed_ancestor?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-allowed_ancestor-3F","(node)",""],["allowed_argument?","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-allowed_argument-3F","(arg)",""],["allowed_array_or_hash_element?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-allowed_array_or_hash_element-3F","(node)",""],["allowed_backtick_literal?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-allowed_backtick_literal-3F","(node)",""],["allowed_block?","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-allowed_block-3F","(variable)",""],["allowed_bracket_array?","RuboCop::Cop::PercentArray","RuboCop/Cop/PercentArray.html#method-i-allowed_bracket_array-3F","(node)",""],["allowed_construct?","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-allowed_construct-3F","(asgn_node)",""],["allowed_expression?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-allowed_expression-3F","(node)",""],["allowed_heredoc","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-allowed_heredoc","()",""],["allowed_if_condition?","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-allowed_if_condition-3F","(node)",""],["allowed_keyword_argument?","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-allowed_keyword_argument-3F","(variable)",""],["allowed_lhs?","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-allowed_lhs-3F","(node)",""],["allowed_masign?","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-allowed_masign-3F","(lhs_elements, rhs_elements)",""],["allowed_method?","RuboCop::Cop::Lint::AmbiguousBlockAssociation","RuboCop/Cop/Lint/AmbiguousBlockAssociation.html#method-i-allowed_method-3F","(node)",""],["allowed_method?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-allowed_method-3F","(node)",""],["allowed_method_call?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-allowed_method_call-3F","(node)",""],["allowed_method_name?","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-allowed_method_name-3F","(method_name, prefix)",""],["allowed_mixed_percent_r?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-allowed_mixed_percent_r-3F","(node)",""],["allowed_mixed_slash?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-allowed_mixed_slash-3F","(node)",""],["allowed_modifier_if?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-allowed_modifier_if-3F","(node)",""],["allowed_multiple_expression?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-allowed_multiple_expression-3F","(node)",""],["allowed_omission?","RuboCop::Cop::Style::NestedParenthesizedCalls","RuboCop/Cop/Style/NestedParenthesizedCalls.html#method-i-allowed_omission-3F","(send_node)",""],["allowed_on_first_line?","RuboCop::Cop::Layout::LeadingCommentSpace","RuboCop/Cop/Layout/LeadingCommentSpace.html#method-i-allowed_on_first_line-3F","(comment)",""],["allowed_parent?","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-allowed_parent-3F","(node)",""],["allowed_parent?","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-allowed_parent-3F","(node)",""],["allowed_percent_q?","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-allowed_percent_q-3F","(node)",""],["allowed_percent_r_literal?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-allowed_percent_r_literal-3F","(node)",""],["allowed_percent_x_literal?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-allowed_percent_x_literal-3F","(node)",""],["allowed_reader?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-allowed_reader-3F","(node)",""],["allowed_rhs?","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-allowed_rhs-3F","(node)",""],["allowed_send_node?","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-allowed_send_node-3F","(node)",""],["allowed_single_line?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-allowed_single_line-3F","(branches)",""],["allowed_slash_literal?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-allowed_slash_literal-3F","(node)",""],["allowed_statements?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-allowed_statements-3F","(branches)",""],["allowed_ternary?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-allowed_ternary-3F","(assignment)",""],["allowed_type?","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-allowed_type-3F","(token)",""],["allowed_uri_position?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-allowed_uri_position-3F","(line, uri_range)",""],["allowed_var?","RuboCop::Cop::Style::GlobalVars","RuboCop/Cop/Style/GlobalVars.html#method-i-allowed_var-3F","(global_var)",""],["allowed_variable?","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-allowed_variable-3F","(var)",""],["allowed_writer?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-allowed_writer-3F","(method_name)",""],["alt_start_msg","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-alt_start_msg","(start_loc, source_line_column)",""],["alternate_operator","RuboCop::AST::AndNode","RuboCop/AST/AndNode.html#method-i-alternate_operator","()","<p>Returns the alternate operator of the `and` as a string. Returns `and` for\n`&amp;&amp;` and vice versa. …\n"],["alternate_operator","RuboCop::AST::OrNode","RuboCop/AST/OrNode.html#method-i-alternate_operator","()","<p>Returns the alternate operator of the `or` as a string. Returns `or` for\n`||` and vice versa.\n<p>@return …\n"],["alternative_message","RuboCop::Cop::Lint::AmbiguousOperator","RuboCop/Cop/Lint/AmbiguousOperator.html#method-i-alternative_message","(diagnostic)",""],["alternative_message","RuboCop::Cop::Lint::AmbiguousRegexpLiteral","RuboCop/Cop/Lint/AmbiguousRegexpLiteral.html#method-i-alternative_message","(_diagnostic)",""],["alternative_message","RuboCop::Cop::Lint::UselessElseWithoutRescue","RuboCop/Cop/Lint/UselessElseWithoutRescue.html#method-i-alternative_message","(_diagnostic)",""],["alternative_style","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-alternative_style","()",""],["alternative_style","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-alternative_style","()",""],["alternative_styles","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-alternative_styles","()",""],["always_run?","RuboCop::Cop::VariableForce::Case","RuboCop/Cop/VariableForce/Case.html#method-i-always_run-3F","()",""],["always_run?","RuboCop::Cop::VariableForce::Ensure","RuboCop/Cop/VariableForce/Ensure.html#method-i-always_run-3F","()",""],["always_run?","RuboCop::Cop::VariableForce::For","RuboCop/Cop/VariableForce/For.html#method-i-always_run-3F","()",""],["always_run?","RuboCop::Cop::VariableForce::LogicalOperator","RuboCop/Cop/VariableForce/LogicalOperator.html#method-i-always_run-3F","()",""],["always_run?","RuboCop::Cop::VariableForce::Rescue","RuboCop/Cop/VariableForce/Rescue.html#method-i-always_run-3F","()",""],["always_run?","RuboCop::Cop::VariableForce::SimpleConditional","RuboCop/Cop/VariableForce/SimpleConditional.html#method-i-always_run-3F","()",""],["ambiguous_or_unexpected_style_detected","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-ambiguous_or_unexpected_style_detected","(style, is_match)",""],["ambiguous_style_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-ambiguous_style_detected","(*possibilities)",""],["analyze","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-analyze","()",""],["analyze_cop","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-analyze_cop","(analysis, disabled, line, single_line)",""],["analyze_disabled","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-analyze_disabled","(analysis, line)",""],["analyze_rest","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-analyze_rest","(analysis, line)",""],["analyze_single_line","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-analyze_single_line","(analysis, line, disabled)",""],["ancestor_node","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-ancestor_node","(node)",""],["ancestor_node?","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-ancestor_node-3F","(target_node)",""],["annotate","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-annotate","(message)",""],["annotate","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-annotate","(message, name)","<p>Returns the annotated message, based on params passed into initializer\n<p>@return [String] annotated message …\n"],["annotate_message","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-annotate_message","(msg)",""],["annotate_message","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-annotate_message","(msg)",""],["annotation?","RuboCop::Cop::Style::AnnotationComment","RuboCop/Cop/Style/AnnotationComment.html#method-i-annotation-3F","(comment)",""],["annotation_range","RuboCop::Cop::Style::CommentAnnotation","RuboCop/Cop/Style/CommentAnnotation.html#method-i-annotation_range","(comment, margin, length)",""],["any?","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-any-3F","()",""],["any_assignment?","RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html#method-i-any_assignment-3F","(node)",""],["any_context_creating_methods?","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-any_context_creating_methods-3F","(child)",""],["any_method_definition?","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-any_method_definition-3F","(child)",""],["any_symlink?","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-any_symlink-3F","(path)",""],["apply_default_formatter","RuboCop::CLI","RuboCop/CLI.html#method-i-apply_default_formatter","()",""],["arg_to_unparenthesized_call?","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-arg_to_unparenthesized_call-3F","(arg_node)",""],["args?","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-args-3F","(lambda_node)",""],["args_begin","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-args_begin","(node)",""],["args_begin","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-args_begin","(node)",""],["args_count","RuboCop::Cop::Metrics::ParameterLists","RuboCop/Cop/Metrics/ParameterLists.html#method-i-args_count","(node)",""],["args_end","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-args_end","(node)",""],["args_end","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-args_end","(node)",""],["args_from_env","RuboCop::Options","RuboCop/Options.html#method-i-args_from_env","()",""],["args_from_file","RuboCop::Options","RuboCop/Options.html#method-i-args_from_file","()",""],["args_include_block_pass?","RuboCop::Cop::Performance::RedundantBlockCall","RuboCop/Cop/Performance/RedundantBlockCall.html#method-i-args_include_block_pass-3F","(blockcall)",""],["args_match?","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-args_match-3F","(method_name, args)",""],["args_on_beginning_line?","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-args_on_beginning_line-3F","(node)",""],["argument?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-argument-3F","()",""],["argument_positions","RuboCop::Cop::Style::OptionalArguments","RuboCop/Cop/Style/OptionalArguments.html#method-i-argument_positions","(arguments)",""],["argument_range","RuboCop::Cop::Style::MinMax","RuboCop/Cop/Style/MinMax.html#method-i-argument_range","(node)",""],["arguments","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-arguments","()","<p>The arguments of this block.\n<p>@return [Array&lt;Node&gt;]\n"],["arguments","RuboCop::AST::DefNode","RuboCop/AST/DefNode.html#method-i-arguments","()","<p>An array containing the arguments of the method definition.\n<p>@return [Array&lt;Node&gt;] the arguments …\n"],["arguments","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-arguments","()","<p>An array containing the arguments of the dispatched method.\n<p>@return [Array&lt;Node&gt;] the arguments …\n"],["arguments?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-arguments-3F","()","<p>Checks whether this block takes any arguments.\n<p>@return [Boolean] whether this `block` node takes any arguments …\n"],["arguments?","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-arguments-3F","()","<p>Checks whether this node has any arguments.\n<p>@return [Boolean] whether this node has any arguments\n"],["arguments?","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-arguments-3F","(args)",""],["arguments_count","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-arguments_count","(format)","<p>number of arguments required for the format sequence\n"],["arguments_match?","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-arguments_match-3F","(args, body)",""],["arguments_without_parentheses?","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-arguments_without_parentheses-3F","(node)",""],["array?","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-array-3F","(node)",""],["array_element?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-array_element-3F","(node)",""],["array_or_range?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-array_or_range-3F","(node)",""],["array_splat?","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-array_splat-3F","(node)",""],["array_style_detected","RuboCop::Cop::ArrayMinSize","RuboCop/Cop/ArrayMinSize.html#method-i-array_style_detected","(style, ary_size)",""],["arrow_form?","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-arrow_form-3F","(lambda_node)",""],["arrow_form?","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-arrow_form-3F","(node)",""],["arrow_lambda_with_args?","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-arrow_lambda_with_args-3F","(node)",""],["asgn_variable_align_with","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-asgn_variable_align_with","(outer_node, inner_node)",""],["assertions_using_described_class_msg","RuboCop::Cop::InternalAffairs::UselessMessageAssertion","RuboCop/Cop/InternalAffairs/UselessMessageAssertion.html#method-i-assertions_using_described_class_msg","()",""],["assign","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-assign","(node)",""],["assign_to_variable","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-assign_to_variable","(name, node)",""],["assignment","RuboCop::Cop::Style::ConditionalCorrectorHelper","RuboCop/Cop/Style/ConditionalCorrectorHelper.html#method-i-assignment","(node)",""],["assignment","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-i-assignment","()",""],["assignment_corrector","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-assignment_corrector","(node, order)",""],["assignment_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-assignment_method-3F","()","<p>Checks whether the method is an assignment method.\n<p>@return [Boolean] whether the method is an assignment …\n"],["assignment_node","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-assignment_node","(node)",""],["assignment_on_same_line?","RuboCop::Cop::Layout::FirstArrayElementLineBreak","RuboCop/Cop/Layout/FirstArrayElementLineBreak.html#method-i-assignment_on_same_line-3F","(node)",""],["assignment_rhs_exist?","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-assignment_rhs_exist-3F","(node)",""],["assignment_tokens","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-assignment_tokens","()",""],["assignment_types_match?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-assignment_types_match-3F","(*nodes)",""],["ast_with_comments","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-ast_with_comments","()",""],["augment_message","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-augment_message","(message, variable)",""],["autocorrect","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-autocorrect","(arg)",""],["autocorrect","RuboCop::Cop::Bundler::InsecureProtocolSource","RuboCop/Cop/Bundler/InsecureProtocolSource.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::EnforceSuperclass","RuboCop/Cop/EnforceSuperclass.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::FirstElementLineBreak","RuboCop/Cop/FirstElementLineBreak.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::InternalAffairs::DeprecatedPositionalArguments","RuboCop/Cop/InternalAffairs/DeprecatedPositionalArguments.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::InternalAffairs::NodeTypePredicate","RuboCop/Cop/InternalAffairs/NodeTypePredicate.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::InternalAffairs::OffenseLocationKeyword","RuboCop/Cop/InternalAffairs/OffenseLocationKeyword.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::InternalAffairs::RedundantLocationArgument","RuboCop/Cop/InternalAffairs/RedundantLocationArgument.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::InternalAffairs::RedundantMessageArgument","RuboCop/Cop/InternalAffairs/RedundantMessageArgument.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::BlockEndNewline","RuboCop/Cop/Layout/BlockEndNewline.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::EmptyLineAfterMagicComment","RuboCop/Cop/Layout/EmptyLineAfterMagicComment.html#method-i-autocorrect","(token)",""],["autocorrect","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::EmptyLines","RuboCop/Cop/Layout/EmptyLines.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-autocorrect","(args)",""],["autocorrect","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::InitialIndentation","RuboCop/Cop/Layout/InitialIndentation.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::LeadingCommentSpace","RuboCop/Cop/Layout/LeadingCommentSpace.html#method-i-autocorrect","(comment)",""],["autocorrect","RuboCop::Cop::Layout::MultilineAssignmentLayout","RuboCop/Cop/Layout/MultilineAssignmentLayout.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAfterColon","RuboCop/Cop/Layout/SpaceAfterColon.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAfterMethodName","RuboCop/Cop/Layout/SpaceAfterMethodName.html#method-i-autocorrect","(pos_before_left_paren)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAfterNot","RuboCop/Cop/Layout/SpaceAfterNot.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceBeforeComment","RuboCop/Cop/Layout/SpaceBeforeComment.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceBeforeFirstArg","RuboCop/Cop/Layout/SpaceBeforeFirstArg.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-autocorrect","(lambda_node)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral","RuboCop/Cop/Layout/SpaceInsideArrayPercentLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInsideRangeLiteral","RuboCop/Cop/Layout/SpaceInsideRangeLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::SpaceInsideStringInterpolation","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Layout::Tab","RuboCop/Cop/Layout/Tab.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::TrailingBlankLines","RuboCop/Cop/Layout/TrailingBlankLines.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Layout::TrailingWhitespace","RuboCop/Cop/Layout/TrailingWhitespace.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::DefEndAlignment","RuboCop/Cop/Lint/DefEndAlignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::DeprecatedClassMethods","RuboCop/Cop/Lint/DeprecatedClassMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::EmptyEnsure","RuboCop/Cop/Lint/EmptyEnsure.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::EmptyInterpolation","RuboCop/Cop/Lint/EmptyInterpolation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::InheritException","RuboCop/Cop/Lint/InheritException.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::LiteralInInterpolation","RuboCop/Cop/Lint/LiteralInInterpolation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::MultipleCompare","RuboCop/Cop/Lint/MultipleCompare.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::PercentStringArray","RuboCop/Cop/Lint/PercentStringArray.html#method-i-autocorrect","(node)","<p>rubocop:disable Performance/HashEachMethods\n"],["autocorrect","RuboCop::Cop::Lint::PercentSymbolArray","RuboCop/Cop/Lint/PercentSymbolArray.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::RedundantWithIndex","RuboCop/Cop/Lint/RedundantWithIndex.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::RedundantWithObject","RuboCop/Cop/Lint/RedundantWithObject.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::RescueType","RuboCop/Cop/Lint/RescueType.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::SafeNavigationChain","RuboCop/Cop/Lint/SafeNavigationChain.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::ScriptPermission","RuboCop/Cop/Lint/ScriptPermission.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::StringConversionInInterpolation","RuboCop/Cop/Lint/StringConversionInInterpolation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::UnifiedInteger","RuboCop/Cop/Lint/UnifiedInteger.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-autocorrect","(args)",""],["autocorrect","RuboCop::Cop::Lint::UnneededRequireStatement","RuboCop/Cop/Lint/UnneededRequireStatement.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::UnusedArgument","RuboCop/Cop/Lint/UnusedArgument.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Lint::UriRegexp","RuboCop/Cop/Lint/UriRegexp.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Parentheses","RuboCop/Cop/Parentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-autocorrect","(when_node)",""],["autocorrect","RuboCop::Cop::Performance::Casecmp","RuboCop/Cop/Performance/Casecmp.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::CompareWithBlock","RuboCop/Cop/Performance/CompareWithBlock.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::Count","RuboCop/Cop/Performance/Count.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::Detect","RuboCop/Cop/Performance/Detect.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::DoubleStartEndWith","RuboCop/Cop/Performance/DoubleStartEndWith.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::EndWith","RuboCop/Cop/Performance/EndWith.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::FlatMap","RuboCop/Cop/Performance/FlatMap.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::LstripRstrip","RuboCop/Cop/Performance/LstripRstrip.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::RangeInclude","RuboCop/Cop/Performance/RangeInclude.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::RedundantBlockCall","RuboCop/Cop/Performance/RedundantBlockCall.html#method-i-autocorrect","(node)","<p>offenses are registered on the `block.call` nodes\n"],["autocorrect","RuboCop::Cop::Performance::RedundantMatch","RuboCop/Cop/Performance/RedundantMatch.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::RedundantSortBy","RuboCop/Cop/Performance/RedundantSortBy.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::ReverseEach","RuboCop/Cop/Performance/ReverseEach.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::StartWith","RuboCop/Cop/Performance/StartWith.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::TimesMap","RuboCop/Cop/Performance/TimesMap.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Performance::UriDefaultParser","RuboCop/Cop/Performance/UriDefaultParser.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::ActiveSupportAliases","RuboCop/Cop/Rails/ActiveSupportAliases.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::Blank","RuboCop/Cop/Rails/Blank.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::DelegateAllowBlank","RuboCop/Cop/Rails/DelegateAllowBlank.html#method-i-autocorrect","(pair_node)",""],["autocorrect","RuboCop::Cop::Rails::DynamicFindBy","RuboCop/Cop/Rails/DynamicFindBy.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::FindBy","RuboCop/Cop/Rails/FindBy.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::FindEach","RuboCop/Cop/Rails/FindEach.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::HttpPositionalArguments","RuboCop/Cop/Rails/HttpPositionalArguments.html#method-i-autocorrect","(node)","<p>given a pre Rails 5 method: get :new, user_id: @user.id, {}\n<p>@return lambda of auto correct procedure the …\n"],["autocorrect","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::ReadWriteAttribute","RuboCop/Cop/Rails/ReadWriteAttribute.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::RelativeDateConstant","RuboCop/Cop/Rails/RelativeDateConstant.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::RequestReferer","RuboCop/Cop/Rails/RequestReferer.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::SafeNavigation","RuboCop/Cop/Rails/SafeNavigation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::UniqBeforePluck","RuboCop/Cop/Rails/UniqBeforePluck.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Rails::Validation","RuboCop/Cop/Rails/Validation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Security::JSONLoad","RuboCop/Cop/Security/JSONLoad.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Security::YAMLLoad","RuboCop/Cop/Security/YAMLLoad.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-autocorrect","(token)",""],["autocorrect","RuboCop::Cop::SpaceBeforePunctuation","RuboCop/Cop/SpaceBeforePunctuation.html#method-i-autocorrect","(pos_before_punctuation)",""],["autocorrect","RuboCop::Cop::SpaceInside","RuboCop/Cop/SpaceInside.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::StringLiteralsHelp","RuboCop/Cop/StringLiteralsHelp.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ArrayJoin","RuboCop/Cop/Style/ArrayJoin.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Attr","RuboCop/Cop/Style/Attr.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::BlockComments","RuboCop/Cop/Style/BlockComments.html#method-i-autocorrect","(comment)",""],["autocorrect","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-autocorrect","(send_node)","<p>We let AutocorrectUnlessChangingAST#autocorrect work with the send node,\nbecause that context is needed. …\n"],["autocorrect","RuboCop::Cop::Style::CharacterLiteral","RuboCop/Cop/Style/CharacterLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ClassCheck","RuboCop/Cop/Style/ClassCheck.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ClassMethods","RuboCop/Cop/Style/ClassMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::CollectionMethods","RuboCop/Cop/Style/CollectionMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ColonMethodCall","RuboCop/Cop/Style/ColonMethodCall.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::CommentAnnotation","RuboCop/Cop/Style/CommentAnnotation.html#method-i-autocorrect","(comment)",""],["autocorrect","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-autocorrect","(token)",""],["autocorrect","RuboCop::Cop::Style::DefWithParentheses","RuboCop/Cop/Style/DefWithParentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Dir","RuboCop/Cop/Style/Dir.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::EachForSimpleLoop","RuboCop/Cop/Style/EachForSimpleLoop.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::EachWithObject","RuboCop/Cop/Style/EachWithObject.html#method-i-autocorrect","(node)","<p>rubocop:disable Metrics/AbcSize\n"],["autocorrect","RuboCop::Cop::Style::EmptyCaseCondition","RuboCop/Cop/Style/EmptyCaseCondition.html#method-i-autocorrect","(case_node)",""],["autocorrect","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Encoding","RuboCop/Cop/Style/Encoding.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Style::EvenOdd","RuboCop/Cop/Style/EvenOdd.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::FormatString","RuboCop/Cop/Style/FormatString.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-autocorrect","(operator_range)",""],["autocorrect","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MinMax","RuboCop/Cop/Style/MinMax.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MultilineIfModifier","RuboCop/Cop/Style/MultilineIfModifier.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MultilineIfThen","RuboCop/Cop/Style/MultilineIfThen.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MultilineMemoization","RuboCop/Cop/Style/MultilineMemoization.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::MutableConstant","RuboCop/Cop/Style/MutableConstant.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NegatedIf","RuboCop/Cop/Style/NegatedIf.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NegatedWhile","RuboCop/Cop/Style/NegatedWhile.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NestedParenthesizedCalls","RuboCop/Cop/Style/NestedParenthesizedCalls.html#method-i-autocorrect","(nested)",""],["autocorrect","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NilComparison","RuboCop/Cop/Style/NilComparison.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::PercentQLiterals","RuboCop/Cop/Style/PercentQLiterals.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::PerlBackrefs","RuboCop/Cop/Style/PerlBackrefs.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::PreferredHashMethods","RuboCop/Cop/Style/PreferredHashMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Proc","RuboCop/Cop/Style/Proc.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RedundantBegin","RuboCop/Cop/Style/RedundantBegin.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RedundantException","RuboCop/Cop/Style/RedundantException.html#method-i-autocorrect","(node)","<p>Switch `raise RuntimeError, &#39;message&#39;` to `raise\n&#39;message&#39;`, and `raise RuntimeError.new …\n"],["autocorrect","RuboCop::Cop::Style::RedundantFreeze","RuboCop/Cop/Style/RedundantFreeze.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::RescueModifier","RuboCop/Cop/Style/RescueModifier.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ReturnNil","RuboCop/Cop/Style/ReturnNil.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-autocorrect","(range)",""],["autocorrect","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::StderrPuts","RuboCop/Cop/Style/StderrPuts.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::StringMethods","RuboCop/Cop/Style/StringMethods.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::SymbolArray","RuboCop/Cop/Style/SymbolArray.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::SymbolLiteral","RuboCop/Cop/Style/SymbolLiteral.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::UnlessElse","RuboCop/Cop/Style/UnlessElse.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::UnneededCapitalW","RuboCop/Cop/Style/UnneededCapitalW.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::WhenThen","RuboCop/Cop/Style/WhenThen.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::WhileUntilDo","RuboCop/Cop/Style/WhileUntilDo.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::WhileUntilModifier","RuboCop/Cop/Style/WhileUntilModifier.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::WordArray","RuboCop/Cop/Style/WordArray.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Style::ZeroLengthPredicate","RuboCop/Cop/Style/ZeroLengthPredicate.html#method-i-autocorrect","(node)",""],["autocorrect","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-autocorrect","(buffer, cops)",""],["autocorrect","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-autocorrect","(range)",""],["autocorrect?","RuboCop::Cop::AutocorrectLogic","RuboCop/Cop/AutocorrectLogic.html#method-i-autocorrect-3F","()",""],["autocorrect?","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-autocorrect-3F","()",""],["autocorrect_all_cops","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-autocorrect_all_cops","(buffer, cops)",""],["autocorrect_arguments","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-autocorrect_arguments","(corrector, node)",""],["autocorrect_block","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-autocorrect_block","(corrector, node)",""],["autocorrect_body","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-autocorrect_body","(corrector, node, block_body)",""],["autocorrect_class","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-autocorrect_class","(node)",""],["autocorrect_comparison","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-autocorrect_comparison","(node)",""],["autocorrect_enabled?","RuboCop::Cop::AutocorrectLogic","RuboCop/Cop/AutocorrectLogic.html#method-i-autocorrect_enabled-3F","()",""],["autocorrect_forbidden?","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-autocorrect_forbidden-3F","(type)",""],["autocorrect_from_percent","RuboCop::Cop::Style::FormatString","RuboCop/Cop/Style/FormatString.html#method-i-autocorrect_from_percent","(corrector, node)",""],["autocorrect_hash_rockets","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-autocorrect_hash_rockets","(corrector, node)",""],["autocorrect_incompatible_with","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-autocorrect_incompatible_with","()","<p>List of cops that should not try to autocorrect at the same time as this\ncop\n<p>@return [Array&lt;RuboCop::Cop::Cop&gt;] …\n"],["autocorrect_incompatible_with","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_incompatible_with","RuboCop::Cop::Layout::MultilineHashBraceLayout","RuboCop/Cop/Layout/MultilineHashBraceLayout.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_incompatible_with","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_incompatible_with","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_incompatible_with","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_incompatible_with","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_incompatible_with","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-c-autocorrect_incompatible_with","()",""],["autocorrect_insert_lines","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-autocorrect_insert_lines","(newline_pos, count)",""],["autocorrect_instance","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-autocorrect_instance","(node)",""],["autocorrect_line","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-autocorrect_line","(corrector, line_begin_pos, expr, column_delta, heredoc_ranges)",""],["autocorrect_literal_to_method","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-autocorrect_literal_to_method","(corrector, node)",""],["autocorrect_method","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-autocorrect_method","(corrector, node, args, method_name)",""],["autocorrect_method_to_literal","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-autocorrect_method_to_literal","(corrector, node)",""],["autocorrect_modifier","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-autocorrect_modifier","(corrector, node)",""],["autocorrect_no_args","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-autocorrect_no_args","(corrector, node, method_name)",""],["autocorrect_no_mixed_keys","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-autocorrect_no_mixed_keys","(corrector, node)",""],["autocorrect_non_nil","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-autocorrect_non_nil","(node, inner_node)",""],["autocorrect_notice","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-autocorrect_notice","()",""],["autocorrect_other","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-autocorrect_other","(embedded_node, node)",""],["autocorrect_range","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-autocorrect_range","(item)",""],["autocorrect_remove_lines","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-autocorrect_remove_lines","(newline_pos, count)",""],["autocorrect_requested?","RuboCop::Cop::AutocorrectLogic","RuboCop/Cop/AutocorrectLogic.html#method-i-autocorrect_requested-3F","()",""],["autocorrect_ruby19","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-autocorrect_ruby19","(corrector, node)",""],["autocorrect_single_variable_interpolation","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-autocorrect_single_variable_interpolation","(embedded_node, node)",""],["autocorrect_source","CopHelper","CopHelper.html#method-i-autocorrect_source","(source, file = nil)",""],["autocorrect_source_file","CopHelper","CopHelper.html#method-i-autocorrect_source_file","(source)",""],["autocorrect_source_with_loop","CopHelper","CopHelper.html#method-i-autocorrect_source_with_loop","(source, file = nil)",""],["autocorrect_to_percent","RuboCop::Cop::Style::FormatString","RuboCop/Cop/Style/FormatString.html#method-i-autocorrect_to_percent","(corrector, node)",""],["autocorrect_unless_nil","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-autocorrect_unless_nil","(node, receiver)",""],["autocorrect_unneeded_disables","RuboCop::Runner","RuboCop/Runner.html#method-i-autocorrect_unneeded_disables","(source, cop)",""],["autocorrect_variable_interpolation","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-autocorrect_variable_interpolation","(embedded_node, node)",""],["autocorrect_with_args","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-autocorrect_with_args","(corrector, node, args, method_name)",""],["autocorrect_words","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-autocorrect_words","(word_nodes, escape, base_line_number, delimiters)",""],["autocorrected_value","RuboCop::Cop::Lint::LiteralInInterpolation","RuboCop/Cop/Lint/LiteralInInterpolation.html#method-i-autocorrected_value","(node)",""],["autocorrected_value_for_symbol","RuboCop::Cop::Lint::LiteralInInterpolation","RuboCop/Cop/Lint/LiteralInInterpolation.html#method-i-autocorrected_value_for_symbol","(node)",""],["avoid_autocorrect?","RuboCop::Cop::Style::TrailingCommaInArguments","RuboCop/Cop/Style/TrailingCommaInArguments.html#method-i-avoid_autocorrect-3F","(args)",""],["avoid_autocorrect?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-avoid_autocorrect-3F","(_)","<p>By default, there&#39;s no reason to avoid auto-correct.\n"],["avoid_comma","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-avoid_comma","(kind, comma_begin_pos, extra_info)",""],["backtick_literal?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-backtick_literal-3F","(node)",""],["bad_days","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-bad_days","()",""],["bad_methods","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-bad_methods","()",""],["bad_methods","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-bad_methods","()",""],["bad_reader_name?","RuboCop::Cop::Naming::AccessorMethodName","RuboCop/Cop/Naming/AccessorMethodName.html#method-i-bad_reader_name-3F","(node)",""],["bad_rhs?","RuboCop::Cop::Style::MultilineMemoization","RuboCop/Cop/Style/MultilineMemoization.html#method-i-bad_rhs-3F","(rhs)",""],["bad_writer_name?","RuboCop::Cop::Naming::AccessorMethodName","RuboCop/Cop/Naming/AccessorMethodName.html#method-i-bad_writer_name-3F","(node)",""],["badge","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-badge","()",""],["bang_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-bang_method-3F","()","<p>Checks whether the method is a bang method.\n<p>@return [Boolean] whether the method is a bang method\n"],["bareword?","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-bareword-3F","(sym_node)",""],["base64_encoded_logo_image","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-base64_encoded_logo_image","()",""],["base_column","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-base_column","(left_brace, left_parenthesis)",""],["base_column","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-base_column","(node, args)",""],["base_column","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-base_column","(case_node, base)",""],["base_configs","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-base_configs","(path, inherit_from, file)",""],["base_description","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-base_description","(left_parenthesis)","<p>Returns the description of what the correct indentation is based on.\n"],["base_description","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-base_description","(left_parenthesis)","<p>Returns the description of what the correct indentation is based on.\n"],["base_dir_for_path_parameters","RuboCop::Config","RuboCop/Config.html#method-i-base_dir_for_path_parameters","()","<p>Paths specified in configuration files starting with .rubocop are relative\nto the directory where that …\n"],["base_for_method_definition","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-base_for_method_definition","(node)",""],["base_if_node","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-base_if_node","(node)",""],["base_indent_level","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-base_indent_level","(node)",""],["base_indentation","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-base_indentation","(node)",""],["base_range","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-base_range","(node, base)",""],["base_range","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-base_range","(send_node, arg_node)",""],["base_source","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-base_source","()",""],["basic_literal?","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-basic_literal-3F","(node)",""],["beautify_message","RuboCop::Cop::Lint::Syntax","RuboCop/Cop/Lint/Syntax.html#method-i-beautify_message","(message)",""],["before_declaring_variable","RuboCop::Cop::Lint::ShadowingOuterLocalVariable","RuboCop/Cop/Lint/ShadowingOuterLocalVariable.html#method-i-before_declaring_variable","(variable, variable_table)",""],["begin_correction","RuboCop::Cop::Style::ParallelAssignment::RescueCorrector","RuboCop/Cop/Style/ParallelAssignment/RescueCorrector.html#method-i-begin_correction","(rescue_result)",""],["begin_pos","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-begin_pos","(node)",""],["begin_pos_for_replacement","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-begin_pos_for_replacement","(node)",""],["begin_range","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-begin_range","(node, method_call)",""],["begin_source","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-begin_source","(node)",""],["belong_to_inner_scope?","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-belong_to_inner_scope-3F","(target_node)",""],["belong_to_outer_scope?","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-belong_to_outer_scope-3F","(target_node)",""],["below_array_length?","RuboCop::Cop::ArrayMinSize","RuboCop/Cop/ArrayMinSize.html#method-i-below_array_length-3F","(node)",""],["binding","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-binding","()","<p>Make Kernel#binding public.\n"],["binding_irb?","RuboCop::Cop::Lint::Debugger","RuboCop/Cop/Lint/Debugger.html#method-i-binding_irb-3F","(node)",""],["blacklist","RuboCop::Cop::Rails::SkipsModelValidations","RuboCop/Cop/Rails/SkipsModelValidations.html#method-i-blacklist","()",""],["blacklisted_delimiters","RuboCop::Cop::Naming::HeredocDelimiterNaming","RuboCop/Cop/Naming/HeredocDelimiterNaming.html#method-i-blacklisted_delimiters","()",""],["blank_lines_between?","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-blank_lines_between-3F","(first_def_node, second_def_node)",""],["blank_lines_count_between","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-blank_lines_count_between","(first_def_node, second_def_node)",""],["block_arg_string","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-block_arg_string","(args)",""],["block_argument?","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-block_argument-3F","()","<p>Whether the last argument of the node is a block pass, i.e. `&amp;block`.\n<p>@return [Boolean] whether the …\n"],["block_argument?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-block_argument-3F","()",""],["block_comment_within?","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-block_comment_within-3F","(expr)",""],["block_end_align_target","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-block_end_align_target","(node)",""],["block_literal?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-block_literal-3F","()","<p>Whether this method dispatch has an explicit block.\n<p>@return [Boolean] whether the dispatched method has …\n"],["block_node","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-block_node","()","<p>The `block` node associated with this method dispatch, if any.\n<p>@return [BlockNode, nil] the `block` node …\n"],["block_range_with_space","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-block_range_with_space","(node)",""],["block_start?","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-block_start-3F","(line)",""],["body","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-body","()","<p>The body of this block.\n<p>@return [Node, nil] the body of the `block` node or `nil`\n"],["body","RuboCop::AST::ConditionalNode","RuboCop/AST/ConditionalNode.html#method-i-body","()","<p>Returns the body associated with the condition. This works together with\neach node&#39;s custom destructuring …\n"],["body","RuboCop::AST::DefNode","RuboCop/AST/DefNode.html#method-i-body","()","<p>The body of the method definition.\n<p>@note this can be either a `begin` node, if the method body contains …\n"],["body","RuboCop::AST::EnsureNode","RuboCop/AST/EnsureNode.html#method-i-body","()","<p>Returns the body of the `ensure` clause.\n<p>@return [Node, nil] The body of the `ensure`.\n"],["body","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-body","()","<p>Returns the body of the `for` loop.\n<p>@return [Node, nil] The body of the `for` loop.\n"],["body","RuboCop::AST::ResbodyNode","RuboCop/AST/ResbodyNode.html#method-i-body","()","<p>Returns the body of the `rescue` clause.\n<p>@return [Node, nil] The body of the `resbody`.\n"],["body","RuboCop::AST::WhenNode","RuboCop/AST/WhenNode.html#method-i-body","()","<p>Returns the body of the `when` node.\n<p>@return [Node, nil] the body of the `when` node\n"],["body_end?","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-body_end-3F","(line)",""],["body_length","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-body_length","(body)",""],["body_node","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-body_node","()",""],["boolean_or_empty_cache?","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-boolean_or_empty_cache-3F","()",""],["brace_alignment_style","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-brace_alignment_style","()",""],["brace_alignment_style","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-brace_alignment_style","()",""],["braces?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-braces-3F","()","<p>Checks whether the `block` literal is delimited by curly braces.\n<p>@return [Boolean] whether the `block` …\n"],["braces?","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-braces-3F","()","<p>Checks whether the `hash` literal is delimited by curly braces.\n<p>@return [Boolean] whether the `hash` literal …\n"],["braces_for_chaining_message","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-braces_for_chaining_message","(node)",""],["braces_for_chaining_style?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-braces_for_chaining_style-3F","(node)",""],["braces_will_be_removed?","RuboCop::Cop::Style::TrailingCommaInArguments","RuboCop/Cop/Style/TrailingCommaInArguments.html#method-i-braces_will_be_removed-3F","(args)","<p>Returns true if running with –auto-correct would remove the braces of the\nlast argument.\n"],["braces_with_contents_inside","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-braces_with_contents_inside","(node, inner)",""],["bracketed?","RuboCop::AST::ArrayNode","RuboCop/AST/ArrayNode.html#method-i-bracketed-3F","()","<p>Checks whether the `array` literal is delimited by either percent or square\nbrackets\n<p>@return [Boolean] …\n"],["bracketed_array_of?","RuboCop::Cop::ArraySyntax","RuboCop/Cop/ArraySyntax.html#method-i-bracketed_array_of-3F","(element_type, node)",""],["brackets?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-brackets-3F","(node)","<p>Returns true if the node has round/square/curly brackets.\n"],["branch","RuboCop::Cop::VariableForce::Branchable","RuboCop/Cop/VariableForce/Branchable.html#method-i-branch","()",""],["branch_index","RuboCop::AST::WhenNode","RuboCop/AST/WhenNode.html#method-i-branch_index","()","<p>Returns the index of the `when` branch within the `case` statement.\n<p>@return [Integer] the index of the …\n"],["break_line_before","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-break_line_before","(range, node, corrector, indent_steps)",""],["build_message","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-build_message","(klass, method_name, node)",""],["builtin_formatter_class","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-builtin_formatter_class","(specified_key)",""],["cache_name_from_uri","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-cache_name_from_uri","()",""],["cache_path","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-cache_path","()",""],["cache_path_exists?","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-cache_path_exists-3F","()",""],["cache_path_expired?","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-cache_path_expired-3F","()",""],["cache_root","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-cache_root","(config_store)",""],["cached_run?","RuboCop::Runner","RuboCop/Runner.html#method-i-cached_run-3F","()",""],["calculate_range","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-calculate_range","(expr, line_begin_pos, column_delta)",""],["call_chain_starts_with_int?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-call_chain_starts_with_int-3F","(begin_node, send_node)",""],["call_to_persisted?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-call_to_persisted-3F","(node)",""],["callback_methods","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-c-callback_methods","()",""],["called_on_string?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-called_on_string-3F","(node)",""],["calls_super?","RuboCop::Cop::Style::MethodMissing","RuboCop/Cop/Style/MethodMissing.html#method-i-calls_super-3F","(node)",""],["calls_to_report","RuboCop::Cop::Performance::RedundantBlockCall","RuboCop/Cop/Performance/RedundantBlockCall.html#method-i-calls_to_report","(argname, body)",""],["camel_case_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-camel_case_method-3F","()","<p>Checks whether the method is a camel case method, e.g. `Integer()`.\n<p>@return [Boolean] whether the method …\n"],["candidate_node?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-candidate_node-3F","(node)",""],["capture_with_block!","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-capture_with_block-21","()",""],["case_insensitive_out_of_order?","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-case_insensitive_out_of_order-3F","(string_a, string_b)",""],["case_style?","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-case_style-3F","()",""],["check","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-check","(node, elements)",""],["check","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-check","(comment)",""],["check","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check","(node, body)",""],["check","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-check","(array_node, left_parenthesis)",""],["check","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-check","(hash_node, left_parenthesis)",""],["check","RuboCop::Cop::Layout::IndentationConsistency","RuboCop/Cop/Layout/IndentationConsistency.html#method-i-check","(node)",""],["check","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-check","(node)",""],["check","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-check","(node, locations, begin_keyword = DO)",""],["check","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-check","(t1, t2)",""],["check","RuboCop::Cop::Layout::SpaceInsideRangeLiteral","RuboCop/Cop/Layout/SpaceInsideRangeLiteral.html#method-i-check","(node)",""],["check","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-check","(node)",""],["check","RuboCop::Cop::Lint::ConditionPosition","RuboCop/Cop/Lint/ConditionPosition.html#method-i-check","(node)",""],["check","RuboCop::Cop::Lint::DeprecatedClassMethods","RuboCop/Cop/Lint/DeprecatedClassMethods.html#method-i-check","(node)",""],["check","RuboCop::Cop::Lint::ElseLayout","RuboCop/Cop/Lint/ElseLayout.html#method-i-check","(node)",""],["check","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-check","(offenses, cop_disabled_line_ranges, comments)",""],["check","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-check","(node)",""],["check","RuboCop::Cop::Performance::TimesMap","RuboCop/Cop/Performance/TimesMap.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-check","(arg, args)",""],["check","RuboCop::Cop::Style::ClassMethods","RuboCop/Cop/Style/ClassMethods.html#method-i-check","(name, node)",""],["check","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-check","(node, body, type)",""],["check","RuboCop::Cop::Style::DocumentationMethod","RuboCop/Cop/Style/DocumentationMethod.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::GlobalVars","RuboCop/Cop/Style/GlobalVars.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-check","(pairs, delim, msg)",""],["check","RuboCop::Cop::Style::MethodMissing","RuboCop/Cop/Style/MethodMissing.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-check","(send_node)",""],["check","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-check","(begin_node)",""],["check","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-check","(node)",""],["check","RuboCop::Cop::Style::WhileUntilModifier","RuboCop/Cop/Style/WhileUntilModifier.html#method-i-check","(node)",""],["check","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-check","(node, items, kind, begin_pos, end_pos)",""],["check_add_column","RuboCop::Cop::Rails::NotNullColumn","RuboCop/Cop/Rails/NotNullColumn.html#method-i-check_add_column","(node)",""],["check_add_reference","RuboCop::Cop::Rails::NotNullColumn","RuboCop/Cop/Rails/NotNullColumn.html#method-i-check_add_reference","(node)",""],["check_alignment","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-check_alignment","(items, base_column = nil)",""],["check_alignment","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-check_alignment","(base_range, else_range)",""],["check_and_or","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-check_and_or","(node)",""],["check_argument","RuboCop::Cop::Lint::UnusedArgument","RuboCop/Cop/Lint/UnusedArgument.html#method-i-check_argument","(variable)",""],["check_argument","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-check_argument","(variable)",""],["check_argument","RuboCop::Cop::Lint::UnusedMethodArgument","RuboCop/Cop/Lint/UnusedMethodArgument.html#method-i-check_argument","(variable)",""],["check_argument","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-check_argument","(variable)",""],["check_asgn_alignment","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-check_asgn_alignment","(outer_node, inner_node)",""],["check_assignment","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-check_assignment","(node, rhs)",""],["check_assignment","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-check_assignment","(token)",""],["check_assignment","RuboCop::Cop::Layout::IndentAssignment","RuboCop/Cop/Layout/IndentAssignment.html#method-i-check_assignment","(node, rhs)",""],["check_assignment","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-check_assignment","(node, rhs)",""],["check_assignment","RuboCop::Cop::Layout::MultilineAssignmentLayout","RuboCop/Cop/Layout/MultilineAssignmentLayout.html#method-i-check_assignment","(node, rhs)",""],["check_assignment","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-check_assignment","(node, rhs)",""],["check_assignment","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-check_assignment","(assignment)",""],["check_assignment_to_condition","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-check_assignment_to_condition","(node)",""],["check_backtick_literal","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-check_backtick_literal","(node)",""],["check_based_on_longest_key","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-check_based_on_longest_key","(pairs, left_brace, left_parenthesis)",""],["check_begin","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-check_begin","(node, range, begin_keyword)",""],["check_begin_node","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-check_begin_node","(node)",""],["check_beginning","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_beginning","(style, first_line)",""],["check_block_alignment","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-check_block_alignment","(start_node, block_node)",""],["check_body","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-check_body","(body, node)",""],["check_body","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-check_body","(node)",""],["check_both","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_both","(style, first_line, last_line)",""],["check_brace_layout","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-check_brace_layout","(node)",""],["check_bracketed_array","RuboCop::Cop::PercentArray","RuboCop/Cop/PercentArray.html#method-i-check_bracketed_array","(node)",""],["check_bracketed_array","RuboCop::Cop::Style::WordArray","RuboCop/Cop/Style/WordArray.html#method-i-check_bracketed_array","(node)",""],["check_branch","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-check_branch","(node)",""],["check_branches","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-check_branches","(branches)",""],["check_case","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-check_case","(case_node)",""],["check_case","RuboCop::Cop::Lint::UnreachableCode","RuboCop/Cop/Lint/UnreachableCode.html#method-i-check_case","(node)",""],["check_case_node","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-check_case_node","(node)",""],["check_change_column_default_node","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_change_column_default_node","(node)",""],["check_change_table_node","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_change_table_node","(node, block)",""],["check_change_table_offense","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_change_table_offense","(receiver, node)",""],["check_child_nodes","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-check_child_nodes","(node, unused, cur_vis)",""],["check_child_scope","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-check_child_scope","(node, cur_vis)",""],["check_children_line_break","RuboCop::Cop::FirstElementLineBreak","RuboCop/Cop/FirstElementLineBreak.html#method-i-check_children_line_break","(node, children, start = node)",""],["check_closing_pipe_space","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_closing_pipe_space","(args, closing_pipe)",""],["check_code_length","RuboCop::Cop::CodeLength","RuboCop/Cop/CodeLength.html#method-i-check_code_length","(node)",""],["check_comma","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-check_comma","(node, kind, comma_pos)",""],["check_compact","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-check_compact","(node)",""],["check_compact_style","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-check_compact_style","(node, body)",""],["check_condition","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-check_condition","(cond)",""],["check_const_receiver","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-check_const_receiver","(node, name, const_name)",""],["check_context_dependent","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-check_context_dependent","(arg, args)",""],["check_date_node","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-check_date_node","(node)",""],["check_deferred_empty_line","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_deferred_empty_line","(body)",""],["check_defs","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-check_defs","(nodes)",""],["check_defs","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-check_defs","(node, cur_vis)",""],["check_defs","RuboCop::Cop::Style::ClassMethods","RuboCop/Cop/Style/ClassMethods.html#method-i-check_defs","(name, node)",""],["check_directive_line","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-check_directive_line","(line, index)",""],["check_drop_table_node","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_drop_table_node","(node)",""],["check_each_arg","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_each_arg","(args)",""],["check_else","RuboCop::Cop::Lint::ElseLayout","RuboCop/Cop/Lint/ElseLayout.html#method-i-check_else","(node)",""],["check_empty","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-check_empty","(left_brace, space_plus_brace, used_style)",""],["check_empty_lines_except_namespace","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_empty_lines_except_namespace","(body, first_line, last_line)",""],["check_empty_lines_special","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_empty_lines_special","(body, first_line, last_line)",""],["check_end","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-check_end","(node, range, begin_keyword)",""],["check_end_kw_alignment","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-check_end_kw_alignment","(node, align_ranges)",""],["check_end_kw_in_node","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-check_end_kw_in_node","(node)",""],["check_ending","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_ending","(style, last_line)",""],["check_ending_if","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-check_ending_if","(node)",""],["check_equality_only?","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-check_equality_only-3F","()",""],["check_expected_style","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-check_expected_style","(styles)",""],["check_exploded","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-check_exploded","(node)",""],["check_expressions","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-check_expressions","(expressions)",""],["check_first","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-check_first","(first, left_brace, left_parenthesis, offset)",""],["check_for_active_support_aliases?","RuboCop::Cop::Performance::DoubleStartEndWith","RuboCop/Cop/Performance/DoubleStartEndWith.html#method-i-check_for_active_support_aliases-3F","()",""],["check_for_circular_argument_references","RuboCop::Cop::Lint::CircularArgumentReference","RuboCop/Cop/Lint/CircularArgumentReference.html#method-i-check_for_circular_argument_references","(arg_name, arg_value)",""],["check_for_comment","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-check_for_comment","(processed_source)",""],["check_for_file_join_with_rails_root","RuboCop::Cop::Rails::FilePath","RuboCop/Cop/Rails/FilePath.html#method-i-check_for_file_join_with_rails_root","(node)",""],["check_for_infinite_loop","RuboCop::Runner","RuboCop/Runner.html#method-i-check_for_infinite_loop","(processed_source, offenses)","<p>Check whether a run created source identical to a previous run, which means\nthat we definitely have an …\n"],["check_for_interpolation","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-check_for_interpolation","(node)",""],["check_for_line_terminator_or_opener","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-check_for_line_terminator_or_opener","()",""],["check_for_literal","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-check_for_literal","(node)",""],["check_for_no_comment","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-check_for_no_comment","(processed_source)",""],["check_for_rails_root_join_with_slash_separated_path","RuboCop::Cop::Rails::FilePath","RuboCop/Cop/Rails/FilePath.html#method-i-check_for_rails_root_join_with_slash_separated_path","(node)",""],["check_for_unneeded_disables?","RuboCop::Runner","RuboCop/Runner.html#method-i-check_for_unneeded_disables-3F","(source)",""],["check_for_unused_assignments","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-check_for_unused_assignments","(variable)",""],["check_grouped_style","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-check_grouped_style","(send_node)",""],["check_if","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-check_if","(node, body, else_clause, base_loc)",""],["check_if","RuboCop::Cop::Lint::UnreachableCode","RuboCop/Cop/Lint/UnreachableCode.html#method-i-check_if","(node)",""],["check_if_node","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-check_if_node","(node)",""],["check_indentation","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-check_indentation","(base_loc, body_node, style = 'normal')",""],["check_inside","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-check_inside","(node, left_brace, right_brace)",""],["check_inside_pipes","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_inside_pipes","(args, opening_pipe, closing_pipe)",""],["check_irreversible_schema_statement_node","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_irreversible_schema_statement_node","(node)",""],["check_keyword","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-check_keyword","(node, range)",""],["check_left_brace","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-check_left_brace","(inner, left_brace, args_delimiter)",""],["check_line","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_line","(style, line, msg)",""],["check_line","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-check_line","(line, index, heredocs)",""],["check_literal","RuboCop::Cop::Style::TrailingCommaInLiteral","RuboCop/Cop/Style/TrailingCommaInLiteral.html#method-i-check_literal","(node, kind)",""],["check_localtime","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-check_localtime","(node)",""],["check_members","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-check_members","(base, members)",""],["check_method_line_break","RuboCop::Cop::FirstElementLineBreak","RuboCop/Cop/FirstElementLineBreak.html#method-i-check_method_line_break","(node, children)",""],["check_method_node","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-check_method_node","(node)",""],["check_method_node","RuboCop::Cop::Style::CollectionMethods","RuboCop/Cop/Style/CollectionMethods.html#method-i-check_method_node","(node)",""],["check_modifier","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-check_modifier","(send_node, class_start_col)",""],["check_multiline_quote_style","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-check_multiline_quote_style","(node, quote)",""],["check_name","RuboCop::Cop::ConfigurableFormatting","RuboCop/Cop/ConfigurableFormatting.html#method-i-check_name","(node, name, name_range)",""],["check_name","RuboCop::Cop::Naming::ClassAndModuleCamelCase","RuboCop/Cop/Naming/ClassAndModuleCamelCase.html#method-i-check_name","(node)",""],["check_negative_conditional","RuboCop::Cop::NegativeConditional","RuboCop/Cop/NegativeConditional.html#method-i-check_negative_conditional","(node)",""],["check_nested","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-check_nested","(node, base)",""],["check_nested_style","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-check_nested_style","(node)",""],["check_new_line","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-check_new_line","(node)",""],["check_new_line_offense","RuboCop::Cop::Layout::MultilineAssignmentLayout","RuboCop/Cop/Layout/MultilineAssignmentLayout.html#method-i-check_new_line_offense","(node, rhs)",""],["check_new_visibility","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-check_new_visibility","(node, unused, new_vis, cur_vis)",""],["check_no_space","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_no_space","(space_begin_pos, space_end_pos, msg)",""],["check_no_space_style_inside_pipes","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_no_space_style_inside_pipes","(args, opening_pipe, closing_pipe)",""],["check_node","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-check_node","(node)",""],["check_node","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-check_node","(node)",""],["check_node","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-check_node","(node)",""],["check_node","RuboCop::Cop::Rails::RelativeDateConstant","RuboCop/Cop/Rails/RelativeDateConstant.html#method-i-check_node","(node)",""],["check_node","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-check_node","(node, branches)",""],["check_node","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-check_node","(node)",""],["check_non_empty","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-check_non_empty","(left_brace, space_plus_brace, used_style)",""],["check_nonzero_length_predicate","RuboCop::Cop::Style::ZeroLengthPredicate","RuboCop/Cop/Style/ZeroLengthPredicate.html#method-i-check_nonzero_length_predicate","(node)",""],["check_opening_pipe_space","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_opening_pipe_space","(args, opening_pipe)",""],["check_operator","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-check_operator","(op, right_operand)",""],["check_optarg","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-check_optarg","(arg, equals, value)",""],["check_other","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-check_other","(t1, t2, ast)",""],["check_other_alignment","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-check_other_alignment","(node)",""],["check_pairs","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-check_pairs","(node)",""],["check_pairs","RuboCop::Cop::Rails::NotNullColumn","RuboCop/Cop/Rails/NotNullColumn.html#method-i-check_pairs","(pairs)",""],["check_percent_array","RuboCop::Cop::PercentArray","RuboCop/Cop/PercentArray.html#method-i-check_percent_array","(node)",""],["check_percent_r_literal","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-check_percent_r_literal","(node)",""],["check_percent_x_literal","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-check_percent_x_literal","(node)",""],["check_predicate","RuboCop::Cop::Lint::RequireParentheses","RuboCop/Cop/Lint/RequireParentheses.html#method-i-check_predicate","(predicate, node)",""],["check_remove_column_node","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_remove_column_node","(node)",""],["check_remove_foreign_key_node","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-check_remove_foreign_key_node","(node)",""],["check_return_node","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-check_return_node","(node)",""],["check_right_brace","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-check_right_brace","(right_brace, left_brace, left_parenthesis)",""],["check_right_brace","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-check_right_brace","(inner, right_brace, block_length)",""],["check_right_bracket","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-check_right_bracket","(right_bracket, left_bracket, left_parenthesis)",""],["check_same_line","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-check_same_line","(node)",""],["check_same_line_offense","RuboCop::Cop::Layout::MultilineAssignmentLayout","RuboCop/Cop/Layout/MultilineAssignmentLayout.html#method-i-check_same_line_offense","(node, rhs)",""],["check_scope","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-check_scope","(node, cur_vis = :public)",""],["check_scope","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-check_scope","(node)",""],["check_scope","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-check_scope","(method_name, node)",""],["check_self_receiver","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-check_self_receiver","(node, name)",""],["check_send","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-check_send","(node, cur_vis)",""],["check_send","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-check_send","(begin_node, node)",""],["check_send","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-check_send","(method_name, node)",""],["check_separated_style","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-check_separated_style","(send_node)",""],["check_slash_literal","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-check_slash_literal","(node)",""],["check_source","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-check_source","(style, line_no, desc)",""],["check_space","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_space","(space_begin_pos, space_end_pos, range, msg)",""],["check_space_style_inside_pipes","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-check_space_style_inside_pipes","(args, opening_pipe, closing_pipe)",""],["check_style","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-check_style","(node, body)",""],["check_style!","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-check_style-21","()",""],["check_symmetrical","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-check_symmetrical","(node)",""],["check_target_ruby","RuboCop::Config","RuboCop/Config.html#method-i-check_target_ruby","()",""],["check_ternary","RuboCop::Cop::Lint::RequireParentheses","RuboCop/Cop/Lint/RequireParentheses.html#method-i-check_ternary","(ternary, node)",""],["check_time_node","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-check_time_node","(klass, node)",""],["check_token_set","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-check_token_set","(index)",""],["check_tokens","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-check_tokens","(ast, t1, t2)",""],["check_unary","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-check_unary","(begin_node, node)",""],["check_uri_line","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-check_uri_line","(line, index)",""],["check_used_in_conditional","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-check_used_in_conditional","(node)",""],["check_variable","RuboCop::Cop::Lint::UnderscorePrefixedVariableName","RuboCop/Cop/Lint/UnderscorePrefixedVariableName.html#method-i-check_variable","(variable)",""],["check_when","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-check_when","(when_node)",""],["check_when_node","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-check_when_node","(node)",""],["check_zero_length_predicate","RuboCop::Cop::Style::ZeroLengthPredicate","RuboCop/Cop/Style/ZeroLengthPredicate.html#method-i-check_zero_length_predicate","(node)",""],["checkable_layout?","RuboCop::Cop::HashAlignment::KeyAlignment","RuboCop/Cop/HashAlignment/KeyAlignment.html#method-i-checkable_layout-3F","(_node)",""],["checkable_layout?","RuboCop::Cop::HashAlignment::ValueAlignment","RuboCop/Cop/HashAlignment/ValueAlignment.html#method-i-checkable_layout-3F","(node)",""],["checksum","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-checksum","()","<p>Raw source checksum for tracking infinite loops.\n"],["children","RuboCop::Cop::Layout::MultilineMethodCallBraceLayout","RuboCop/Cop/Layout/MultilineMethodCallBraceLayout.html#method-i-children","(node)",""],["children","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-children","(node)",""],["children_offenses","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-children_offenses","(variables)",""],["class_def?","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-class_def-3F","(line)",""],["class_emitter_method?","RuboCop::Cop::ConfigurableFormatting","RuboCop/Cop/ConfigurableFormatting.html#method-i-class_emitter_method-3F","(node, name)","<p>A class emitter method is a singleton method in a class/module, where the\nmethod has the same name as …\n"],["class_nodes","RuboCop::Cop::Lint::DeprecatedClassMethods::DeprecatedClassMethod","RuboCop/Cop/Lint/DeprecatedClassMethods/DeprecatedClassMethod.html#method-i-class_nodes","()",""],["cleanup","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-cleanup","(config_store, verbose, cache_root = nil)","<p>Remove old files so that the cache doesn&#39;t grow too big. When the\nthreshold MaxFilesInCache has been …\n"],["clear","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-clear","()",""],["clear_options","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-clear_options","()",""],["close_output_files","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-close_output_files","()",""],["closing_brace_on_same_line?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-closing_brace_on_same_line-3F","(node)","<p>This method depends on the fact that we have guarded against implicit and\nempty literals.\n"],["closing_delimiter","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-closing_delimiter","()","<p>The closing delimiter for this `block` literal.\n<p>@return [String] the closing delimiter for the `block` …\n"],["code","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-i-code","()","<p>@api private\n"],["code_length","RuboCop::Cop::ClassishLength","RuboCop/Cop/ClassishLength.html#method-i-code_length","(node)",""],["code_length","RuboCop::Cop::TooManyLines","RuboCop/Cop/TooManyLines.html#method-i-code_length","(node)",""],["collate_corrections","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-collate_corrections","(corrector, cops)",""],["collect_variable_like_names","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-collect_variable_like_names","(scope)",""],["collect_variable_like_names","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-collect_variable_like_names","(scope)",""],["collect_variable_like_names","RuboCop::Cop::Rails::UnknownEnv","RuboCop/Cop/Rails/UnknownEnv.html#method-i-collect_variable_like_names","(_scope)",""],["collection","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-collection","()","<p>Returns the collection the `for` loop is iterating over.\n<p>@return [Node] The collection the `for` loop …\n"],["colon?","RuboCop::AST::KeywordSplatNode","RuboCop/AST/KeywordSplatNode.html#method-i-colon-3F","()","<p>This is used for duck typing with `pair` nodes which also appear as `hash`\nelements.\n<p>@return [false]\n"],["colon?","RuboCop::AST::PairNode","RuboCop/AST/PairNode.html#method-i-colon-3F","()","<p>Checks whether the `pair` uses a colon delimiter.\n<p>@return [Boolean] whether this `pair` uses a colon delimiter …\n"],["colored_severity_code","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-colored_severity_code","(offense)",""],["colorize","RuboCop::Formatter::Colorizable","RuboCop/Formatter/Colorizable.html#method-i-colorize","(string, *args)",""],["column","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-column","()","<p>@api private\n"],["column_keywords","RuboCop::Cop::Rails::DynamicFindBy","RuboCop/Cop/Rails/DynamicFindBy.html#method-i-column_keywords","(method)",""],["column_length","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-column_length","()","<p>@api private\n"],["column_of","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-column_of","(range)","<p>Returns the column of the given range. For single line ranges, this is\nsimple. For ranges with line breaks, …\n"],["column_range","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-column_range","()","<p>@api private\n"],["combine_args","RuboCop::Cop::Performance::DoubleStartEndWith","RuboCop/Cop/Performance/DoubleStartEndWith.html#method-i-combine_args","(first_call_args, second_call_args)",""],["command","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-command","()",""],["command?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-command-3F","(name)","<p>Checks whether the name of the dispatched method matches the argument and\nhas an implicit receiver.\n<p>@param …\n"],["command_or_kernel_call?","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-command_or_kernel_call-3F","(name, node)",""],["comment_column","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-comment_column","(ix)",""],["comment_config","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-comment_config","()",""],["comment_lines","RuboCop::Cop::PrecedingFollowingAlignment","RuboCop/Cop/PrecedingFollowingAlignment.html#method-i-comment_lines","()",""],["comment_lines","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-comment_lines","()",""],["comment_lines?","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-comment_lines-3F","(node)",""],["comment_on_line?","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-comment_on_line-3F","(line)",""],["comment_only_line?","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-comment_only_line-3F","(line_number)",""],["comment_range_with_surrounding_space","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-comment_range_with_surrounding_space","(range)",""],["commented?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-commented-3F","(source)",""],["comments_in_array?","RuboCop::Cop::PercentArray","RuboCop/Cop/PercentArray.html#method-i-comments_in_array-3F","(node)",""],["common_prefix_length","RuboCop::StringUtil::JaroWinkler","RuboCop/StringUtil/JaroWinkler.html#method-i-common_prefix_length","()",""],["compact?","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-compact-3F","(node)",""],["compact_node_name?","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-compact_node_name-3F","(node)",""],["compact_style?","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-compact_style-3F","()",""],["compare_exceptions","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-compare_exceptions","(exception, other_exception)",""],["compare_range","RuboCop::Cop::Performance::CompareWithBlock","RuboCop/Cop/Performance/CompareWithBlock.html#method-i-compare_range","(send, node)",""],["comparison?","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-comparison-3F","(node)",""],["comparison_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-comparison_method-3F","()","<p>Checks whether the method is a comparison method.\n<p>@return [Boolean] whether the method is a comparison …\n"],["compatible_external_encoding_for?","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-compatible_external_encoding_for-3F","(src)",""],["compile_arg","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_arg","(token)",""],["compile_args","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_args","(tokens)",""],["compile_ascend","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_ascend","(tokens, cur_node, seq_head)",""],["compile_capt_ellip","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_capt_ellip","(tokens, cur_node, terms, index)",""],["compile_capture","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_capture","(tokens, cur_node, seq_head)",""],["compile_ellipsis","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_ellipsis","(tokens, cur_node, terms, index)",""],["compile_expr","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_expr","(tokens, cur_node, seq_head)","<p>rubocop:disable Metrics/MethodLength, Metrics/AbcSize\n"],["compile_expr_with_capture_check","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_expr_with_capture_check","(tokens, temp_node, seq_head, before, after)",""],["compile_expr_with_captures","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_expr_with_captures","(tokens, temp_node, seq_head)",""],["compile_expr_with_index","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_expr_with_index","(tokens, cur_node, index)",""],["compile_funcall","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_funcall","(tokens, cur_node, method, seq_head)",""],["compile_intersect","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_intersect","(tokens, cur_node, seq_head)",""],["compile_literal","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_literal","(cur_node, literal, seq_head)",""],["compile_negation","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_negation","(tokens, cur_node, seq_head)",""],["compile_nodetype","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_nodetype","(cur_node, type)",""],["compile_param","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_param","(cur_node, number, seq_head)",""],["compile_predicate","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_predicate","(tokens, cur_node, predicate, seq_head)",""],["compile_seq","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_seq","(tokens, cur_node, seq_head)","<p>rubocop:enable Metrics/MethodLength, Metrics/AbcSize\n"],["compile_seq_tail","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_seq_tail","(tokens, cur_node)",""],["compile_seq_terms","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_seq_terms","(tokens, cur_node)",""],["compile_seq_terms_with_size","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_seq_terms_with_size","(tokens, cur_node)",""],["compile_union","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_union","(tokens, cur_node, seq_head)",""],["compile_wildcard","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-compile_wildcard","(cur_node, name, seq_head)",""],["complex_condition?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-complex_condition-3F","(condition)","<p>If the condition is parenthesized we recurse and check for any complex\nexpressions within it.\n"],["complex_content?","RuboCop::Cop::Style::WordArray","RuboCop/Cop/Style/WordArray.html#method-i-complex_content-3F","(strings)",""],["complexity","RuboCop::Cop::MethodComplexity","RuboCop/Cop/MethodComplexity.html#method-i-complexity","(node)",""],["complexity","RuboCop::Cop::Metrics::AbcSize","RuboCop/Cop/Metrics/AbcSize.html#method-i-complexity","(node)",""],["compute_distance","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-compute_distance","()",""],["compute_distance","RuboCop::StringUtil::JaroWinkler","RuboCop/StringUtil/JaroWinkler.html#method-i-compute_distance","()",""],["compute_do_source_line_column","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-compute_do_source_line_column","(node, end_loc)",""],["compute_non_zero_distance","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-compute_non_zero_distance","(matched_count, transposition_count)",""],["compute_start_col","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-compute_start_col","(ancestor_node, node)",""],["concat_length","RuboCop::Cop::Style::CommentAnnotation","RuboCop/Cop/Style/CommentAnnotation.html#method-i-concat_length","(*args)",""],["cond_range","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-cond_range","(node, cond)",""],["condition","RuboCop::AST::ConditionalNode","RuboCop/AST/ConditionalNode.html#method-i-condition","()","<p>Returns the condition of the node. This works together with each node&#39;s\ncustom destructuring method …\n"],["condition","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-condition","(node)",""],["conditional?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-conditional-3F","(node)",""],["conditional?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-conditional-3F","(node)",""],["conditional_assignment?","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-conditional_assignment-3F","(asgn_node)",""],["conditional_clause?","RuboCop::Cop::VariableForce::SimpleConditional","RuboCop/Cop/VariableForce/SimpleConditional.html#method-i-conditional_clause-3F","()",""],["conditions","RuboCop::AST::WhenNode","RuboCop/AST/WhenNode.html#method-i-conditions","()","<p>Returns an array of all the conditions in the `when` branch.\n<p>@return [Array&lt;Node&gt;] an array of condition …\n"],["config_files_in_path","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-config_files_in_path","(target)",""],["config_lines","RuboCop::CLI","RuboCop/CLI.html#method-i-config_lines","(cop)",""],["config_to_allow_offenses","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-config_to_allow_offenses","()",""],["config_to_allow_offenses=","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-config_to_allow_offenses-3D","(hash)",""],["configuration_file_for","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-configuration_file_for","(target_dir)","<p>Returns the path of .rubocop.yml searching upwards in the directory\nstructure starting at the given directory …\n"],["configuration_from_file","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-configuration_from_file","(config_file)",""],["configured_indent","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-configured_indent","()",""],["configured_indentation_width","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-configured_indentation_width","()",""],["configured_indentation_width","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-configured_indentation_width","()",""],["configured_indentation_width","RuboCop::Cop::Style::MultilineIfModifier","RuboCop/Cop/Style/MultilineIfModifier.html#method-i-configured_indentation_width","()",""],["configured_indentation_width","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-configured_indentation_width","()",""],["conflicting_styles_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-conflicting_styles_detected","()",""],["consecutive_duplicates","RuboCop::Cop::Duplication","RuboCop/Cop/Duplication.html#method-i-consecutive_duplicates","(collection)","<p>Returns the consecutive duplicates, leaving out the first instance of the\nduplicated elements.\n<p>@param …\n"],["consecutive_lines","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-consecutive_lines","(previous, current)",""],["considered_failure?","RuboCop::Runner","RuboCop/Runner.html#method-i-considered_failure-3F","(offense)",""],["consistent_multiline?","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-consistent_multiline-3F","()",""],["const_receiver?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-const_receiver-3F","()","<p>Checks whether the <strong>explicit</strong> receiver of this method\ndispatch is a `const` node.\n<p>@return [Boolean] whether …\n"],["const_receiver?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-const_receiver-3F","()","<p>Checks whether the <strong>explicit</strong> receiver of node is a `const`\nnode.\n<p>@return [Boolean] whether the receiver …\n"],["constructor?","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-constructor-3F","(node)",""],["contain_local_object?","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-contain_local_object-3F","(variable_name)",""],["contains_backtick?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-contains_backtick-3F","(node)",""],["contains_colons_or_commas?","RuboCop::Cop::Lint::PercentSymbolArray","RuboCop/Cop/Lint/PercentSymbolArray.html#method-i-contains_colons_or_commas-3F","(node)",""],["contains_cop_matching?","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-contains_cop_matching-3F","(names)",""],["contains_described_class_msg?","RuboCop::Cop::InternalAffairs::UselessMessageAssertion","RuboCop/Cop/InternalAffairs/UselessMessageAssertion.html#method-i-contains_described_class_msg-3F","(node)",""],["contains_disallowed_backtick?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-contains_disallowed_backtick-3F","(node)",""],["contains_disallowed_slash?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-contains_disallowed_slash-3F","(node)",""],["contains_double_splat?","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-contains_double_splat-3F","(node)",""],["contains_guard_clause?","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-contains_guard_clause-3F","(node)",""],["contains_multiple_levels_of_exceptions?","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-contains_multiple_levels_of_exceptions-3F","(group)",""],["contains_preferred_delimiter?","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-contains_preferred_delimiter-3F","(node, type)",""],["contains_quotes_or_commas?","RuboCop::Cop::Lint::PercentStringArray","RuboCop/Cop/Lint/PercentStringArray.html#method-i-contains_quotes_or_commas-3F","(node)",""],["contains_slash?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-contains_slash-3F","(node)",""],["contains_splat?","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-contains_splat-3F","(node)",""],["content","RuboCop::AST::RegexpNode","RuboCop/AST/RegexpNode.html#method-i-content","()","<p>@return [String] a string of regexp content\n"],["contents_range","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-contents_range","(node)","<p>A range containing only the contents of the percent literal (e.g. in %i{1 2\n3} this will be the range …\n"],["contiguous_assignment_lines","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-contiguous_assignment_lines","(range)",""],["convention_on","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-convention_on","(line, column, autocorrect)",""],["convert_hash_data","RuboCop::Cop::Rails::HttpPositionalArguments","RuboCop/Cop/Rails/HttpPositionalArguments.html#method-i-convert_hash_data","(data, type)",""],["cop_config","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-cop_config","()",""],["cop_config","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-i-cop_config","()",""],["cop_config_params","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-cop_config_params","(default_cfg, cfg)",""],["cop_disabled_line_ranges","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-cop_disabled_line_ranges","()",""],["cop_enabled_at_line?","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-cop_enabled_at_line-3F","(cop, line_number)",""],["cop_label","RuboCop::Cop::Metrics::BlockLength","RuboCop/Cop/Metrics/BlockLength.html#method-i-cop_label","()",""],["cop_label","RuboCop::Cop::Metrics::MethodLength","RuboCop/Cop/Metrics/MethodLength.html#method-i-cop_label","()",""],["cop_line_ranges","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-cop_line_ranges","(analysis)",""],["cop_name","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-cop_name","()",""],["cop_name","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-cop_name","()",""],["cop_range","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-cop_range","(comment, cop)",""],["cops","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-cops","()",""],["cops","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-cops","()",""],["cops_disabled_in_comments_summary","RuboCop::Formatter::DisabledLinesFormatter","RuboCop/Formatter/DisabledLinesFormatter.html#method-i-cops_disabled_in_comments_summary","()",""],["cops_of_department","RuboCop::CLI","RuboCop/CLI.html#method-i-cops_of_department","(cops, department)",""],["correct","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-correct","(node)",""],["correct","RuboCop::Cop::Style::CaseCorrector","RuboCop/Cop/Style/CaseCorrector.html#method-c-correct","(cop, node)",""],["correct","RuboCop::Cop::Style::IfCorrector","RuboCop/Cop/Style/IfCorrector.html#method-c-correct","(cop, node)",""],["correct","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-correct","(node)",""],["correct","RuboCop::Cop::Style::UnlessCorrector","RuboCop/Cop/Style/UnlessCorrector.html#method-c-correct","(cop, node)",""],["correct_alias_method_to_alias","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-correct_alias_method_to_alias","(send_node)",""],["correct_alias_to_alias_method","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-correct_alias_to_alias_method","(node)",""],["correct_alias_with_symbol_args","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-correct_alias_with_symbol_args","(node)",""],["correct_annotation?","RuboCop::Cop::Style::CommentAnnotation","RuboCop/Cop/Style/CommentAnnotation.html#method-i-correct_annotation-3F","(first_word, colon, space, note)",""],["correct_args","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-correct_args","(node, corrector)",""],["correct_bracketed","RuboCop::Cop::Style::SymbolArray","RuboCop/Cop/Style/SymbolArray.html#method-i-correct_bracketed","(node)",""],["correct_bracketed","RuboCop::Cop::Style::WordArray","RuboCop/Cop/Style/WordArray.html#method-i-correct_bracketed","(node)",""],["correct_branches","RuboCop::Cop::Style::ConditionalCorrectorHelper","RuboCop/Cop/Style/ConditionalCorrectorHelper.html#method-i-correct_branches","(corrector, branches)",""],["correct_by_library","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-correct_by_library","(node)",""],["correct_by_squiggly","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-correct_by_squiggly","(node)",""],["correct_case_delimiters?","RuboCop::Cop::Naming::HeredocDelimiterCase","RuboCop/Cop/Naming/HeredocDelimiterCase.html#method-i-correct_case_delimiters-3F","(node)",""],["correct_case_when","RuboCop::Cop::Style::EmptyCaseCondition","RuboCop/Cop/Style/EmptyCaseCondition.html#method-i-correct_case_when","(corrector, case_node, when_nodes)",""],["correct_delimiters","RuboCop::Cop::Naming::HeredocDelimiterCase","RuboCop/Cop/Naming/HeredocDelimiterCase.html#method-i-correct_delimiters","(node)",""],["correct_dot_position_style?","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-correct_dot_position_style-3F","(dot_line, selector_line)",""],["correct_if_branches","RuboCop::Cop::Style::ConditionalCorrectorHelper","RuboCop/Cop/Style/ConditionalCorrectorHelper.html#method-i-correct_if_branches","(corrector, cop, node)",""],["correct_implicit","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-correct_implicit","(node, corrector)",""],["correct_indentation","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-correct_indentation","(next_line)",""],["correct_inverse_block","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-correct_inverse_block","(node)",""],["correct_inverse_selector","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-correct_inverse_selector","(block, corrector)",""],["correct_key_value","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-correct_key_value","(key_delta, key, value, separator)",""],["correct_key_value_each","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-correct_key_value_each","(node, corrector)",""],["correct_literal_style?","RuboCop::Cop::Style::PercentQLiterals","RuboCop/Cop/Style/PercentQLiterals.html#method-i-correct_literal_style-3F","(node)",""],["correct_method","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-correct_method","(method_name)",""],["correct_multiple_elements","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-correct_multiple_elements","(node, parent, new_source)",""],["correct_no_value","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-correct_no_value","(key_delta, key)",""],["correct_not","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-correct_not","(node, receiver, corrector)","<p>! is a special case: &#39;x and !obj.method arg&#39; can be auto-corrected\nif we recurse down a level …\n"],["correct_operator","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-correct_operator","(corrector, recv, arg)",""],["correct_opposite_method","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-correct_opposite_method","(range, child)",""],["correct_other","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-correct_other","(node, corrector)",""],["correct_parenthesized","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-correct_parenthesized","(condition)",""],["correct_percent","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-correct_percent","(node, char)","<p>&#39;a&#39;, &#39;b&#39;, &#39;c&#39; &mdash; <p>&gt; %w(a b c)\n\n"],["correct_plain_each","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-correct_plain_each","(node, corrector)",""],["correct_send","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-correct_send","(node, corrector)",""],["correct_setter","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-correct_setter","(node, corrector)",""],["correct_single_element","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-correct_single_element","(node, new_source)",""],["correct_style?","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-correct_style-3F","(node)",""],["correct_style?","RuboCop::Cop::Style::NegatedIf","RuboCop/Cop/Style/NegatedIf.html#method-i-correct_style-3F","(node)",""],["correct_style?","RuboCop::Cop::Style::ReturnNil","RuboCop/Cop/Style/ReturnNil.html#method-i-correct_style-3F","(node)",""],["correct_style_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-correct_style_detected","()",""],["correct_style_detected","RuboCop::Cop::Style::CharacterLiteral","RuboCop/Cop/Style/CharacterLiteral.html#method-i-correct_style_detected","()","<p>Dummy implementation of method in ConfigurableEnforcedStyle that is called\nfrom StringHelp.\n"],["correct_unparenthesized","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-correct_unparenthesized","(condition)",""],["correct_validate_type","RuboCop::Cop::Rails::Validation","RuboCop/Cop/Rails/Validation.html#method-i-correct_validate_type","(corrector, node)",""],["correct_when_conditions","RuboCop::Cop::Style::EmptyCaseCondition","RuboCop/Cop/Style/EmptyCaseCondition.html#method-i-correct_when_conditions","(corrector, when_nodes)",""],["correct_with_parens","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-correct_with_parens","(range, node)",""],["correct_without_parens","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-correct_without_parens","(range)",""],["correctable_send?","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-correctable_send-3F","(node)",""],["corrected","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-corrected","()","<p>@api public\n<p>@!attribute [r] corrected\n<p>@return [Boolean]\n"],["corrected","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-corrected","(node)",""],["corrected","RuboCop::Cop::Style::PercentQLiterals","RuboCop/Cop/Style/PercentQLiterals.html#method-i-corrected","(src)",""],["corrected?","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-corrected-3F","()",""],["corrected_code","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-corrected_code","(node)",""],["correction","RuboCop::Cop::Lint::RescueType","RuboCop/Cop/Lint/RescueType.html#method-i-correction","(*exceptions)",""],["correction","RuboCop::Cop::Performance::Casecmp","RuboCop/Cop/Performance/Casecmp.html#method-i-correction","(node, _receiver, method, arg, variable)",""],["correction","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-correction","(shuffle_arg, method, method_args)",""],["correction","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-correction","(node)",""],["correction","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-i-correction","()",""],["correction","RuboCop::Cop::Style::ParallelAssignment::ModifierCorrector","RuboCop/Cop/Style/ParallelAssignment/ModifierCorrector.html#method-i-correction","()",""],["correction","RuboCop::Cop::Style::ParallelAssignment::RescueCorrector","RuboCop/Cop/Style/ParallelAssignment/RescueCorrector.html#method-i-correction","()",""],["correction","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-correction","(node)",""],["correction_compact_to_exploded","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-correction_compact_to_exploded","(node)",""],["correction_exceeds_line_limit?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-correction_exceeds_line_limit-3F","(node, branches)","<p>If `Metrics/LineLength` is enabled, we do not want to introduce an offense\nby auto-correcting this cop. …\n"],["correction_exploded_to_compact","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-correction_exploded_to_compact","(node)",""],["correction_range","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-i-correction_range","()",""],["correction_range","RuboCop::Cop::Style::ParallelAssignment::ModifierCorrector","RuboCop/Cop/Style/ParallelAssignment/ModifierCorrector.html#method-i-correction_range","()",""],["correction_range","RuboCop::Cop::Style::ParallelAssignment::RescueCorrector","RuboCop/Cop/Style/ParallelAssignment/RescueCorrector.html#method-i-correction_range","()",""],["correction_would_break_code?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-correction_would_break_code-3F","(node)",""],["corrections","RuboCop::Formatter::SimpleTextFormatter::Report","RuboCop/Formatter/SimpleTextFormatter/Report.html#method-i-corrections","()",""],["count_comments?","RuboCop::Cop::CodeLength","RuboCop/Cop/CodeLength.html#method-i-count_comments-3F","()",""],["count_format_matches","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-count_format_matches","(node)",""],["count_keyword_args?","RuboCop::Cop::Metrics::ParameterLists","RuboCop/Cop/Metrics/ParameterLists.html#method-i-count_keyword_args-3F","()",""],["count_matches","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-count_matches","(node)",""],["count_percent_matches","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-count_percent_matches","(node)",""],["count_stats","RuboCop::Formatter::FuubarStyleFormatter","RuboCop/Formatter/FuubarStyleFormatter.html#method-i-count_stats","(offenses)",""],["count_stats","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-count_stats","(offenses)",""],["count_transpositions","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-count_transpositions","(common_chars_a, common_chars_b)","<p>rubocop:enable Metrics/AbcSize\n"],["countable_format?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-countable_format-3F","(node)",""],["countable_percent?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-countable_percent-3F","(node)",""],["create_config","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-create_config","(hash, path)",""],["create_parser","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-create_parser","(ruby_version)","<p>rubocop:enable Metrics/MethodLength\n"],["current_scope","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-current_scope","()",""],["current_scope_level","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-current_scope_level","()",""],["custom_formatter_class","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-custom_formatter_class","(specified_class_name)",""],["custom_severity","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-custom_severity","()",""],["danger_chain?","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-danger_chain-3F","(chain)",""],["debug?","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-debug-3F","()",""],["debug?","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-debug-3F","()",""],["debug?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-debug-3F","()",""],["declaration_with_comment","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-declaration_with_comment","(node)",""],["declare_variable","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-declare_variable","(name, node)",""],["decorated_message","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-decorated_message","(offense)",""],["def_correction","RuboCop::Cop::Style::ParallelAssignment::RescueCorrector","RuboCop/Cop/Style/ParallelAssignment/RescueCorrector.html#method-i-def_correction","(rescue_result)",""],["def_end","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-def_end","(node)",""],["def_modifier?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-def_modifier-3F","()","<p>Checks if this node is part of a chain of `def` modifiers.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">private</span> <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>; <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["def_node?","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-def_node-3F","(node)",""],["def_node_matcher","RuboCop::NodePattern::Macros","RuboCop/NodePattern/Macros.html#method-i-def_node_matcher","(method_name, pattern_str)","<p>Define a method which applies a pattern to an AST node\n<p>The new method will return nil if the node does …\n"],["def_node_search","RuboCop::NodePattern::Macros","RuboCop/NodePattern/Macros.html#method-i-def_node_search","(method_name, pattern_str)","<p>Define a method which recurses over the descendants of an AST node,\nchecking whether any of them match …\n"],["def_start","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-def_start","(node)",""],["default_config","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-default_config","(cop_name)",""],["default_configuration","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-default_configuration","()",""],["default_cop_config","RuboCop::Cop::MethodPreference","RuboCop/Cop/MethodPreference.html#method-i-default_cop_config","()",""],["default_severity","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-default_severity","()",""],["deferred_message","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-deferred_message","(node)",""],["define_method_call?","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-define_method_call-3F","(variable)",""],["define_options","RuboCop::Options","RuboCop/Options.html#method-i-define_options","(args)",""],["defs","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-defs","(].include?(@scope.node.type))",""],["delegate?","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-delegate-3F","(body)",""],["delete","RuboCop::Config","RuboCop/Config.html#method-i-delete","(key)",""],["delimiter","RuboCop::AST::PairNode","RuboCop/AST/PairNode.html#method-i-delimiter","(with_spacing = false)","<p>Returns the delimiter of the `pair` as a string. Returns `=&gt;` for a\ncolon delimited `pair`, and `:` …\n"],["delimiter_delta","RuboCop::AST::HashElementNode","RuboCop/AST/HashElementNode.html#method-i-delimiter_delta","(other)","<p>Returns the delta between this element&#39;s delimiter and the\nargument&#39;s.\n<p>@note Pairs with different …\n"],["delimiter_delta","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-i-delimiter_delta","()",""],["delimiter_string","Heredoc","Heredoc.html#method-i-delimiter_string","(node)",""],["delimiters","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-delimiters","()","<p>The delimiters for this `block` literal.\n<p>@return [Array&lt;String&gt;] the delimiters for the `block` …\n"],["delimiters","RuboCop::Cop::Naming::HeredocDelimiterNaming","RuboCop/Cop/Naming/HeredocDelimiterNaming.html#method-i-delimiters","(node)",""],["delta","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-i-delta","(first, second, alignment = :left)",""],["deltas","RuboCop::Cop::HashAlignment::KeyAlignment","RuboCop/Cop/HashAlignment/KeyAlignment.html#method-i-deltas","(first_pair, current_pair)",""],["deltas","RuboCop::Cop::HashAlignment::ValueAlignment","RuboCop/Cop/HashAlignment/ValueAlignment.html#method-i-deltas","(first_pair, current_pair)",""],["deltas_for_first_pair","RuboCop::Cop::HashAlignment::KeyAlignment","RuboCop/Cop/HashAlignment/KeyAlignment.html#method-i-deltas_for_first_pair","(*)",""],["deltas_for_first_pair","RuboCop::Cop::HashAlignment::SeparatorAlignment","RuboCop/Cop/HashAlignment/SeparatorAlignment.html#method-i-deltas_for_first_pair","(*)",""],["deltas_for_first_pair","RuboCop::Cop::HashAlignment::TableAlignment","RuboCop/Cop/HashAlignment/TableAlignment.html#method-i-deltas_for_first_pair","(first_pair, node)","<p>The table style is the only one where the first key-value pair can be\nconsidered to have bad alignment. …\n"],["department","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-department","()",""],["departments","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-departments","()","<p>@return [Array&lt;Symbol&gt;] list of departments for current cops.\n"],["dependency?","RuboCop::Cop::Style::ParallelAssignment::AssignmentSorter","RuboCop/Cop/Style/ParallelAssignment/AssignmentSorter.html#method-i-dependency-3F","(lhs, rhs)",""],["deprecated_method","RuboCop::Cop::Lint::DeprecatedClassMethods","RuboCop/Cop/Lint/DeprecatedClassMethods.html#method-i-deprecated_method","(data)",""],["deprecation_check","RuboCop::Config","RuboCop/Config.html#method-i-deprecation_check","()",""],["describe","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-describe","(cop)",""],["deserialize_offenses","RuboCop::CachedData","RuboCop/CachedData.html#method-i-deserialize_offenses","(offenses)","<p>Restore an offense object loaded from a JSON file.\n"],["details","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-details","()",""],["detect_quote_styles","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-detect_quote_styles","(node)",""],["detected_style","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-detected_style","()",""],["detected_style=","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-detected_style-3D","(style)",""],["detected_styles","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-detected_styles","(actual_column, offset, left_parenthesis, left_brace)",""],["detected_styles_for_column","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-detected_styles_for_column","(column, left_parenthesis, left_brace)",""],["directive_count","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-directive_count","(comment)",""],["directive_on_source_line?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-directive_on_source_line-3F","(index)",""],["directive_parts","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-directive_parts","(comment)",""],["directive_range_in_list","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-directive_range_in_list","(range, ranges)",""],["dirs_to_search","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-dirs_to_search","(target_dir)",""],["disabled?","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-disabled-3F","()","<p>@api public\n<p>@!attribute [r] disabled?\n<p>@return [Boolean]\n"],["disabled_line_ranges","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-disabled_line_ranges","()",""],["disallowed_literal?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-disallowed_literal-3F","(begin_node, node)",""],["display_column","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-display_column","(range)",""],["display_cop_names?","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-display_cop_names-3F","()",""],["display_error_summary","RuboCop::CLI","RuboCop/CLI.html#method-i-display_error_summary","(errors)",""],["display_str","RuboCop::Cop::Lint::ImplicitStringConcatenation","RuboCop/Cop/Lint/ImplicitStringConcatenation.html#method-i-display_str","(node)",""],["display_style_guide?","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-display_style_guide-3F","()",""],["display_warning_summary","RuboCop::CLI","RuboCop/CLI.html#method-i-display_warning_summary","(warnings)",""],["disqualified_parent?","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-disqualified_parent-3F","(parent, node)",""],["distance","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-distance","()",""],["distance","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-c-distance","(*args)",""],["do?","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-do-3F","()","<p>Checks whether the `for` node has a `do` keyword.\n<p>@return [Boolean] whether the `for` node has a `do` …\n"],["do?","RuboCop::AST::UntilNode","RuboCop/AST/UntilNode.html#method-i-do-3F","()","<p>Checks whether the `until` node has a `do` keyword.\n<p>@return [Boolean] whether the `until` node has a `do` …\n"],["do?","RuboCop::AST::WhileNode","RuboCop/AST/WhileNode.html#method-i-do-3F","()","<p>Checks whether the `until` node has a `do` keyword.\n<p>@return [Boolean] whether the `until` node has a `do` …\n"],["do?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-do-3F","(node)",""],["do_inspection_loop","RuboCop::Runner","RuboCop/Runner.html#method-i-do_inspection_loop","(file, processed_source)",""],["documentation_comment?","RuboCop::Cop::DocumentationComment","RuboCop/Cop/DocumentationComment.html#method-i-documentation_comment-3F","(node)",""],["dot?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-dot-3F","()","<p>Checks whether the dispatched method uses a dot to connect the receiver and\nthe method name.\n<p>This is useful …\n"],["dot_method_begin_pos","RuboCop::Cop::Rails::UniqBeforePluck","RuboCop/Cop/Rails/UniqBeforePluck.html#method-i-dot_method_begin_pos","(method, node)",""],["dot_method_with_whitespace","RuboCop::Cop::Rails::UniqBeforePluck","RuboCop/Cop/Rails/UniqBeforePluck.html#method-i-dot_method_with_whitespace","(method, node)",""],["double_colon?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-double_colon-3F","()","<p>Checks whether the dispatched method uses a double colon to connect the\nreceiver and the method name. …\n"],["double_quotes_required?","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-double_quotes_required-3F","(string)","<p>If converting a string to Ruby string literal source code, must double\nquotes be used?\n"],["double_splat?","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-double_splat-3F","(node)",""],["downcase_eq_range","RuboCop::Cop::Performance::Casecmp","RuboCop/Cop/Performance/Casecmp.html#method-i-downcase_eq_range","(method, loc, send_downcase)",""],["dsl_writer?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-dsl_writer-3F","(method_name)",""],["duplicate_location?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-duplicate_location-3F","(location)",""],["duplicated_gem_nodes","RuboCop::Cop::Bundler::DuplicatedGem","RuboCop/Cop/Bundler/DuplicatedGem.html#method-i-duplicated_gem_nodes","()",""],["duplicates","RuboCop::Cop::Duplication","RuboCop/Cop/Duplication.html#method-i-duplicates","(collection)","<p>Returns all duplicates, including the first instance of the duplicated\nelements.\n<p>@param [Array] collection …\n"],["duplicates?","RuboCop::Cop::Duplication","RuboCop/Cop/Duplication.html#method-i-duplicates-3F","(collection)","<p>Whether the `collection` contains any duplicates.\n<p>@param [Array] collection an array to check for duplicates …\n"],["duration_method?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-duration_method-3F","(method_name)",""],["each","RuboCop::Config","RuboCop/Config.html#method-i-each","(&block)",""],["each","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-each","(&block)",""],["each_already_disabled","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-each_already_disabled","(line_ranges, comments)",""],["each_argument_node","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-each_argument_node","(node, type)",""],["each_bad_alignment","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-each_bad_alignment","(items, base_column)",""],["each_bad_cons","RuboCop::Cop::Lint::ImplicitStringConcatenation","RuboCop/Cop/Lint/ImplicitStringConcatenation.html#method-i-each_bad_cons","(node)",""],["each_command_or_kernel_call","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-each_command_or_kernel_call","(method_name, node)",""],["each_condition","RuboCop::AST::WhenNode","RuboCop/AST/WhenNode.html#method-i-each_condition","()","<p>Calls the given block for each condition node in the `when` branch. If no\nblock is given, an `Enumerator` …\n"],["each_directive","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-each_directive","()",""],["each_extra_empty_line","RuboCop::Cop::Layout::EmptyLines","RuboCop/Cop/Layout/EmptyLines.html#method-i-each_extra_empty_line","(lines)",""],["each_extraneous_space","RuboCop::Cop::SpaceInside","RuboCop/Cop/SpaceInside.html#method-i-each_extraneous_space","(tokens)",""],["each_inspected_file","RuboCop::Runner","RuboCop/Runner.html#method-i-each_inspected_file","(files)",""],["each_key","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-each_key","()","<p>Calls the given block for each `key` node in the `hash` literal. If no\nblock is given, an `Enumerator` …\n"],["each_key","RuboCop::Config","RuboCop/Config.html#method-i-each_key","(&block)",""],["each_line","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-each_line","(expr)",""],["each_line_range","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-each_line_range","(line_ranges, disabled_ranges, offenses, comments, cop)",""],["each_match_range","RuboCop::Cop::MatchRange","RuboCop/Cop/MatchRange.html#method-i-each_match_range","(range, regex)","<p>Return a new `Range` covering the first matching group number for each\nmatch of `regex` inside `range` …\n"],["each_member","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-each_member","(members)",""],["each_mentioned_cop","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-each_mentioned_cop","()",""],["each_misplaced_optional_arg","RuboCop::Cop::Style::OptionalArguments","RuboCop/Cop/Style/OptionalArguments.html#method-i-each_misplaced_optional_arg","(arguments)",""],["each_missing_space","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-each_missing_space","(tokens)",""],["each_missing_space","RuboCop::Cop::SpaceBeforePunctuation","RuboCop/Cop/SpaceBeforePunctuation.html#method-i-each_missing_space","(tokens)",""],["each_node","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-each_node","(&block)",""],["each_pair","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-each_pair","()","<p>Calls the given block for each `pair` node in the `hash` literal. If no\nblock is given, an `Enumerator` …\n"],["each_part","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-each_part","(body)",""],["each_redundant_merge","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-each_redundant_merge","(node)",""],["each_semicolon","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-each_semicolon","()",""],["each_style_violation","RuboCop::Cop::Layout::SpaceInsideStringInterpolation","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html#method-i-each_style_violation","(node)",""],["each_unnecessary_space_match","RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral","RuboCop/Cop/Layout/SpaceInsideArrayPercentLiteral.html#method-i-each_unnecessary_space_match","(node, &blk)",""],["each_unneeded_disable","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-each_unneeded_disable","(cop_disabled_line_ranges, offenses, comments, &block)",""],["each_value","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-each_value","()","<p>Calls the given block for each `value` node in the `hash` literal. If no\nblock is given, an `Enumerator` …\n"],["each_when","RuboCop::AST::CaseNode","RuboCop/AST/CaseNode.html#method-i-each_when","()","<p>Calls the given block for each `when` node in the `case` statement. If no\nblock is given, an `Enumerator` …\n"],["each_wrong_style","RuboCop::Cop::Style::ModuleFunction","RuboCop/Cop/Style/ModuleFunction.html#method-i-each_wrong_style","(nodes)",""],["element_assignment?","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-element_assignment-3F","(node)",""],["elements","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-elements","(node)",""],["eligible_arguments?","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-eligible_arguments-3F","(node)",""],["eligible_method?","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-eligible_method-3F","(node)",""],["eligible_next_successor?","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-eligible_next_successor-3F","(next_successor)",""],["eligible_node?","RuboCop::Cop::Performance::Count","RuboCop/Cop/Performance/Count.html#method-i-eligible_node-3F","(node)",""],["eligible_node?","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-eligible_node-3F","(node)",""],["eligible_node?","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-eligible_node-3F","(node)",""],["eligible_operator?","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-eligible_operator-3F","(operator)",""],["eligible_predecessor?","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-eligible_predecessor-3F","(predecessor)",""],["eligible_receiver?","RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector","RuboCop/Cop/Performance/RedundantMerge/EachWithObjectInspector.html#method-i-eligible_receiver-3F","()",""],["eligible_receiver?","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-eligible_receiver-3F","(node)",""],["eligible_successor?","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-eligible_successor-3F","(successor)",""],["else?","RuboCop::AST::CaseNode","RuboCop/AST/CaseNode.html#method-i-else-3F","()","<p>Checks whether this case statement has an `else` branch.\n<p>@return [Boolean] whether the `case` statement …\n"],["else?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-else-3F","()","<p>Checks whether the `if` node has an `else` clause.\n<p>@note This returns `true` for nodes containing an `elsif` …\n"],["else_branch","RuboCop::AST::CaseNode","RuboCop/AST/CaseNode.html#method-i-else_branch","()","<p>Returns the else branch of the `case` statement, if any.\n<p>@return [Node] the else branch node of the `case` …\n"],["else_branch","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-else_branch","()","<p>Returns the branch of the `if` node that gets evaluated when its condition\nis falsey.\n<p>@note This is normalized …\n"],["elsif?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-elsif-3F","()","<p>Checks whether the `if` is an `elsif`. Parser handles these by nesting `if`\nnodes in the `else` branch. …\n"],["elsif_conditional?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-elsif_conditional-3F","()","<p>Checks whether the `if` node has at least one `elsif` branch. Returns true\nif this `if` node itself is …\n"],["embedded_in_percent_array?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-embedded_in_percent_array-3F","(node)",""],["emit_capture_list","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-emit_capture_list","()",""],["emit_guard_clause","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-emit_guard_clause","()",""],["emit_method_code","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-emit_method_code","()",""],["emit_param_list","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-emit_param_list","()",""],["emit_retval","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-emit_retval","()",""],["emit_trailing_params","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-emit_trailing_params","()",""],["empty?","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-empty-3F","()","<p>Checks whether the `hash` node contains any `pair`- or `kwsplat` nodes.\n<p>@return whether the `hash` is …\n"],["empty_block?","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-empty_block-3F","(variable)",""],["empty_body?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-empty_body-3F","(body)",""],["empty_braces?","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-empty_braces-3F","(loc)",""],["empty_check","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-empty_check","(node)",""],["empty_else_config","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-empty_else_config","()",""],["empty_else_cop_enabled?","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-empty_else_cop_enabled-3F","()",""],["empty_else_style","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-empty_else_style","()",""],["empty_expression?","RuboCop::Cop::Lint::EmptyExpression","RuboCop/Cop/Lint/EmptyExpression.html#method-i-empty_expression-3F","(begin_node)",""],["empty_lines_around?","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-empty_lines_around-3F","(node)",""],["empty_literal?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-empty_literal-3F","(node)",""],["empty_parentheses?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-empty_parentheses-3F","(node)",""],["empty_style?","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-empty_style-3F","()",""],["enable_cop?","RuboCop::Config","RuboCop/Config.html#method-i-enable_cop-3F","(qualified_cop_name, cop_options)",""],["enable_rails_cops","RuboCop::Runner","RuboCop/Runner.html#method-i-enable_rails_cops","(config)",""],["enabled","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-enabled","(config, only)",""],["enabled_line?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-enabled_line-3F","(line_number)",""],["encoding","RuboCop::MagicComment::EmacsComment","RuboCop/MagicComment/EmacsComment.html#method-i-encoding","()",""],["encoding","RuboCop::MagicComment::SimpleComment","RuboCop/MagicComment/SimpleComment.html#method-i-encoding","()","<p>Match `encoding` or `coding`\n"],["encoding","RuboCop::MagicComment::VimComment","RuboCop/MagicComment/VimComment.html#method-i-encoding","()","<p>For some reason the fileencoding keyword only works if there is at least\none other token included in …\n"],["encoding_line_number","RuboCop::Cop::Style::Encoding","RuboCop/Cop/Style/Encoding.html#method-i-encoding_line_number","(processed_source)",""],["encoding_omitable?","RuboCop::Cop::Style::Encoding","RuboCop/Cop/Style/Encoding.html#method-i-encoding_omitable-3F","(line)",""],["encoding_specified?","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-encoding_specified-3F","()",""],["encoding_token?","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-encoding_token-3F","(processed_source, token_index)",""],["end_align_target?","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-end_align_target-3F","(node, parent)",""],["end_followed_by_whitespace_only?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-end_followed_by_whitespace_only-3F","(source_buffer, end_pos)",""],["end_of_line_comment","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-end_of_line_comment","(line)",""],["end_parentheses","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-end_parentheses","(node, method_call)",""],["end_pos","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-end_pos","(node)",""],["end_range","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-end_range","(node)",""],["end_range","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-end_range","(node, method_call)",""],["end_with_eq?","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-end_with_eq-3F","(sym)",""],["ending_delimiter","RuboCop::Cop::Lint::ImplicitStringConcatenation","RuboCop/Cop/Lint/ImplicitStringConcatenation.html#method-i-ending_delimiter","(str)",""],["ends_in_end?","RuboCop::Cop::Layout::TrailingBlankLines","RuboCop/Cop/Layout/TrailingBlankLines.html#method-i-ends_in_end-3F","(processed_source)",""],["ends_with_condition?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-ends_with_condition-3F","(body)",""],["enforce_double_quotes?","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-enforce_double_quotes-3F","()",""],["english_name_replacement","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-english_name_replacement","(preferred_name, node)",""],["enlist","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-enlist","(cop)",""],["ensure_valid_preferred_delimiters","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-ensure_valid_preferred_delimiters","()",""],["enumerator_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-enumerator_method-3F","()","<p>Checks whether the method is an enumerator method.\n<p>@return [Boolean] whether the method is an enumerator …\n"],["environments","RuboCop::Cop::Rails::UnknownEnv","RuboCop/Cop/Rails/UnknownEnv.html#method-i-environments","()",""],["eql?","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-eql-3F","(other)",""],["eql?","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-eql-3F","(other)",""],["equal_sign?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-equal_sign-3F","(token)",""],["escape","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-escape","(s)",""],["escape_string","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-escape_string","(string)",""],["eval_call?","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-eval_call-3F","(child)",""],["evaluate_exceptions","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-evaluate_exceptions","(rescue_group)",""],["exact_name_match?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-exact_name_match-3F","()",""],["exceeds_line_offset?","RuboCop::Cop::Layout::EmptyLines","RuboCop/Cop/Layout/EmptyLines.html#method-i-exceeds_line_offset-3F","(line_diff)",""],["except_syntax?","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-except_syntax-3F","()",""],["excess_leading_space?","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-excess_leading_space-3F","(op, with_space)",""],["excess_range","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-excess_range","(uri_range, line, index)",""],["excess_trailing_space?","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-excess_trailing_space-3F","(right_operand, with_space)",""],["excluded_dirs","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-excluded_dirs","(base_dir)",""],["excluded_file?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-excluded_file-3F","(file)",""],["excluded_methods","RuboCop::Cop::Metrics::BlockLength","RuboCop/Cop/Metrics/BlockLength.html#method-i-excluded_methods","()",""],["excludes","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-excludes","(offending_files, cop_name, parent)",""],["executable?","RuboCop::Cop::Lint::ScriptPermission","RuboCop/Cop/Lint/ScriptPermission.html#method-i-executable-3F","(processed_source)",""],["execute_runner","RuboCop::CLI","RuboCop/CLI.html#method-i-execute_runner","(paths)",""],["exit_body_type?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-exit_body_type-3F","(node)",""],["expand_elses","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-expand_elses","(branch)","<p>`elsif` branches show up in the `node` as an `else`. We need to recursively\niterate over all `else` branches …\n"],["expand_elses","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-expand_elses","(branch)","<p>`elsif` branches show up in the if node as nested `else` branches. We need\nto recursively iterate over …\n"],["expand_elsif","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-expand_elsif","(node, elsif_branches = [])",""],["expand_when_branches","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-expand_when_branches","(when_branches)","<p>`when` nodes contain the entire branch including the condition. We only\nneed the contents of the branch, …\n"],["expanded?","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-expanded-3F","(node)",""],["expanded_style?","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-expanded_style-3F","()",""],["expect_matching_definition?","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-expect_matching_definition-3F","()",""],["expect_no_offenses","RuboCop::RSpec::ExpectOffense","RuboCop/RSpec/ExpectOffense.html#method-i-expect_no_offenses","(source, file = nil)",""],["expect_offense","RuboCop::RSpec::ExpectOffense","RuboCop/RSpec/ExpectOffense.html#method-i-expect_offense","(source, file = nil)",""],["expect_params_after_method_name?","RuboCop::Cop::Layout::SpaceBeforeFirstArg","RuboCop/Cop/Layout/SpaceBeforeFirstArg.html#method-i-expect_params_after_method_name-3F","(node)",""],["expect_space?","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-expect_space-3F","(t1, t2)",""],["expected_column","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-expected_column","(node, elements)",""],["expected_fields_count","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-expected_fields_count","(node)",""],["expected_indent_offset","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-expected_indent_offset","()",""],["expected_name","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-expected_name","(method_name, prefix)",""],["expected_signature?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-expected_signature-3F","(node)","<p>Check argument signature as no arguments or one hash\n"],["explicit?","RuboCop::Cop::VariableForce::Reference","RuboCop/Cop/VariableForce/Reference.html#method-i-explicit-3F","()","<p>There&#39;s an implicit variable reference by the zero-arity `super`:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">some_method</span>(<span class=\"ruby-identifier\">foo</span>)\n  <span class=\"ruby-keyword\">super</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["explicit_block_local_variable?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-explicit_block_local_variable-3F","()",""],["explicit_style?","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-explicit_style-3F","()",""],["expr_replacement","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-expr_replacement","(node)",""],["extra_avoid_comma_info","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-extra_avoid_comma_info","()",""],["extra_details?","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-extra_details-3F","()",""],["extra_indentation","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-extra_indentation","(given_style)",""],["extra_space_range","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-extra_space_range","(t1, t2)",""],["extract","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-extract","(pattern)","<p>Match the entire comment string with a pattern and take the first capture.\n<p>@param pattern [Regexp]\n<p>@return …\n"],["extract_arguments","RuboCop::Cop::InternalAffairs::DeprecatedPositionalArguments","RuboCop/Cop/InternalAffairs/DeprecatedPositionalArguments.html#method-i-extract_arguments","(node)",""],["extract_body","RuboCop::Cop::TooManyLines","RuboCop/Cop/TooManyLines.html#method-i-extract_body","(node)",""],["extract_branches","RuboCop::Cop::Style::CaseCorrector","RuboCop/Cop/Style/CaseCorrector.html#method-c-extract_branches","(node)",""],["extract_branches","RuboCop::Cop::Style::IfCorrector","RuboCop/Cop/Style/IfCorrector.html#method-c-extract_branches","(node)",""],["extract_branches","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-extract_branches","(node)",""],["extract_common_parts","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-extract_common_parts","(continuation, checked_variable)",""],["extract_frozen_string_literal","RuboCop::MagicComment::EmacsComment","RuboCop/MagicComment/EmacsComment.html#method-i-extract_frozen_string_literal","()",""],["extract_frozen_string_literal","RuboCop::MagicComment::SimpleComment","RuboCop/MagicComment/SimpleComment.html#method-i-extract_frozen_string_literal","()","<p>Extract `frozen_string_literal`.\n<p>The `frozen_string_literal` magic comment only works if it is the only …\n"],["extract_heredoc_lines","RuboCop::Cop::Style::CommentedKeyword","RuboCop/Cop/Style/CommentedKeyword.html#method-i-extract_heredoc_lines","(ast)",""],["extract_heredocs","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-extract_heredocs","(ast)",""],["extract_method","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-extract_method","(node)",""],["extract_method_chain","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-extract_method_chain","(node)",""],["extract_method_chain","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-extract_method_chain","(node)",""],["extract_parts","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-extract_parts","(node)",""],["extract_parts_from_and","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-extract_parts_from_and","(node)",""],["extract_parts_from_if","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-extract_parts_from_if","(node)",""],["extract_rhs","RuboCop::Cop::CheckAssignment","RuboCop/Cop/CheckAssignment.html#method-i-extract_rhs","(node)",""],["extract_source","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-extract_source","(args)",""],["extract_sources","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-i-extract_sources","(node)",""],["extract_tail_branches","RuboCop::Cop::Style::CaseCorrector","RuboCop/Cop/Style/CaseCorrector.html#method-c-extract_tail_branches","(node)",""],["extract_tail_branches","RuboCop::Cop::Style::IfCorrector","RuboCop/Cop/Style/IfCorrector.html#method-c-extract_tail_branches","(node)",""],["extract_tail_branches","RuboCop::Cop::Style::UnlessCorrector","RuboCop/Cop/Style/UnlessCorrector.html#method-c-extract_tail_branches","(node)",""],["fail_due_to","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-fail_due_to","(message)",""],["fail_fast?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-fail_fast-3F","()",""],["file","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-file","()",""],["file_checksum","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-file_checksum","(file, config_store)",""],["file_finished","RuboCop::Formatter::BaseFormatter","RuboCop/Formatter/BaseFormatter.html#method-i-file_finished","(file, offenses)","<p>@api public\n<p>Invoked at the end of inspecting each files.\n<p>@param file [String]\n"],["file_finished","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::EmacsStyleFormatter","RuboCop/Formatter/EmacsStyleFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::FileListFormatter","RuboCop/Formatter/FileListFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::FuubarStyleFormatter","RuboCop/Formatter/FuubarStyleFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::HTMLFormatter","RuboCop/Formatter/HTMLFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::OffenseCountFormatter","RuboCop/Formatter/OffenseCountFormatter.html#method-i-file_finished","(_file, offenses)",""],["file_finished","RuboCop::Formatter::ProgressFormatter","RuboCop/Formatter/ProgressFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-file_finished","(file, offenses)",""],["file_finished","RuboCop::Formatter::WorstOffendersFormatter","RuboCop/Formatter/WorstOffendersFormatter.html#method-i-file_finished","(file, offenses)",""],["file_keyword?","RuboCop::Cop::Style::Dir","RuboCop/Cop/Style/Dir.html#method-i-file_keyword-3F","(node)",""],["file_name_matches_any?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-file_name_matches_any-3F","(file, parameter, default_result)",""],["file_offense_cache","RuboCop::Runner","RuboCop/Runner.html#method-i-file_offense_cache","(file)",""],["file_offenses","RuboCop::Runner","RuboCop/Runner.html#method-i-file_offenses","(file)",""],["file_started","RuboCop::Formatter::BaseFormatter","RuboCop/Formatter/BaseFormatter.html#method-i-file_started","(file, options)","<p>@api public\n<p>Invoked at the beginning of inspecting each files.\n<p>@param file [String]\n"],["file_started","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-file_started","(_file, _file_info)",""],["file_started","RuboCop::Formatter::DisabledLinesFormatter","RuboCop/Formatter/DisabledLinesFormatter.html#method-i-file_started","(file, options)",""],["file_started","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-file_started","(file, options)",""],["file_started","RuboCop::Runner","RuboCop/Runner.html#method-i-file_started","(file)",""],["file_to_exclude?","RuboCop::Config","RuboCop/Config.html#method-i-file_to_exclude-3F","(file)",""],["file_to_include?","RuboCop::Config","RuboCop/Config.html#method-i-file_to_include-3F","(file)",""],["filename_good?","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-filename_good-3F","(basename)",""],["files","RuboCop::Formatter::SimpleTextFormatter::Report","RuboCop/Formatter/SimpleTextFormatter/Report.html#method-i-files","()",""],["filter_cop_classes","RuboCop::Runner","RuboCop/Runner.html#method-i-filter_cop_classes","(cop_classes, config)",""],["filtered_run?","RuboCop::Runner","RuboCop/Runner.html#method-i-filtered_run-3F","()",""],["find","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-find","(args)","<p>Generate a list of target files by expanding globbing patterns (if any). If\nargs is empty, recursively …\n"],["find_assignment_without_variable_usage","RuboCop::Cop::Lint::UnusedArgument","RuboCop/Cop/Lint/UnusedArgument.html#method-i-find_assignment_without_variable_usage","(variable)","<p>Find the first variable assignment, which doesn&#39;t reference the\nvariable at the rhs.\n"],["find_class_or_module","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-find_class_or_module","(node, namespace)","<p>rubocop:disable Metrics/CyclomaticComplexity\n"],["find_common_characters","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-find_common_characters","()","<p>rubocop:disable Metrics/AbcSize\n"],["find_excessive_uri_range","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-find_excessive_uri_range","(line)",""],["find_files","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-find_files","(base_dir, flags)","<p>Search for files recursively starting at the given base directory using the\ngiven flags that determine …\n"],["find_first_offense","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-find_first_offense","(variables)",""],["find_first_possible_offense","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-find_first_possible_offense","(variables)",""],["find_last_match","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-find_last_match","(body, range, scope_root)",""],["find_location","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-find_location","(node, loc)",""],["find_matching_receiver_invocation","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-find_matching_receiver_invocation","(node, checked_variable)",""],["find_nested_defs","RuboCop::Cop::Lint::NestedMethodDefinition","RuboCop/Cop/Lint/NestedMethodDefinition.html#method-i-find_nested_defs","(node, &block)",""],["find_offending_argument","RuboCop::Cop::InternalAffairs::OffenseLocationKeyword","RuboCop/Cop/InternalAffairs/OffenseLocationKeyword.html#method-i-find_offending_argument","(searched_node, kwargs)",""],["find_offending_argument","RuboCop::Cop::InternalAffairs::RedundantMessageArgument","RuboCop/Cop/InternalAffairs/RedundantMessageArgument.html#method-i-find_offending_argument","(searched_node, kwargs)",""],["find_similar_name","RuboCop::NameSimilarity","RuboCop/NameSimilarity.html#method-i-find_similar_name","(target_name, scope)",""],["find_target_files","RuboCop::Runner","RuboCop/Runner.html#method-i-find_target_files","(paths)",""],["find_unneeded","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-find_unneeded","(comment, offenses, cop, line_range, next_line_range)",""],["find_valid_order","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-find_valid_order","(left_elements, right_elements)",""],["find_variable","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-find_variable","(name)",""],["finished","RuboCop::Formatter::BaseFormatter","RuboCop/Formatter/BaseFormatter.html#method-i-finished","(inspected_files)","<p>@api public\n<p>Invoked after all files are inspected, or interrupted by user.\n<p>@param inspected_files [Array(String)] …\n"],["finished","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-finished","(_inspected_files)",""],["finished","RuboCop::Formatter::DisabledLinesFormatter","RuboCop/Formatter/DisabledLinesFormatter.html#method-i-finished","(_inspected_files)",""],["finished","RuboCop::Formatter::HTMLFormatter","RuboCop/Formatter/HTMLFormatter.html#method-i-finished","(inspected_files)",""],["finished","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-finished","(inspected_files)",""],["finished","RuboCop::Formatter::OffenseCountFormatter","RuboCop/Formatter/OffenseCountFormatter.html#method-i-finished","(_inspected_files)",""],["finished","RuboCop::Formatter::ProgressFormatter","RuboCop/Formatter/ProgressFormatter.html#method-i-finished","(inspected_files)",""],["finished","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-finished","(inspected_files)",""],["finished","RuboCop::Formatter::WorstOffendersFormatter","RuboCop/Formatter/WorstOffendersFormatter.html#method-i-finished","(_inspected_files)",""],["first_argument","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-first_argument","()","<p>A shorthand for getting the first argument of the node. Equivalent to\n`arguments.first`.\n<p>@return [Node, …\n"],["first_argument_returned?","RuboCop::Cop::Style::EachWithObject","RuboCop/Cop/Style/EachWithObject.html#method-i-first_argument_returned-3F","(args, return_value)",""],["first_argument_unparenthesized?","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-first_argument_unparenthesized-3F","(node)",""],["first_by_line","RuboCop::Cop::FirstElementLineBreak","RuboCop/Cop/FirstElementLineBreak.html#method-i-first_by_line","(nodes)",""],["first_child_requires_empty_line?","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-first_child_requires_empty_line-3F","(body)",""],["first_comment_line?","RuboCop::Cop::Style::CommentAnnotation","RuboCop/Cop/Style/CommentAnnotation.html#method-i-first_comment_line-3F","(comments, ix)",""],["first_empty_line_required_child","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-first_empty_line_required_child","(body)",""],["first_line","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-first_line","()",""],["first_line","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-first_line","()","<p>@api private\n"],["first_line_comment","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-first_line_comment","(node)",""],["first_non_ascii_chars","RuboCop::Cop::Naming::AsciiIdentifiers","RuboCop/Cop/Naming/AsciiIdentifiers.html#method-i-first_non_ascii_chars","(string)",""],["first_non_ascii_chars","RuboCop::Cop::Style::AsciiComments","RuboCop/Cop/Style/AsciiComments.html#method-i-first_non_ascii_chars","(string)",""],["first_offense_range","RuboCop::Cop::Naming::AsciiIdentifiers","RuboCop/Cop/Naming/AsciiIdentifiers.html#method-i-first_offense_range","(identifier)",""],["first_offense_range","RuboCop::Cop::Style::AsciiComments","RuboCop/Cop/Style/AsciiComments.html#method-i-first_offense_range","(comment)",""],["first_source","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-first_source","(first_param)",""],["first_token","RuboCop::Cop::Layout::InitialIndentation","RuboCop/Cop/Layout/InitialIndentation.html#method-i-first_token","()",""],["fixed_indentation?","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-fixed_indentation-3F","()",""],["fixed_parameter_indentation?","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-fixed_parameter_indentation-3F","()",""],["flow_expression?","RuboCop::Cop::Lint::UnreachableCode","RuboCop/Cop/Lint/UnreachableCode.html#method-i-flow_expression-3F","(node)",""],["followed_by_space?","RuboCop::Cop::Layout::SpaceAfterColon","RuboCop/Cop/Layout/SpaceAfterColon.html#method-i-followed_by_space-3F","(colon)",""],["following_line","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-following_line","(token)",""],["for","RuboCop::ConfigStore","RuboCop/ConfigStore.html#method-i-for","(file_or_dir)",""],["for","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-c-for","(class_name)",""],["for_all_cops","RuboCop::Config","RuboCop/Config.html#method-i-for_all_cops","()",""],["for_bad_filename","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-for_bad_filename","(file_path)",""],["for_cop","RuboCop::Config","RuboCop/Config.html#method-i-for_cop","(cop)",""],["force_default_config!","RuboCop::ConfigStore","RuboCop/ConfigStore.html#method-i-force_default_config-21","()",""],["force_equal_sign_alignment?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-force_equal_sign_alignment-3F","()",""],["force_exclusion?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-force_exclusion-3F","()",""],["force_hash_rockets?","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-force_hash_rockets-3F","(pairs = [])",""],["force_name","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-c-force_name","()",""],["forces","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-forces","()",""],["forces_for","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-forces_for","(cops)",""],["format?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-format-3F","(node)",""],["format_arg?","RuboCop::Cop::Rails::HttpPositionalArguments","RuboCop/Cop/Rails/HttpPositionalArguments.html#method-i-format_arg-3F","(node)",""],["format_binary","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-format_binary","(source)",""],["format_decimal","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-format_decimal","(source)",""],["format_english_message","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-format_english_message","(global_var)",""],["format_hex","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-format_hex","(source)",""],["format_list","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-format_list","(items)","<p>For now, we assume that lists are 2 items or less. Easy grammar!\n"],["format_message","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-format_message","(kw_loc, end_loc)",""],["format_message","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-format_message","(start_loc, end_loc, do_source_line_column, error_source_line_column)",""],["format_message","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-format_message","(visibility, modifier)",""],["format_message","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-format_message","(english, regular, global_var)",""],["format_message_from","RuboCop::Cop::Lint::ScriptPermission","RuboCop/Cop/Lint/ScriptPermission.html#method-i-format_message_from","(processed_source)",""],["format_method?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-format_method-3F","(name, node)",""],["format_number","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-format_number","(node)",""],["format_octal","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-format_octal","(source)",""],["format_octal_zero_only","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-format_octal_zero_only","(source)",""],["format_source_line_column","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-format_source_line_column","(source_line_column)",""],["formatter_class","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-i-formatter_class","(formatter_type)",""],["formatter_set","RuboCop::Runner","RuboCop/Runner.html#method-i-formatter_set","()",""],["found_attr","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-found_attr","(node, args, readable: false, writable: false)",""],["found_instance_method","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-found_instance_method","(node, name)",""],["found_method","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-found_method","(node, method_name)",""],["from_file","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-c-from_file","(path, ruby_version)",""],["from_json","RuboCop::CachedData","RuboCop/CachedData.html#method-i-from_json","(text)",""],["from_parser_token","RuboCop::Token","RuboCop/Token.html#method-c-from_parser_token","(parser_token)",""],["frozen_string_literal","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-frozen_string_literal","()","<p>Expose the `frozen_string_literal` value coerced to a boolean if possible.\n<p>@return [Boolean] if value …\n"],["frozen_string_literal","RuboCop::MagicComment::VimComment","RuboCop/MagicComment/VimComment.html#method-i-frozen_string_literal","()","<p>Vim comments cannot specify frozen string literal behavior.\n"],["frozen_string_literal?","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-frozen_string_literal-3F","()","<p>Does the magic comment enable the frozen string literal feature.\n<p>Test whether the frozen string literal …\n"],["frozen_string_literal_comment","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-frozen_string_literal_comment","(processed_source)",""],["frozen_string_literal_comment_exists?","RuboCop::Cop::FrozenStringLiteral","RuboCop/Cop/FrozenStringLiteral.html#method-i-frozen_string_literal_comment_exists-3F","()",""],["frozen_string_literal_specified?","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-frozen_string_literal_specified-3F","()","<p>Was a magic comment for the frozen string literal found?\n<p>@return [Boolean]\n"],["frozen_string_literals_enabled?","RuboCop::Cop::FrozenStringLiteral","RuboCop/Cop/FrozenStringLiteral.html#method-i-frozen_string_literals_enabled-3F","()",""],["full_options","RuboCop::RakeTask","RuboCop/RakeTask.html#method-i-full_options","()",""],["functional_block?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-functional_block-3F","(node)",""],["functional_method?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-functional_method-3F","(method_name)",""],["gem_config_path","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-gem_config_path","(gem_name, relative_config_path)",""],["gem_name","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-gem_name","(declaration_node)",""],["generate","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-generate","(template)",""],["generated_source","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-generated_source","()",""],["generated_spec","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-generated_spec","()",""],["get_blocks","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-get_blocks","(node, &block)","<p>rubocop:disable Metrics/CyclomaticComplexity\n"],["get_dependency_name","RuboCop::Cop::Gemspec::OrderedDependencies","RuboCop/Cop/Gemspec/OrderedDependencies.html#method-i-get_dependency_name","(node)",""],["get_param","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-get_param","(number)",""],["get_processed_source","RuboCop::Runner","RuboCop/Runner.html#method-i-get_processed_source","(file)",""],["get_source_range","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-get_source_range","(node)",""],["good_alignment?","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-good_alignment-3F","()",""],["good_days","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-good_days","()",""],["good_methods","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-good_methods","()",""],["good_methods","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-good_methods","()",""],["good_methods","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-good_methods","()",""],["group_mixins","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-group_mixins","(node, mixins)",""],["grouped_duplicates","RuboCop::Cop::Duplication","RuboCop/Cop/Duplication.html#method-i-grouped_duplicates","(collection)","<p>Returns a hash of grouped duplicates. The key will be the first instance of\nthe element, and  the value …\n"],["grouped_style?","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-grouped_style-3F","()",""],["handle","RuboCop::Cop::Style::WhileUntilDo","RuboCop/Cop/Style/WhileUntilDo.html#method-i-handle","(node)",""],["handle_disabled_by_default","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-handle_disabled_by_default","(config, new_default_configuration)",""],["handle_error","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-handle_error","(e, location, cop)",""],["handle_exiting_options","RuboCop::CLI","RuboCop/CLI.html#method-i-handle_exiting_options","()",""],["handle_node","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-handle_node","(node)",""],["handle_response","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-handle_response","(response, limit, &block)",""],["handle_warning","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-handle_warning","(e, location)",""],["hash","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-hash","()",""],["hash","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-hash","()",""],["hash","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-i-hash","()","<p>@api private\n"],["hash?","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-hash-3F","(node)",""],["hash_element?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-hash_element-3F","(node)",""],["hash_for_file","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-hash_for_file","(file, offenses)",""],["hash_for_location","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-hash_for_location","(offense)","<p>TODO: Consider better solution for Offense#real_column.\n"],["hash_for_offense","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-hash_for_offense","(offense)",""],["hash_literal_as_first_arg?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-hash_literal_as_first_arg-3F","(node)",""],["hash_literal_with_braces","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-hash_literal_with_braces","(node)",""],["hash_rocket?","RuboCop::AST::KeywordSplatNode","RuboCop/AST/KeywordSplatNode.html#method-i-hash_rocket-3F","()","<p>This is used for duck typing with `pair` nodes which also appear as `hash`\nelements.\n<p>@return [false]\n"],["hash_rocket?","RuboCop::AST::PairNode","RuboCop/AST/PairNode.html#method-i-hash_rocket-3F","()","<p>Checks whether the `pair` uses a hash rocket delimiter.\n<p>@return [Boolean] whether this `pair` uses a hash …\n"],["hash_rocket_delta","RuboCop::Cop::HashAlignment::SeparatorAlignment","RuboCop/Cop/HashAlignment/SeparatorAlignment.html#method-i-hash_rocket_delta","(first_pair, current_pair)",""],["hash_rocket_delta","RuboCop::Cop::HashAlignment::TableAlignment","RuboCop/Cop/HashAlignment/TableAlignment.html#method-i-hash_rocket_delta","(first_pair, current_pair)",""],["hash_rockets_check","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-hash_rockets_check","(pairs)",""],["hash_table_style?","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-hash_table_style-3F","()",""],["head","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-head","(node)",""],["heredoc?","Heredoc","Heredoc.html#method-i-heredoc-3F","(node)",""],["heredoc?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-heredoc-3F","(node)",""],["heredoc?","RuboCop::Cop::Lint::InterpolationCheck","RuboCop/Cop/Lint/InterpolationCheck.html#method-i-heredoc-3F","(node)",""],["heredoc?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-heredoc-3F","(source_after_last_item)",""],["heredoc_body","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-heredoc_body","(node)",""],["heredoc_indent_type","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-heredoc_indent_type","(node)","<p>Returns &#39;~&#39;, &#39;-&#39; or nil\n"],["heredoc_lines","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-heredoc_lines","(node)",""],["heredoc_literal?","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-heredoc_literal-3F","(node)",""],["heredoc_ranges","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-heredoc_ranges","(arg)",""],["hex_bin_dec_literal_type","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-hex_bin_dec_literal_type","(literal)",""],["highlighted_area","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-highlighted_area","()","<p>@api public\n<p>@return [Parser::Source::Range]\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">range</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">code</span> <span class=\"ruby-identifier\">that</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">highlighted</span>\n</pre>\n"],["highlighted_source_line","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-highlighted_source_line","(offense)",""],["highlights","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-highlights","()",""],["hightlight_source_tag","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-hightlight_source_tag","(offense)",""],["if?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-if-3F","()","<p>Checks whether this node is an `if` statement. (This is not true of ternary\noperators and `unless` statements.) …\n"],["if_branch","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-if_branch","()","<p>Returns the branch of the `if` node that gets evaluated when its condition\nis truthy.\n<p>@note This is normalized …\n"],["if_else_children?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-if_else_children-3F","(node)",""],["if_style?","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-if_style-3F","()",""],["if_without_else?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-if_without_else-3F","(node)",""],["ignore_class_methods?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-ignore_class_methods-3F","()",""],["ignore_cop_directives?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-ignore_cop_directives-3F","()",""],["ignore_empty_blocks?","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-ignore_empty_blocks-3F","()",""],["ignore_executable_scripts?","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-ignore_executable_scripts-3F","()",""],["ignore_hash_argument?","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-ignore_hash_argument-3F","(node)",""],["ignore_macros?","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-ignore_macros-3F","()",""],["ignore_node","RuboCop::Cop::IgnoredNode","RuboCop/Cop/IgnoredNode.html#method-i-ignore_node","(node)",""],["ignore_offense?","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-ignore_offense-3F","(disabled_ranges, line_range)",""],["ignored_by_find_each?","RuboCop::Cop::Rails::FindEach","RuboCop/Cop/Rails/FindEach.html#method-i-ignored_by_find_each-3F","(relation_method)",""],["ignored_line?","RuboCop::Cop::IgnoredPattern","RuboCop/Cop/IgnoredPattern.html#method-i-ignored_line-3F","(line)",""],["ignored_line?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-ignored_line-3F","(line, index, heredocs)",""],["ignored_list","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-ignored_list","()",""],["ignored_literal?","RuboCop::Cop::Layout::MultilineMethodCallBraceLayout","RuboCop/Cop/Layout/MultilineMethodCallBraceLayout.html#method-i-ignored_literal-3F","(node)",""],["ignored_literal?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-ignored_literal-3F","(node)",""],["ignored_method?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-ignored_method-3F","(method_name)",""],["ignored_method?","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-ignored_method-3F","(node)",""],["ignored_method?","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-ignored_method-3F","(name)",""],["ignored_methods","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-ignored_methods","()",""],["ignored_node?","RuboCop::Cop::IgnoredNode","RuboCop/Cop/IgnoredNode.html#method-i-ignored_node-3F","(node)",""],["ignored_nodes","RuboCop::Cop::IgnoredNode","RuboCop/Cop/IgnoredNode.html#method-i-ignored_nodes","()",""],["ignored_patterns","RuboCop::Cop::IgnoredPattern","RuboCop/Cop/IgnoredPattern.html#method-i-ignored_patterns","()",""],["ignored_range?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-ignored_range-3F","(ast, start_pos)",""],["ignored_ranges","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-ignored_ranges","(ast)","<p>Returns an array of ranges that should not be reported. It&#39;s the extra\nspaces between the keys and …\n"],["illegal_class_name?","RuboCop::Cop::Lint::InheritException","RuboCop/Cop/Lint/InheritException.html#method-i-illegal_class_name-3F","(class_node)",""],["immutable_literal?","RuboCop::Cop::Style::RedundantFreeze","RuboCop/Cop/Style/RedundantFreeze.html#method-i-immutable_literal-3F","(node)",""],["implements_respond_to_missing?","RuboCop::Cop::Style::MethodMissing","RuboCop/Cop/Style/MethodMissing.html#method-i-implements_respond_to_missing-3F","(node)",""],["implicit_call?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-implicit_call-3F","()","<p>Checks whether the method dispatch is the implicit form of `#call`, e.g.\n`foo.(bar)`.\n<p>@return [Boolean] …\n"],["implicit_concatenation?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-implicit_concatenation-3F","(node)",""],["implicit_literal?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-implicit_literal-3F","(node)",""],["implicit_style?","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-implicit_style-3F","()",""],["in_its_own_process_with","HostEnvironmentSimulatorHelper","HostEnvironmentSimulatorHelper.html#method-i-in_its_own_process_with","(*files)",""],["in_module_or_instance_eval?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-in_module_or_instance_eval-3F","(node)",""],["include?","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-include-3F","(target_node)",""],["include_prefix_case?","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-include_prefix_case-3F","()",""],["include_semantic_changes?","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-include_semantic_changes-3F","()",""],["include_ternary?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-include_ternary-3F","()",""],["included","RuboCop::Cop::EnforceSuperclass","RuboCop/Cop/EnforceSuperclass.html#method-c-included","(base)",""],["incompatible_options","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-incompatible_options","()",""],["incorrect_style","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-incorrect_style","(when_node)",""],["incorrect_style_detected","RuboCop::Cop::ArrayHashIndentation","RuboCop/Cop/ArrayHashIndentation.html#method-i-incorrect_style_detected","(styles, first, left_parenthesis)",""],["incorrect_style_detected","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-incorrect_style_detected","(arg, value, space_on_both_sides, no_surrounding_space)",""],["incorrect_style_detected","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-incorrect_style_detected","(t1, t2, expect_space, is_empty_braces)",""],["incorrect_style_detected","RuboCop::Cop::Style::For","RuboCop/Cop/Style/For.html#method-i-incorrect_style_detected","(method)",""],["indent","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-indent","(cop, source)","<p>rubocop:enable Metrics/AbcSize\n"],["indent","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-indent","(node)",""],["indent_for","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-indent_for","(node)",""],["indent_level","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-indent_level","(str)",""],["indent_one_step?","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-indent_one_step-3F","()",""],["indent_width","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-indent_width","()",""],["indentation","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-indentation","(node)",""],["indentation_consistency_style","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-indentation_consistency_style","()",""],["indentation_of_block_start_line","RuboCop::Cop::Layout::BlockEndNewline","RuboCop/Cop/Layout/BlockEndNewline.html#method-i-indentation_of_block_start_line","(node)",""],["indentation_to_check?","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-indentation_to_check-3F","(base_loc, body_node)",""],["indentation_width","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-indentation_width","()",""],["indentation_width","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-indentation_width","()",""],["indentation_width","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-indentation_width","()",""],["indented_body","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-indented_body","(node)",""],["indented_body","RuboCop::Cop::Style::MultilineIfModifier","RuboCop/Cop/Style/MultilineIfModifier.html#method-i-indented_body","(body, node)",""],["indented_else_node","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-indented_else_node","(expression, node)",""],["index_of_first_token","RuboCop::Cop::SurroundingSpace","RuboCop/Cop/SurroundingSpace.html#method-i-index_of_first_token","(node)",""],["index_of_last_token","RuboCop::Cop::SurroundingSpace","RuboCop/Cop/SurroundingSpace.html#method-i-index_of_last_token","(node)",""],["inefficient_comparison","RuboCop::Cop::Performance::Casecmp","RuboCop/Cop/Performance/Casecmp.html#method-i-inefficient_comparison","(node)",""],["ineligible_node?","RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html#method-i-ineligible_node-3F","(node)",""],["infinite_loop?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-infinite_loop-3F","()","<p>When this cop is configured to enforce parentheses and the\n`RedundantParentheses` cop is enabled, it …\n"],["inherit_from_remote","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-inherit_from_remote","(file, path)",""],["inherited","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-inherited","(subclass)",""],["inherited","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-c-inherited","(subclass)",""],["inherited_file","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-inherited_file","(path, inherit_from, file)",""],["inject","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-inject","()",""],["inject_require","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-inject_require","()",""],["injectable_require_directive","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-injectable_require_directive","()",""],["inline_fix_branch","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-inline_fix_branch","(corrector, when_node)",""],["insert_after","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-insert_after","(range, content)","<p>Inserts new code after the given source range.\n<p>@param [Parser::Source::Range] range @param [String] content …\n"],["insert_before","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-insert_before","(range, content)","<p>Inserts new code before the given source range.\n<p>@param [Parser::Source::Range] range @param [String] content …\n"],["insert_notice_before","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-insert_notice_before","(processed_source)",""],["inside_comment?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-inside_comment-3F","(range, comma_offset)",""],["inside_interpolation?","RuboCop::Cop::StringHelp","RuboCop/Cop/StringHelp.html#method-i-inside_interpolation-3F","(node)",""],["inspect_file","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-inspect_file","(processed_source)",""],["inspect_file","RuboCop::Runner","RuboCop/Runner.html#method-i-inspect_file","(processed_source)",""],["inspect_files","RuboCop::Runner","RuboCop/Runner.html#method-i-inspect_files","(files)",""],["inspect_gemfile","CopHelper","CopHelper.html#method-i-inspect_gemfile","(source)",""],["inspect_source","CopHelper","CopHelper.html#method-i-inspect_source","(source, file = nil)",""],["inspect_source_file","CopHelper","CopHelper.html#method-i-inspect_source_file","(source)",""],["int_value","RuboCop::Cop::Performance::Caller","RuboCop/Cop/Performance/Caller.html#method-i-int_value","(node)",""],["integer_part","RuboCop::Cop::IntegerNode","RuboCop/Cop/IntegerNode.html#method-i-integer_part","(node)",""],["interpolated_quotes?","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-interpolated_quotes-3F","(node)",""],["interpolation?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-interpolation-3F","(node)",""],["interpret","RuboCop::StringInterpreter","RuboCop/StringInterpreter.html#method-c-interpret","(string)",""],["interpret_hex","RuboCop::StringInterpreter","RuboCop/StringInterpreter.html#method-c-interpret_hex","(escape)",""],["interpret_octal","RuboCop::StringInterpreter","RuboCop/StringInterpreter.html#method-c-interpret_octal","(escape)",""],["interpret_string_escape","RuboCop::StringInterpreter","RuboCop/StringInterpreter.html#method-c-interpret_string_escape","(escape)",""],["interpret_string_escapes","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-interpret_string_escapes","(string)",""],["interpret_unicode","RuboCop::StringInterpreter","RuboCop/StringInterpreter.html#method-c-interpret_unicode","(escape)",""],["interpreter_directive_comment?","RuboCop::Cop::DocumentationComment","RuboCop/Cop/DocumentationComment.html#method-i-interpreter_directive_comment-3F","(comment)",""],["invalid_exceptions","RuboCop::Cop::Lint::RescueType","RuboCop/Cop/Lint/RescueType.html#method-i-invalid_exceptions","(exceptions)",""],["invalid_percent_array_context?","RuboCop::Cop::PercentArray","RuboCop/Cop/PercentArray.html#method-i-invalid_percent_array_context-3F","(node)","<p>Ruby does not allow percent arrays in an ambiguous block context.\n<p>@example\n\n<pre>foo %i[bar baz] { qux }</pre>\n"],["inverse_blocks","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-inverse_blocks","()",""],["inverse_delimiter","RuboCop::AST::PairNode","RuboCop/AST/PairNode.html#method-i-inverse_delimiter","(with_spacing = false)","<p>Returns the inverse delimiter of the `pair` as a string.\n<p>@param [Boolean] with_spacing whether to include …\n"],["inverse_keyword","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-inverse_keyword","()","<p>Returns the inverse keyword of the `if` node as a string. Returns `if` for\n`unless` nodes and vice versa. …\n"],["inverse_keyword","RuboCop::AST::UntilNode","RuboCop/AST/UntilNode.html#method-i-inverse_keyword","()","<p>Returns the inverse keyword of the `until` node as a string. Returns\n`while` for `until` nodes and vice …\n"],["inverse_keyword","RuboCop::AST::WhileNode","RuboCop/AST/WhileNode.html#method-i-inverse_keyword","()","<p>Returns the inverse keyword of the `while` node as a string. Returns\n`until` for `while` nodes and vice …\n"],["inverse_methods","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-inverse_methods","()",""],["inverse_operator","RuboCop::AST::AndNode","RuboCop/AST/AndNode.html#method-i-inverse_operator","()","<p>Returns the inverse keyword of the `and` node as a string. Returns `||` for\n`&amp;&amp;` and `or` for …\n"],["inverse_operator","RuboCop::AST::OrNode","RuboCop/AST/OrNode.html#method-i-inverse_operator","()","<p>Returns the inverse keyword of the `or` node as a string. Returns `and` for\n`or` and `&amp;&amp;` for …\n"],["invert","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-invert","()",""],["invert_expression?","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-invert_expression-3F","(node)",""],["investigate","RuboCop::Cop::Bundler::DuplicatedGem","RuboCop/Cop/Bundler/DuplicatedGem.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Bundler::OrderedGems","RuboCop/Cop/Bundler/OrderedGems.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-i-investigate","(_processed_source)",""],["investigate","RuboCop::Cop::Gemspec::OrderedDependencies","RuboCop/Cop/Gemspec/OrderedDependencies.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::InternalAffairs::UselessMessageAssertion","RuboCop/Cop/InternalAffairs/UselessMessageAssertion.html#method-i-investigate","(_processed_source)",""],["investigate","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::EmptyLineAfterMagicComment","RuboCop/Cop/Layout/EmptyLineAfterMagicComment.html#method-i-investigate","(source)",""],["investigate","RuboCop::Cop::Layout::EmptyLines","RuboCop/Cop/Layout/EmptyLines.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::EndOfLine","RuboCop/Cop/Layout/EndOfLine.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::InitialIndentation","RuboCop/Cop/Layout/InitialIndentation.html#method-i-investigate","(_processed_source)",""],["investigate","RuboCop::Cop::Layout::LeadingCommentSpace","RuboCop/Cop/Layout/LeadingCommentSpace.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::SpaceBeforeComment","RuboCop/Cop/Layout/SpaceBeforeComment.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::Tab","RuboCop/Cop/Layout/Tab.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::TrailingBlankLines","RuboCop/Cop/Layout/TrailingBlankLines.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Layout::TrailingWhitespace","RuboCop/Cop/Layout/TrailingWhitespace.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Lint::ScriptPermission","RuboCop/Cop/Lint/ScriptPermission.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Naming::AsciiIdentifiers","RuboCop/Cop/Naming/AsciiIdentifiers.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::ParserDiagnostic","RuboCop/Cop/ParserDiagnostic.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::RescueNode","RuboCop/Cop/RescueNode.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::SpaceBeforePunctuation","RuboCop/Cop/SpaceBeforePunctuation.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::SpaceInside","RuboCop/Cop/SpaceInside.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::AsciiComments","RuboCop/Cop/Style/AsciiComments.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::BlockComments","RuboCop/Cop/Style/BlockComments.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::CommentAnnotation","RuboCop/Cop/Style/CommentAnnotation.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::CommentedKeyword","RuboCop/Cop/Style/CommentedKeyword.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::Encoding","RuboCop/Cop/Style/Encoding.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::InlineComment","RuboCop/Cop/Style/InlineComment.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-investigate","(_processed_source)",""],["investigate","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-investigate","(processed_source)",""],["investigate","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-investigate","(cops, processed_source)",""],["invoke_custom_processing","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-invoke_custom_processing","(cops_or_forces, processed_source)","<p>There are cops/forces that require their own custom processing. If they\ndefine the #investigate method, …\n"],["invoke_hook","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-invoke_hook","(hook_name, *args)",""],["irrelevant_line","RuboCop::Cop::CodeLength","RuboCop/Cop/CodeLength.html#method-i-irrelevant_line","(source_line)","<p>Returns true for lines that shall not be included in the count.\n"],["iterate_until_no_changes","RuboCop::Runner","RuboCop/Runner.html#method-i-iterate_until_no_changes","(source, offenses)",""],["join_force?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-join_force-3F","(_force_class)",""],["join_force?","RuboCop::Cop::Lint::ShadowingOuterLocalVariable","RuboCop/Cop/Lint/ShadowingOuterLocalVariable.html#method-i-join_force-3F","(force_class)",""],["join_force?","RuboCop::Cop::Lint::UnderscorePrefixedVariableName","RuboCop/Cop/Lint/UnderscorePrefixedVariableName.html#method-i-join_force-3F","(force_class)",""],["join_force?","RuboCop::Cop::Lint::UnusedArgument","RuboCop/Cop/Lint/UnusedArgument.html#method-i-join_force-3F","(force_class)",""],["join_force?","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-join_force-3F","(force_class)",""],["join_force?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-join_force-3F","(force_class)",""],["join_terms","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-join_terms","(init, terms, operator)",""],["joint","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-joint","(node)",""],["just_first_word_of_sentence?","RuboCop::Cop::Style::AnnotationComment","RuboCop/Cop/Style/AnnotationComment.html#method-i-just_first_word_of_sentence-3F","(first_word, colon, space, note)",""],["key","RuboCop::AST::HashElementNode","RuboCop/AST/HashElementNode.html#method-i-key","()","<p>Returns the key of this `hash` element.\n<p>@note For keyword splats, this returns the whole node\n<p>@return [Node] …\n"],["key?","RuboCop::Config","RuboCop/Config.html#method-i-key-3F","(key)",""],["key_delta","RuboCop::AST::HashElementNode","RuboCop/AST/HashElementNode.html#method-i-key_delta","(other, alignment = :left)","<p>Returns the delta between this pair&#39;s key and the argument pair&#39;s.\n<p>@note Keys on the same line …\n"],["key_delta","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-i-key_delta","(alignment = :left)",""],["key_delta","RuboCop::Cop::HashAlignment::SeparatorAlignment","RuboCop/Cop/HashAlignment/SeparatorAlignment.html#method-i-key_delta","(first_pair, current_pair)",""],["key_delta","RuboCop::Cop::HashAlignment::TableAlignment","RuboCop/Cop/HashAlignment/TableAlignment.html#method-i-key_delta","(first_pair, current_pair)",""],["keys","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-keys","()","<p>Returns an array of all the keys in the `hash` literal.\n<p>@return [Array&lt;Node&gt;] an array of keys in …\n"],["keys","RuboCop::Config","RuboCop/Config.html#method-i-keys","()",""],["keyword","RuboCop::AST::CaseNode","RuboCop/AST/CaseNode.html#method-i-keyword","()","<p>Returns the keyword of the `case` statement as a string.\n<p>@return [String] the keyword of the `case` statement …\n"],["keyword","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-keyword","()","<p>Returns the keyword of the `for` statement as a string.\n<p>@return [String] the keyword of the `until` statement …\n"],["keyword","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-keyword","()","<p>Returns the keyword of the `if` statement as a string. Returns an empty\nstring for ternary operators. …\n"],["keyword","RuboCop::AST::UntilNode","RuboCop/AST/UntilNode.html#method-i-keyword","()","<p>Returns the keyword of the `until` statement as a string.\n<p>@return [String] the keyword of the `until` …\n"],["keyword","RuboCop::AST::WhileNode","RuboCop/AST/WhileNode.html#method-i-keyword","()","<p>Returns the keyword of the `while` statement as a string.\n<p>@return [String] the keyword of the `while` …\n"],["keyword?","RuboCop::Cop::Style::AnnotationComment","RuboCop/Cop/Style/AnnotationComment.html#method-i-keyword-3F","(word)",""],["keyword?","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-keyword-3F","(method_name)",""],["keyword_ancestor?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-keyword_ancestor-3F","(node)",""],["keyword_appearance?","RuboCop::Cop::Style::AnnotationComment","RuboCop/Cop/Style/AnnotationComment.html#method-i-keyword_appearance-3F","(first_word, colon, space)",""],["keyword_argument?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-keyword_argument-3F","()",""],["keyword_autocorrect","RuboCop::Cop::Style::MultilineMemoization","RuboCop/Cop/Style/MultilineMemoization.html#method-i-keyword_autocorrect","(node, corrector)",""],["keyword_begin_str","RuboCop::Cop::Style::MultilineMemoization","RuboCop/Cop/Style/MultilineMemoization.html#method-i-keyword_begin_str","(node, node_buf)",""],["keyword_end_str","RuboCop::Cop::Style::MultilineMemoization","RuboCop/Cop/Style/MultilineMemoization.html#method-i-keyword_end_str","(node, node_buf)",""],["keyword_locations","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-keyword_locations","(node)",""],["keyword_locations_in_ensure","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-keyword_locations_in_ensure","(node)",""],["keyword_locations_in_rescue","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-keyword_locations_in_rescue","(node)",""],["keyword_splat?","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-i-keyword_splat-3F","()",""],["keyword_with_changed_precedence?","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-keyword_with_changed_precedence-3F","(node)",""],["keyword_with_redundant_parentheses?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-keyword_with_redundant_parentheses-3F","(node)",""],["keywords?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-keywords-3F","()","<p>Checks whether the `block` literal is delimited by `do`-`end` keywords.\n<p>@return [Boolean] whether the …\n"],["kind","RuboCop::Cop::Layout::SpaceAfterComma","RuboCop/Cop/Layout/SpaceAfterComma.html#method-i-kind","(token)",""],["kind","RuboCop::Cop::Layout::SpaceAfterSemicolon","RuboCop/Cop/Layout/SpaceAfterSemicolon.html#method-i-kind","(token)",""],["kind","RuboCop::Cop::Layout::SpaceBeforeComma","RuboCop/Cop/Layout/SpaceBeforeComma.html#method-i-kind","(token)",""],["kind","RuboCop::Cop::Layout::SpaceBeforeSemicolon","RuboCop/Cop/Layout/SpaceBeforeSemicolon.html#method-i-kind","(token)",""],["kv_range","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-kv_range","(outer_node)",""],["lambda?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-lambda-3F","()","<p>Checks whether this `block` literal belongs to a lambda.\n<p>@return [Boolean] whether the `block` literal …\n"],["lambda_arg_string","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-lambda_arg_string","(args)",""],["lambda_node?","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-lambda_node-3F","(node)",""],["largest_brackets_size","RuboCop::Cop::ArrayMinSize","RuboCop/Cop/ArrayMinSize.html#method-i-largest_brackets_size","(style, ary_size)",""],["last_argument","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-last_argument","()","<p>A shorthand for getting the last argument of the node. Equivalent to\n`arguments.last`.\n<p>@return [Node, …\n"],["last_by_line","RuboCop::Cop::FirstElementLineBreak","RuboCop/Cop/FirstElementLineBreak.html#method-i-last_by_line","(nodes)",""],["last_call_of_method?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-last_call_of_method-3F","(node)",""],["last_element_range_with_trailing_comma","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-last_element_range_with_trailing_comma","(node)",""],["last_element_trailing_comma_range","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-last_element_trailing_comma_range","(node)",""],["last_end_pos_inside_pipes","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-last_end_pos_inside_pipes","(pos)",""],["last_expression","RuboCop::Cop::Lint::UselessSetterCall","RuboCop/Cop/Lint/UselessSetterCall.html#method-i-last_expression","(body)",""],["last_line","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-last_line","()","<p>@api private\n"],["last_line_heredoc?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-last_line_heredoc-3F","(node, parent = nil)","<p>Starting with the parent node and recursively for the parent node&#39;s\nchildren, check if the node is …\n"],["last_magic_comment","RuboCop::Cop::Layout::EmptyLineAfterMagicComment","RuboCop/Cop/Layout/EmptyLineAfterMagicComment.html#method-i-last_magic_comment","(source)","<p>Find the last magic comment in the source file.\n<p>Take all comments that precede the first line of code, …\n"],["last_match_used?","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-last_match_used-3F","(match_node)",""],["last_special_comment","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-last_special_comment","(processed_source)",""],["lazy?","RuboCop::Cop::Performance::Detect","RuboCop/Cop/Performance/Detect.html#method-i-lazy-3F","(node)",""],["leading_comment_lines","RuboCop::Cop::FrozenStringLiteral","RuboCop/Cop/FrozenStringLiteral.html#method-i-leading_comment_lines","()",""],["leading_spaces","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-leading_spaces","(node)",""],["left_brace?","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-left_brace-3F","(token)",""],["left_hand_operand","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-left_hand_operand","(node, operator)",""],["left_side?","RuboCop::Cop::SpaceInside::Brackets","RuboCop/Cop/SpaceInside/Brackets.html#method-i-left_side-3F","(token)",""],["length","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-length","()",""],["length_in_modifier_form","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-length_in_modifier_form","(node, cond, body_length)",""],["less_indented?","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-less_indented-3F","(line)",""],["level","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-i-level","()","<p>@api private\n"],["lexical_scope_type","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-lexical_scope_type","(node)",""],["lhs","RuboCop::AST::BinaryOperatorNode","RuboCop/AST/BinaryOperatorNode.html#method-i-lhs","()","<p>Returns the left hand side node of the binary operation.\n<p>@return [Node] the left hand side of the binary …\n"],["lhs","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-lhs","(node)","<p>rubocop:disable Metrics/AbcSize\n"],["lhs_all_match?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-lhs_all_match-3F","(branches)",""],["lhs_for_send","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-lhs_for_send","(node)",""],["limited_common_prefix_length","RuboCop::StringUtil::JaroWinkler","RuboCop/StringUtil/JaroWinkler.html#method-i-limited_common_prefix_length","()",""],["line","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-line","()","<p>@api private\n"],["line_after_comment","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-line_after_comment","(comment)",""],["line_between?","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-line_between-3F","(first_line, second_line)",""],["line_break_after_left_paren?","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-line_break_after_left_paren-3F","(left_paren, elements)",""],["line_break_before_keyword?","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-line_break_before_keyword-3F","(whole_expression, rhs)",""],["line_count","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-line_count","(node)",""],["line_count_based_block_style?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-line_count_based_block_style-3F","(node)",""],["line_count_based_message","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-line_count_based_message","(node)",""],["line_distance","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-line_distance","(n1, n2)",""],["line_in_whitelisted_heredoc?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-line_in_whitelisted_heredoc-3F","(heredocs, line_number)",""],["line_length_cop_enabled?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-line_length_cop_enabled-3F","()",""],["line_length_without_directive","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-line_length_without_directive","(line)",""],["line_numbers_of_inner_nodes","RuboCop::Cop::ClassishLength","RuboCop/Cop/ClassishLength.html#method-i-line_numbers_of_inner_nodes","(node, *types)",""],["lines","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-lines","()","<p>Returns the source lines, line break characters removed, excluding a\npossible __END__ and everything …\n"],["lines_between_defs","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-lines_between_defs","(first_def_node, second_def_node)",""],["lint?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-lint-3F","()",""],["list_files","RuboCop::Runner","RuboCop/Runner.html#method-i-list_files","(paths)",""],["literal_at_end?","RuboCop::Cop::Performance::EndWith","RuboCop/Cop/Performance/EndWith.html#method-i-literal_at_end-3F","(regex_str)",""],["literal_at_start?","RuboCop::Cop::Performance::StartWith","RuboCop/Cop/Performance/StartWith.html#method-i-literal_at_start-3F","(regex_str)",""],["literal_number?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-literal_number-3F","(node)",""],["literal_type","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-literal_type","(node)",""],["load","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-load","()",""],["load_file","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-load_file","(file)",""],["load_yaml_configuration","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-load_yaml_configuration","(absolute_path)",""],["loc_to_source_line_column","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-loc_to_source_line_column","(loc)",""],["logical_operator?","RuboCop::AST::PredicateOperatorNode","RuboCop/AST/PredicateOperatorNode.html#method-i-logical_operator-3F","()","<p>Checks whether this is a logical operator.\n<p>@return [Boolean] whether this is a logical operator\n"],["long_opt_symbol","RuboCop::Options","RuboCop/Options.html#method-i-long_opt_symbol","(args)","<p>Finds the option in `args` starting with – and converts it to a symbol,\ne.g. […, &#39;–auto-correct&#39;, …\n"],["longest_line","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-longest_line","(node, assignment)",""],["longest_line_exceeds_line_limit?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-longest_line_exceeds_line_limit-3F","(node, assignment)",""],["looks_like_rails_html_safe?","RuboCop::Cop::Rails::OutputSafety","RuboCop/Cop/Rails/OutputSafety.html#method-i-looks_like_rails_html_safe-3F","(node)",""],["looks_like_rails_raw?","RuboCop::Cop::Rails::OutputSafety","RuboCop/Cop/Rails/OutputSafety.html#method-i-looks_like_rails_raw-3F","(node)",""],["looks_like_rails_safe_concat?","RuboCop::Cop::Rails::OutputSafety","RuboCop/Cop/Rails/OutputSafety.html#method-i-looks_like_rails_safe_concat-3F","(node)",""],["looks_like_trivial_reader?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-looks_like_trivial_reader-3F","(node)",""],["lookup_constant","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-lookup_constant","(node, const_name)",""],["macro?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-macro-3F","()","<p>Checks whether the dispatched method is a macro method. A macro method is\ndefined as a method that sits …\n"],["macro_kwbegin_wrapper?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-macro_kwbegin_wrapper-3F","(parent)","<p>Check if a node&#39;s parent is a kwbegin wrapper within a macro scope\n<p>@param parent [Node] parent of …\n"],["main_node_offense","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-main_node_offense","(node)",""],["make_excludes_absolute","RuboCop::Config","RuboCop/Config.html#method-i-make_excludes_absolute","()",""],["map","RuboCop::Config","RuboCop/Config.html#method-i-map","(&block)",""],["mark_method_as_useless","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-mark_method_as_useless","(node, cur_vis)",""],["mark_variable_as_captured_by_block_if_so","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-mark_variable_as_captured_by_block_if_so","(variable)",""],["match","RuboCop::MagicComment::EditorComment","RuboCop/MagicComment/EditorComment.html#method-i-match","(keyword)","<p>Find a token starting with the provided keyword and extract its value.\n<p>@param keyword [String]\n<p>@return …\n"],["match?","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-match-3F","(other)",""],["match?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-match-3F","(given_names)","<p>Returns true if the cop name or the cop namespace matches any of the given\nnames.\n"],["match?","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-match-3F","(expected)",""],["match_acronym?","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-match_acronym-3F","(expected, name)",""],["match_gvar?","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-match_gvar-3F","(sym)",""],["match_namespace","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-match_namespace","(node, namespace, expected)","<p>rubocop:enable Metrics/CyclomaticComplexity\n"],["match_path?","RuboCop::PathUtil","RuboCop/PathUtil.html#method-i-match_path-3F","(pattern, path)",""],["match_range","RuboCop::Cop::MatchRange","RuboCop/Cop/MatchRange.html#method-i-match_range","(range, match)","<p>For a `match` inside `range`, return a new `Range` covering the match\n"],["match_token","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-match_token","(source_range)",""],["match_uris","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-match_uris","(string)",""],["match_with_lvasgn?","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-match_with_lvasgn-3F","(node)",""],["matched_arguments_count?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-matched_arguments_count-3F","(expected, passed)",""],["matches_ignored_pattern?","RuboCop::Cop::IgnoredPattern","RuboCop/Cop/IgnoredPattern.html#method-i-matches_ignored_pattern-3F","(line)",""],["matching_brackets?","RuboCop::Cop::SpaceInside","RuboCop/Cop/SpaceInside.html#method-i-matching_brackets-3F","(brackets, t1, t2)",""],["matching_index_range","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-matching_index_range","(origin)",""],["matching_range","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-matching_range","(haystack, needle)",""],["matching_ranges","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-matching_ranges","(end_loc, align_ranges)",""],["matching_window","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-i-matching_window","()",""],["max","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-max","()",""],["max=","RuboCop::Cop::ConfigurableMax","RuboCop/Cop/ConfigurableMax.html#method-i-max-3D","(value)",""],["max_key_value_pairs","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-max_key_value_pairs","()",""],["max_length","RuboCop::Cop::CodeLength","RuboCop/Cop/CodeLength.html#method-i-max_length","()",""],["max_line_length","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-max_line_length","()",""],["max_line_length","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-max_line_length","()",""],["max_parameter_name","RuboCop::Cop::ConfigurableMax","RuboCop/Cop/ConfigurableMax.html#method-i-max_parameter_name","()",""],["max_parameter_name","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-max_parameter_name","()",""],["max_params","RuboCop::Cop::Metrics::ParameterLists","RuboCop/Cop/Metrics/ParameterLists.html#method-i-max_params","()",""],["maximum_empty_lines","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-maximum_empty_lines","()",""],["may_jump_to_other_branch?","RuboCop::Cop::VariableForce::ExceptionHandler","RuboCop/Cop/VariableForce/ExceptionHandler.html#method-i-may_jump_to_other_branch-3F","()",""],["may_run_incompletely?","RuboCop::Cop::VariableForce::ExceptionHandler","RuboCop/Cop/VariableForce/ExceptionHandler.html#method-i-may_run_incompletely-3F","()",""],["maybe_print_corrected_source","RuboCop::CLI","RuboCop/CLI.html#method-i-maybe_print_corrected_source","()",""],["meaningful_delimiters?","RuboCop::Cop::Naming::HeredocDelimiterNaming","RuboCop/Cop/Naming/HeredocDelimiterNaming.html#method-i-meaningful_delimiters-3F","(node)",""],["merge","RuboCop::Config","RuboCop/Config.html#method-i-merge","(other_hash)",""],["merge","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-merge","(base_hash, derived_hash)","<p>Return a recursive merge of two hashes. That is, a normal hash merge, with\nthe addition that any value …\n"],["merge_with_default","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-merge_with_default","(config, config_file)","<p>Merges the given configuration with the default one. If\nAllCops:DisabledByDefault is true, it changes …\n"],["message","RuboCop::CachedData","RuboCop/CachedData.html#method-i-message","(offense)",""],["message","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-message","(_node = nil)",""],["message","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-message","(node)",""],["message","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-message","(node)",""],["message","RuboCop::Cop::Layout::BlockEndNewline","RuboCop/Cop/Layout/BlockEndNewline.html#method-i-message","(node)",""],["message","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-message","(base)",""],["message","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-message","(node)",""],["message","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-message","(type, desc)",""],["message","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-message","(arg_node)",""],["message","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-message","(base_description)",""],["message","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-message","(base_description)",""],["message","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-message","(node)",""],["message","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-message","(node, lhs, rhs)",""],["message","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-message","(node, lhs, rhs)",""],["message","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-message","(_)",""],["message","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-message","(brace, is_empty_braces, expect_space)",""],["message","RuboCop::Cop::Layout::SpaceInsideStringInterpolation","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Layout::TrailingBlankLines","RuboCop/Cop/Layout/TrailingBlankLines.html#method-i-message","(wanted_blank_lines, blank_lines)",""],["message","RuboCop::Cop::Lint::AmbiguousBlockAssociation","RuboCop/Cop/Lint/AmbiguousBlockAssociation.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Lint::ConditionPosition","RuboCop/Cop/Lint/ConditionPosition.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::Debugger","RuboCop/Cop/Lint/Debugger.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::InheritException","RuboCop/Cop/Lint/InheritException.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::RandOne","RuboCop/Cop/Lint/RandOne.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::RedundantWithIndex","RuboCop/Cop/Lint/RedundantWithIndex.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::RedundantWithObject","RuboCop/Cop/Lint/RedundantWithObject.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::StringConversionInInterpolation","RuboCop/Cop/Lint/StringConversionInInterpolation.html#method-i-message","(node)",""],["message","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-message","(variable)",""],["message","RuboCop::Cop::Lint::UnusedMethodArgument","RuboCop/Cop/Lint/UnusedMethodArgument.html#method-i-message","(variable)",""],["message","RuboCop::Cop::Metrics::ClassLength","RuboCop/Cop/Metrics/ClassLength.html#method-i-message","(length, max_length)",""],["message","RuboCop::Cop::Metrics::ModuleLength","RuboCop/Cop/Metrics/ModuleLength.html#method-i-message","(length, max_length)",""],["message","RuboCop::Cop::Metrics::ParameterLists","RuboCop/Cop/Metrics/ParameterLists.html#method-i-message","(node)",""],["message","RuboCop::Cop::Naming::HeredocDelimiterCase","RuboCop/Cop/Naming/HeredocDelimiterCase.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Naming::MethodName","RuboCop/Cop/Naming/MethodName.html#method-i-message","(style)",""],["message","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-message","(method_name, new_name)",""],["message","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-message","(style)",""],["message","RuboCop::Cop::Naming::VariableNumber","RuboCop/Cop/Naming/VariableNumber.html#method-i-message","(style)",""],["message","RuboCop::Cop::PercentArray","RuboCop/Cop/PercentArray.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Performance::Caller","RuboCop/Cop/Performance/Caller.html#method-i-message","(node)",""],["message","RuboCop::Cop::Performance::CompareWithBlock","RuboCop/Cop/Performance/CompareWithBlock.html#method-i-message","(send, method, var_a, var_b, args)",""],["message","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-message","(node)",""],["message","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-message","(node)",""],["message","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-message","(shuffle_arg, method, method_args, range)",""],["message","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-message","(node, first_source, second_source)",""],["message","RuboCop::Cop::Performance::TimesMap","RuboCop/Cop/Performance/TimesMap.html#method-i-message","(map_or_collect, count)",""],["message","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-message","(node)",""],["message","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-message","(node)",""],["message","RuboCop::Cop::Rails::ReadWriteAttribute","RuboCop/Cop/Rails/ReadWriteAttribute.html#method-i-message","(node)",""],["message","RuboCop::Cop::Rails::RequestReferer","RuboCop/Cop/Rails/RequestReferer.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Rails::SkipsModelValidations","RuboCop/Cop/Rails/SkipsModelValidations.html#method-i-message","(node)",""],["message","RuboCop::Cop::Rails::UnknownEnv","RuboCop/Cop/Rails/UnknownEnv.html#method-i-message","(name)",""],["message","RuboCop::Cop::Rails::Validation","RuboCop/Cop/Rails/Validation.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::Attr","RuboCop/Cop/Style/Attr.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::ClassCheck","RuboCop/Cop/Style/ClassCheck.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::ClassMethods","RuboCop/Cop/Style/ClassMethods.html#method-i-message","(class_name, method_name)",""],["message","RuboCop::Cop::Style::ClassVars","RuboCop/Cop/Style/ClassVars.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::CollectionMethods","RuboCop/Cop/Style/CollectionMethods.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::CommentedKeyword","RuboCop/Cop/Style/CommentedKeyword.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Style::FormatString","RuboCop/Cop/Style/FormatString.html#method-i-message","(detected_style)",""],["message","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-message","(detected_style)",""],["message","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-message","(node, selector)",""],["message","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Style::MethodMissing","RuboCop/Cop/Style/MethodMissing.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::MinMax","RuboCop/Cop/Style/MinMax.html#method-i-message","(offender, receiver)",""],["message","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-message","(send_node)",""],["message","RuboCop::Cop::Style::ModuleFunction","RuboCop/Cop/Style/ModuleFunction.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Style::MultilineIfModifier","RuboCop/Cop/Style/MultilineIfModifier.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::NegatedIf","RuboCop/Cop/Style/NegatedIf.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::NegatedWhile","RuboCop/Cop/Style/NegatedWhile.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::ParenthesesAroundCondition","RuboCop/Cop/Style/ParenthesesAroundCondition.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::PercentQLiterals","RuboCop/Cop/Style/PercentQLiterals.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Style::PreferredHashMethods","RuboCop/Cop/Style/PreferredHashMethods.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::ReturnNil","RuboCop/Cop/Style/ReturnNil.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-message","(method_name)",""],["message","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-message","(_node)",""],["message","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-message","(*)",""],["message","RuboCop::Cop::Style::StringLiteralsInInterpolation","RuboCop/Cop/Style/StringLiteralsInInterpolation.html#method-i-message","(*)",""],["message","RuboCop::Cop::Style::StringMethods","RuboCop/Cop/Style/StringMethods.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-message","(node)",""],["message","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-message","(node)",""],["message","RuboCop::Cop::TooManyLines","RuboCop/Cop/TooManyLines.html#method-i-message","(length, max_length)",""],["message","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-message","(offense)",""],["message","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-message","(offense)",""],["message_for_dup","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-message_for_dup","(node, method_name)",""],["message_for_lambda","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-message_for_lambda","(variable, all_arguments)",""],["message_for_normal_block","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-message_for_normal_block","(variable, all_arguments)",""],["message_for_underscore_prefix","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-message_for_underscore_prefix","(variable)",""],["message_for_useless_assignment","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-message_for_useless_assignment","(assignment)",""],["message_line_modifier","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-message_line_modifier","(node)",""],["message_specification","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-message_specification","(assignment, variable)",""],["message_text","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-message_text","(style)","<p>rubocop:disable FormatStringToken\n"],["messages","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-messages","()",""],["meta_assignment_node","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-meta_assignment_node","()",""],["metadata_hash","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-metadata_hash","()",""],["method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-method-3F","(name)","<p>Checks whether the method name matches the argument.\n<p>@param [Symbol, String] name the method name to check …\n"],["method_argument?","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-method_argument-3F","(node)",""],["method_argument?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-method_argument-3F","()",""],["method_as_param?","RuboCop::Cop::Lint::AmbiguousBlockAssociation","RuboCop/Cop/Lint/AmbiguousBlockAssociation.html#method-i-method_as_param-3F","(param)",""],["method_call","RuboCop::Cop::Lint::DeprecatedClassMethods","RuboCop/Cop/Lint/DeprecatedClassMethods.html#method-i-method_call","(class_constant, method)",""],["method_call_with_changed_precedence?","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-method_call_with_changed_precedence-3F","(node)",""],["method_call_with_redundant_parentheses?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-method_call_with_redundant_parentheses-3F","(node)",""],["method_chain","RuboCop::Cop::Rails::FindEach","RuboCop/Cop/Rails/FindEach.html#method-i-method_chain","(node)",""],["method_definition?","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-method_definition-3F","(child)",""],["method_definition_macros","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-method_definition_macros","(macro_name)",""],["method_from_time_class?","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-method_from_time_class-3F","(node)","<p>Only add the method to the chain if the method being called is part of the\ntime class.\n"],["method_name","RuboCop::AST::DefNode","RuboCop/AST/DefNode.html#method-i-method_name","()","<p>The name of the defined method as a symbol.\n<p>@return [Symbol] the name of the defined method\n"],["method_name","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-method_name","()","<p>The name of the dispatched method as a symbol.\n<p>@return [Symbol] the name of the dispatched method\n"],["method_name","RuboCop::Cop::Lint::ReturnInVoidContext","RuboCop/Cop/Lint/ReturnInVoidContext.html#method-i-method_name","(context_node)",""],["method_name","RuboCop::Cop::Style::FormatString","RuboCop/Cop/Style/FormatString.html#method-i-method_name","(style_name)",""],["method_name","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-method_name","(method)",""],["method_name_matches?","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-method_name_matches-3F","(method_name, body)",""],["method_names","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-method_names","()",""],["method_send?","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-method_send-3F","(node)","<p>checks that parent node of send_type and receiver is the given node\n"],["method_send?","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-method_send-3F","(node)","<p>checks that parent node of send_type and receiver is the given node\n"],["method_suffix","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-method_suffix","(node)",""],["method_uses_parens?","RuboCop::Cop::FirstElementLineBreak","RuboCop/Cop/FirstElementLineBreak.html#method-i-method_uses_parens-3F","(node, limit)",""],["method_uses_parens?","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-method_uses_parens-3F","(node, limit)",""],["method_with_block?","RuboCop::Cop::Lint::AmbiguousBlockAssociation","RuboCop/Cop/Lint/AmbiguousBlockAssociation.html#method-i-method_with_block-3F","(param)",""],["method_with_format_args?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-method_with_format_args-3F","(node)",""],["methods","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-methods","()",""],["min_body_length","RuboCop::Cop::MinBodyLength","RuboCop/Cop/MinBodyLength.html#method-i-min_body_length","()",""],["min_body_length?","RuboCop::Cop::MinBodyLength","RuboCop/Cop/MinBodyLength.html#method-i-min_body_length-3F","(node)",""],["min_digits","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-min_digits","()",""],["min_size_config","RuboCop::Cop::ArrayMinSize","RuboCop/Cop/ArrayMinSize.html#method-i-min_size_config","()",""],["minimum_empty_lines","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-minimum_empty_lines","()",""],["minimum_severity_to_fail","RuboCop::Runner","RuboCop/Runner.html#method-i-minimum_severity_to_fail","()",""],["minimum_target_rails_version","RuboCop::Cop::TargetRailsVersion","RuboCop/Cop/TargetRailsVersion.html#method-i-minimum_target_rails_version","(version)",""],["minimum_target_ruby_version","RuboCop::Cop::TargetRubyVersion","RuboCop/Cop/TargetRubyVersion.html#method-i-minimum_target_ruby_version","(version)",""],["missing_else_style","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-missing_else_style","()",""],["missing_parentheses","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-missing_parentheses","(node)",""],["missing_parentheses?","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-missing_parentheses-3F","(node)",""],["missing_parentheses_corrector","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-missing_parentheses_corrector","(node)",""],["mixed_delimiters?","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-mixed_delimiters-3F","()","<p>Checks whether this `hash` uses a mix of hash rocket and colon delimiters\nfor its pairs.\n<p>@return [Boolean] …\n"],["mobilized_cop_classes","RuboCop::Runner","RuboCop/Runner.html#method-i-mobilized_cop_classes","(config)",""],["modifier?","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-modifier-3F","(node)",""],["modifier?","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-modifier-3F","(node)",""],["modifier_fits_on_single_line?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-modifier_fits_on_single_line-3F","(node)",""],["modifier_form?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-modifier_form-3F","()","<p>Checks whether the `if` node is in a modifier form, i.e. a condition\ntrailing behind an expression.  …\n"],["modifier_form?","RuboCop::AST::ModifierNode","RuboCop/AST/ModifierNode.html#method-i-modifier_form-3F","()","<p>Checks whether the node is in a modifier form, i.e. a condition trailing\nbehind an expression.\n<p>@return …\n"],["modifier_op?","RuboCop::Cop::Style::ParenthesesAroundCondition","RuboCop/Cop/Style/ParenthesesAroundCondition.html#method-i-modifier_op-3F","(node)",""],["modifier_range","RuboCop::Cop::Style::ParallelAssignment::ModifierCorrector","RuboCop/Cop/Style/ParallelAssignment/ModifierCorrector.html#method-i-modifier_range","(node)",""],["modifier_replacement","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-modifier_replacement","(node)",""],["modifier_statement?","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-modifier_statement-3F","(node)",""],["move_assignment_inside_condition","RuboCop::Cop::Style::CaseCorrector","RuboCop/Cop/Style/CaseCorrector.html#method-c-move_assignment_inside_condition","(node)",""],["move_assignment_inside_condition","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-move_assignment_inside_condition","(node)",""],["move_assignment_inside_condition","RuboCop::Cop::Style::IfCorrector","RuboCop/Cop/Style/IfCorrector.html#method-c-move_assignment_inside_condition","(node)",""],["move_assignment_inside_condition","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-move_assignment_inside_condition","(node)",""],["move_assignment_outside_condition","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-move_assignment_outside_condition","(node)",""],["move_branch_inside_condition","RuboCop::Cop::Style::CaseCorrector","RuboCop/Cop/Style/CaseCorrector.html#method-c-move_branch_inside_condition","(corrector, branch, condition, assignment, column)",""],["move_branch_inside_condition","RuboCop::Cop::Style::IfCorrector","RuboCop/Cop/Style/IfCorrector.html#method-c-move_branch_inside_condition","(corrector, branch, condition, assignment, column)",""],["move_branch_inside_condition","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-move_branch_inside_condition","(corrector, branch, assignment)",""],["move_comment","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-move_comment","(eol_comment, node, corrector)",""],["multiline?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-multiline-3F","()","<p>Checks whether this is a multiline block. This is overridden here because\nthe general version in `Node` …\n"],["multiline?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-multiline-3F","(node)","<p>Returns true if the round/square/curly brackets of the given node are on\ndifferent lines, and each item …\n"],["multiline_condition?","RuboCop::AST::ConditionalNode","RuboCop/AST/ConditionalNode.html#method-i-multiline_condition-3F","()","<p>Checks whether the condition of the node is written on more than one line.\n<p>@return [Boolean] whether the …\n"],["multiple_assignment?","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-multiple_assignment-3F","()",""],["multiple_assignment_message","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-multiple_assignment_message","(variable_name)",""],["multiple_assignment_node","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-multiple_assignment_node","()",""],["multiple_blank_lines_groups?","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-multiple_blank_lines_groups-3F","(first_def_node, second_def_node)",""],["name","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-name","()",""],["name","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-i-name","()",""],["name","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-name","()",""],["name","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-name","()",""],["name_from_code","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-c-name_from_code","(code)","<p>@api private\n"],["named_mode?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-named_mode-3F","(node)",""],["names","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-names","()",""],["names_match?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-names_match-3F","(node)",""],["namespace?","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-namespace-3F","(body, with_one_child: false)",""],["namespace?","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-namespace-3F","(node)",""],["need_check_localtime?","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-need_check_localtime-3F","(chain)",""],["needs_conversion?","RuboCop::Cop::Rails::HttpPositionalArguments","RuboCop/Cop/Rails/HttpPositionalArguments.html#method-i-needs_conversion-3F","(data)","<p>@return [Boolean] true if the line needs to be converted\n"],["needs_escaping?","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-needs_escaping-3F","(string)",""],["needs_reorder?","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-needs_reorder-3F","(when_node)",""],["needs_whitespace?","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-needs_whitespace-3F","(block_method, args, node)",""],["negated?","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-negated-3F","(node)",""],["negated?","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-negated-3F","(send_node)",""],["negated_condition","RuboCop::Cop::NegativeConditional","RuboCop/Cop/NegativeConditional.html#method-i-negated_condition","(node)",""],["negation_method?","RuboCop::AST::SendNode","RuboCop/AST/SendNode.html#method-i-negation_method-3F","()",""],["negative_conditional_corrector","RuboCop::Cop::NegativeConditional","RuboCop/Cop/NegativeConditional.html#method-i-negative_conditional_corrector","(node)",""],["nested_comparison?","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-nested_comparison-3F","(node)",""],["nested_conditional?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-nested_conditional-3F","()","<p>Chacks whether the `if` node has nested `if` nodes in any of its branches.\n<p>@note This performs a shallow …\n"],["nested_variable_comparison?","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-nested_variable_comparison-3F","(node)",""],["new","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-c-new","(first, second)",""],["new","RuboCop::CLI","RuboCop/CLI.html#method-c-new","()",""],["new","RuboCop::CachedData","RuboCop/CachedData.html#method-c-new","(filename)",""],["new","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-c-new","(processed_source)",""],["new","RuboCop::Config","RuboCop/Config.html#method-c-new","(hash = {}, loaded_path = nil)",""],["new","RuboCop::ConfigStore","RuboCop/ConfigStore.html#method-c-new","()",""],["new","RuboCop::Cop::AmbiguousCopName","RuboCop/Cop/AmbiguousCopName.html#method-c-new","(name, origin, badges)",""],["new","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-c-new","(department, cop_name)",""],["new","RuboCop::Cop::Badge::InvalidBadge","RuboCop/Cop/Badge/InvalidBadge.html#method-c-new","(token)",""],["new","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-c-new","(cops, forces = [], options = {})",""],["new","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-new","(config = nil, options = nil)",""],["new","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-c-new","(source_buffer, corrections = [])","<p>@param source_buffer [Parser::Source::Buffer] @param corrections\n[Array(#call)]\n\n<pre>Array of Objects that ...</pre>\n"],["new","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-c-new","(cops)",""],["new","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-c-new","(name)",""],["new","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-c-new","(require_path)",""],["new","RuboCop::Cop::Lint::DeprecatedClassMethods::DeprecatedClassMethod","RuboCop/Cop/Lint/DeprecatedClassMethods/DeprecatedClassMethod.html#method-c-new","(class_constant, deprecated_method, replacement_method)",""],["new","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-c-new","(config = nil, options = nil)",""],["new","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-c-new","(body_node)",""],["new","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-c-new","(config, cop_config, options)","<p>@param config [RuboCop::Config] Check configs for all cops\n\n<pre>@note Message Annotator specifically checks ...</pre>\n"],["new","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-c-new","(severity, location, message, cop_name, status = :uncorrected)","<p>@api private\n"],["new","RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector","RuboCop/Cop/Performance/RedundantMerge/EachWithObjectInspector.html#method-c-new","(node, receiver)",""],["new","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-c-new","(cops = [])",""],["new","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-c-new","(name_or_code)","<p>@api private\n"],["new","RuboCop::Cop::SpaceInside::Brackets","RuboCop/Cop/SpaceInside/Brackets.html#method-c-new","(left, right, kind)",""],["new","RuboCop::Cop::Style::ParallelAssignment::AssignmentSorter","RuboCop/Cop/Style/ParallelAssignment/AssignmentSorter.html#method-c-new","(assignments)",""],["new","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-c-new","(node, config, new_elements)",""],["new","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-c-new","(config = nil, options = nil)",""],["new","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-c-new","(cop_classes, config, options = nil)",""],["new","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-c-new","(node, variable)",""],["new","RuboCop::Cop::VariableForce::Reference","RuboCop/Cop/VariableForce/Reference.html#method-c-new","(node, scope)",""],["new","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-c-new","(node)",""],["new","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-c-new","(name, declaration_node, scope)",""],["new","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-c-new","(hook_receiver = nil)",""],["new","RuboCop::Formatter::BaseFormatter","RuboCop/Formatter/BaseFormatter.html#method-c-new","(output, options = {})","<p>@api public\n<p>@param output [IO]\n\n<pre class=\"ruby\"><span class=\"ruby-value\">%x`$stdout`</span> <span class=\"ruby-keyword\">or</span> <span class=\"ruby-identifier\">opened</span> <span class=\"ruby-identifier\">file</span>\n</pre>\n"],["new","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-c-new","(output, options = {})",""],["new","RuboCop::Formatter::FormatterSet","RuboCop/Formatter/FormatterSet.html#method-c-new","(options = {})",""],["new","RuboCop::Formatter::FuubarStyleFormatter","RuboCop/Formatter/FuubarStyleFormatter.html#method-c-new","(*)",""],["new","RuboCop::Formatter::HTMLFormatter","RuboCop/Formatter/HTMLFormatter.html#method-c-new","(output, options = {})",""],["new","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-c-new","(files, summary)",""],["new","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-c-new","(output, options = {})",""],["new","RuboCop::Formatter::ProgressFormatter","RuboCop/Formatter/ProgressFormatter.html#method-c-new","(output, options = {})",""],["new","RuboCop::Formatter::SimpleTextFormatter::Report","RuboCop/Formatter/SimpleTextFormatter/Report.html#method-c-new","(file_count, offense_count, correction_count, rainbow)",""],["new","RuboCop::MagicComment","RuboCop/MagicComment.html#method-c-new","(comment)",""],["new","RuboCop::NodePattern","RuboCop/NodePattern.html#method-c-new","(str)",""],["new","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-c-new","(str, node_var = 'node0')",""],["new","RuboCop::Options","RuboCop/Options.html#method-c-new","()",""],["new","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-c-new","(options)",""],["new","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-c-new","(source, ruby_version, path = nil)",""],["new","RuboCop::RSpec::ExpectOffense::AnnotatedSource","RuboCop/RSpec/ExpectOffense/AnnotatedSource.html#method-c-new","(lines, annotations)","<p>@param lines [Array&lt;String&gt;] @param annotations [Array&lt;(Integer,\nString)&gt;]\n\n<pre>each entry is the ...</pre>\n"],["new","RuboCop::RakeTask","RuboCop/RakeTask.html#method-c-new","(name = :rubocop, *args, &task_block)",""],["new","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-c-new","(url, base_dir)",""],["new","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-new","(file, options, config_store, cache_root = nil)",""],["new","RuboCop::Runner","RuboCop/Runner.html#method-c-new","(options, config_store)",""],["new","RuboCop::Runner::InfiniteCorrectionLoop","RuboCop/Runner/InfiniteCorrectionLoop.html#method-c-new","(path, offenses)",""],["new","RuboCop::StringUtil::Jaro","RuboCop/StringUtil/Jaro.html#method-c-new","(a, b)",""],["new","RuboCop::StringUtil::JaroWinkler","RuboCop/StringUtil/JaroWinkler.html#method-c-new","(a, b, boost_threshold = nil, scaling_factor = nil)",""],["new","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-c-new","(config_store, options = {})",""],["new","RuboCop::Token","RuboCop/Token.html#method-c-new","(pos, type, text)",""],["new_alignment","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-new_alignment","(key)",""],["new_branch_without_then","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-new_branch_without_then","(node, new_condition)",""],["new_condition_with_then","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-new_condition_with_then","(node, new_condition)",""],["new_expression","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-new_expression","(outer_node, inner_node)",""],["new_line_needed_before_closing_brace?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-new_line_needed_before_closing_brace-3F","(node)","<p>Returns true for the case\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">a</span>,\n <span class=\"ruby-identifier\">b</span> <span class=\"ruby-comment\"># comment</span>\n].<span class=\"ruby-identifier\">some_method</span>\n</pre>\n"],["next_capture","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-next_capture","()",""],["next_line_empty?","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-next_line_empty-3F","(next_line)",""],["next_match_pos","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-next_match_pos","(body, match_node_pos, scope_root)",""],["next_temp_value","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-next_temp_value","()",""],["nil_check","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-nil_check","(node)",""],["nil_methods","RuboCop::Cop::Lint::SafeNavigationChain","RuboCop/Cop/Lint/SafeNavigationChain.html#method-i-nil_methods","()",""],["nil_style?","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-nil_style-3F","()",""],["no_acceptable_style!","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-no_acceptable_style-21","()",""],["no_acceptable_style?","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-no_acceptable_style-3F","()",""],["no_base_message","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-no_base_message","(lhs, rhs, node)",""],["no_definition_message","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-no_definition_message","(basename, file_path)",""],["no_elements_on_same_line?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-no_elements_on_same_line-3F","(node)",""],["no_mixed_keys_check","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-no_mixed_keys_check","(pairs)",""],["no_offense_counts_without_auto_gen_config?","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-no_offense_counts_without_auto_gen_config-3F","()",""],["no_space","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-no_space","(begin_pos, end_pos, msg)",""],["no_space_inside_left_brace","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-no_space_inside_left_brace","(left_brace, args_delimiter)",""],["no_surrounding_space?","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-no_surrounding_space-3F","(arg, equals, value)",""],["node_body","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-node_body","(node)",""],["node_body","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-node_body","(node)",""],["node_parts","RuboCop::AST::AndNode","RuboCop/AST/AndNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::CaseNode","RuboCop/AST/CaseNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::DefNode","RuboCop/AST/DefNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::EnsureNode","RuboCop/AST/EnsureNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-node_parts","()","<p>Custom destructuring method. This is used to normalize the branches for\n`if` and `unless` nodes, to aid …\n"],["node_parts","RuboCop::AST::KeywordSplatNode","RuboCop/AST/KeywordSplatNode.html#method-i-node_parts","()","<p>Custom destructuring method. This is used to normalize the branches for\n`pair` and `kwsplat` nodes, to …\n"],["node_parts","RuboCop::AST::OrNode","RuboCop/AST/OrNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::PairNode","RuboCop/AST/PairNode.html#method-i-node_parts","()","<p>Custom destructuring method. This is used to normalize the branches for\n`pair` and `kwsplat` nodes, to …\n"],["node_parts","RuboCop::AST::ResbodyNode","RuboCop/AST/ResbodyNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::SendNode","RuboCop/AST/SendNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::SuperNode","RuboCop/AST/SuperNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::UntilNode","RuboCop/AST/UntilNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::WhenNode","RuboCop/AST/WhenNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::WhileNode","RuboCop/AST/WhileNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_parts","RuboCop::AST::YieldNode","RuboCop/AST/YieldNode.html#method-i-node_parts","()","<p>Custom destructuring method. This can be used to normalize destructuring\nfor different variations of …\n"],["node_search","RuboCop::NodePattern::Macros","RuboCop/NodePattern/Macros.html#method-i-node_search","(method_name, compiler, on_match, prelude, called_from)",""],["node_search_all","RuboCop::NodePattern::Macros","RuboCop/NodePattern/Macros.html#method-i-node_search_all","(method_name, compiler, called_from)",""],["node_search_body","RuboCop::NodePattern::Macros","RuboCop/NodePattern/Macros.html#method-i-node_search_body","(method_name, trailing_params, prelude, match_code, on_match)",""],["node_search_first","RuboCop::NodePattern::Macros","RuboCop/NodePattern/Macros.html#method-i-node_search_first","(method_name, compiler, called_from)",""],["nodoc","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-nodoc","(node)",""],["nodoc?","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-nodoc-3F","(comment, require_all = false)",""],["nodoc_comment?","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-nodoc_comment-3F","(node, require_all = false)","<p>First checks if the :nodoc: comment is associated with the class/module.\nUnless the element is tagged …\n"],["non_comment_token_line_numbers","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-non_comment_token_line_numbers","()",""],["non_complex_expression?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-non_complex_expression-3F","(condition)","<p>Anything that is not a variable, constant, or method/.method call will be\ncounted as a complex expression. …\n"],["non_complex_send?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-non_complex_send-3F","(node)",""],["non_eligible_body?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-non_eligible_body-3F","(body)",""],["non_eligible_condition?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-non_eligible_condition-3F","(condition)",""],["non_eligible_if?","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-non_eligible_if-3F","(node)",""],["non_eligible_node?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-non_eligible_node-3F","(node)",""],["non_equality_operator?","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-non_equality_operator-3F","(operator)",""],["non_modifier_range","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-non_modifier_range","(node)",""],["non_modifier_then?","RuboCop::Cop::Style::MultilineIfThen","RuboCop/Cop/Style/MultilineIfThen.html#method-i-non_modifier_then-3F","(node)",""],["non_public?","RuboCop::Cop::DefNode","RuboCop/Cop/DefNode.html#method-i-non_public-3F","(node)",""],["non_rails","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-non_rails","()",""],["non_redundant_merge?","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-non_redundant_merge-3F","(node, receiver, pairs)",""],["non_redundant_pairs?","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-non_redundant_pairs-3F","(receiver, pairs)",""],["non_redundant_value_used?","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-non_redundant_value_used-3F","(receiver, node)",""],["non_splat?","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-non_splat-3F","(condition)",""],["non_string_argument?","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-non_string_argument-3F","(node)",""],["non_void_context","RuboCop::Cop::Lint::ReturnInVoidContext","RuboCop/Cop/Lint/ReturnInVoidContext.html#method-i-non_void_context","(return_node)",""],["noncommutative_operator?","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-noncommutative_operator-3F","(operator)",""],["not_to_receiver","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-not_to_receiver","(node, method_call)",""],["notice","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-notice","()",""],["notice_found?","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-notice_found-3F","(processed_source)",""],["obsolete_cops","RuboCop::Config","RuboCop/Config.html#method-i-obsolete_cops","()",""],["obsolete_parameter_message","RuboCop::Config","RuboCop/Config.html#method-i-obsolete_parameter_message","(cop, parameter, alternative)",""],["obsolete_parameters","RuboCop::Config","RuboCop/Config.html#method-i-obsolete_parameters","()",""],["octal_literal_type","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-octal_literal_type","(literal)",""],["octal_zero_only?","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-octal_zero_only-3F","()",""],["of","RuboCop::Cop::VariableForce::Branch","RuboCop/Cop/VariableForce/Branch.html#method-c-of","(target_node, scope: nil)",""],["offending_node?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-offending_node-3F","(node)",""],["offending_node?","RuboCop::Cop::Rails::Exit","RuboCop/Cop/Rails/Exit.html#method-i-offending_node-3F","(node)",""],["offending_range","RuboCop::Cop::InternalAffairs::RedundantLocationArgument","RuboCop/Cop/InternalAffairs/RedundantLocationArgument.html#method-i-offending_range","(node)",""],["offending_range","RuboCop::Cop::InternalAffairs::RedundantMessageArgument","RuboCop/Cop/InternalAffairs/RedundantMessageArgument.html#method-i-offending_range","(node)",""],["offending_range","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-offending_range","(body_node, indentation)",""],["offending_range","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-offending_range","(node, lhs, rhs, given_style)",""],["offending_range","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-offending_range","(node, lhs, rhs, given_style)",""],["offending_range","RuboCop::Cop::Style::MinMax","RuboCop/Cop/Style/MinMax.html#method-i-offending_range","(node)",""],["offending_selector?","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-offending_selector-3F","(node, selector)",""],["offending_selector?","RuboCop::Cop::Style::PreferredHashMethods","RuboCop/Cop/Style/PreferredHashMethods.html#method-i-offending_selector-3F","(method_name)",""],["offense","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-offense","(body_node, indentation, style)",""],["offense","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-offense","(range, msg)",""],["offense","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-offense","(op, with_space, right_operand)",""],["offense","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-offense","(begin_pos, end_pos, msg, &block)",""],["offense","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-offense","(node, first_param, second_param)",""],["offense","RuboCop::Cop::Style::Encoding","RuboCop/Cop/Style/Encoding.html#method-i-offense","(processed_source, line_number)",""],["offense","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-offense","(processed_source)",""],["offense","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-offense","(node, msg)",""],["offense","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-offense","(node, method_name, block_method_name)",""],["offense?","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-offense-3F","(t1, t2, expect_space)",""],["offense?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-offense-3F","(node)",""],["offense?","RuboCop::Cop::Style::CharacterLiteral","RuboCop/Cop/Style/CharacterLiteral.html#method-i-offense-3F","(node)",""],["offense?","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-offense-3F","(node)",""],["offense?","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-offense-3F","(node)",""],["offense?","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-offense-3F","(node)",""],["offense?","RuboCop::Cop::Style::StringLiteralsInInterpolation","RuboCop/Cop/Style/StringLiteralsInInterpolation.html#method-i-offense-3F","(node)",""],["offense?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-offense-3F","(node)",""],["offense_array_node?","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-offense_array_node-3F","(node)",""],["offense_detected","RuboCop::Cop::Layout::TrailingBlankLines","RuboCop/Cop/Layout/TrailingBlankLines.html#method-i-offense_detected","(sb, wanted_blank_lines, blank_lines, whitespace_at_end)",""],["offense_for_levels","RuboCop::Cop::Performance::FlatMap","RuboCop/Cop/Performance/FlatMap.html#method-i-offense_for_levels","(node, map_node, first_method, flatten)",""],["offense_for_method","RuboCop::Cop::Performance::FlatMap","RuboCop/Cop/Performance/FlatMap.html#method-i-offense_for_method","(node, map_node, first_method, flatten)",""],["offense_hash_node?","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-offense_hash_node-3F","(node)",""],["offense_location","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-offense_location","(offense_node)",""],["offense_message","RuboCop::Cop::Layout::EndOfLine","RuboCop/Cop/Layout/EndOfLine.html#method-i-offense_message","(line)",""],["offense_message","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-offense_message","(op, with_space, right_operand)",""],["offense_node","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-offense_node","(body)",""],["offense_range","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-offense_range","(rescues)",""],["offenses","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-offenses","(processed_source)",""],["offenses","RuboCop::Formatter::SimpleTextFormatter::Report","RuboCop/Formatter/SimpleTextFormatter/Report.html#method-i-offenses","()",""],["offenses_from_processed_source","RuboCop::Cop::Lint::Syntax","RuboCop/Cop/Lint/Syntax.html#method-c-offenses_from_processed_source","(processed_source, config, options)",""],["offensive?","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-offensive-3F","(method, method_args)",""],["offensive?","RuboCop::Cop::Style::CommentedKeyword","RuboCop/Cop/Style/CommentedKeyword.html#method-i-offensive-3F","(line)",""],["offset","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-offset","(node)",""],["offset","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-offset","()","<p>The normal offset, i.e., the distance from the punctuation token where a\nspace should be, is 1.\n"],["offset_provided?","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-offset_provided-3F","(node)","<p>Time.new can be called with a time zone offset When it is, that should be\nconsidered safe Example: Time.new …\n"],["on_alias","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-on_alias","(node)",""],["on_alias","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-on_alias","(node)",""],["on_and","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-on_and","(node)",""],["on_and","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_and","(node)",""],["on_and","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_and","(node)",""],["on_and","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-on_and","(node)",""],["on_and","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_and","(node)",""],["on_and","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-on_and","(node)",""],["on_and_asgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_and_asgn","(node)",""],["on_and_asgn","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_and_asgn","(node)",""],["on_arg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_arg","(node)",""],["on_arg","RuboCop::Cop::Naming::VariableNumber","RuboCop/Cop/Naming/VariableNumber.html#method-i-on_arg","(node)",""],["on_args","RuboCop::Cop::Metrics::ParameterLists","RuboCop/Cop/Metrics/ParameterLists.html#method-i-on_args","(node)",""],["on_args","RuboCop::Cop::Style::OptionHash","RuboCop/Cop/Style/OptionHash.html#method-i-on_args","(node)",""],["on_args","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_args","(node)",""],["on_argument","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_argument","(node)",""],["on_array","RuboCop::Cop::Layout::AlignArray","RuboCop/Cop/Layout/AlignArray.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Layout::FirstArrayElementLineBreak","RuboCop/Cop/Layout/FirstArrayElementLineBreak.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Layout::MultilineArrayBraceLayout","RuboCop/Cop/Layout/MultilineArrayBraceLayout.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral","RuboCop/Cop/Layout/SpaceInsideArrayPercentLiteral.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Lint::PercentStringArray","RuboCop/Cop/Lint/PercentStringArray.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Lint::PercentSymbolArray","RuboCop/Cop/Lint/PercentSymbolArray.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Style::MinMax","RuboCop/Cop/Style/MinMax.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Style::SymbolArray","RuboCop/Cop/Style/SymbolArray.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Style::TrailingCommaInLiteral","RuboCop/Cop/Style/TrailingCommaInLiteral.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Style::UnneededCapitalW","RuboCop/Cop/Style/UnneededCapitalW.html#method-i-on_array","(node)",""],["on_array","RuboCop::Cop::Style::WordArray","RuboCop/Cop/Style/WordArray.html#method-i-on_array","(node)",""],["on_assignment","RuboCop::Cop::Style::MutableConstant","RuboCop/Cop/Style/MutableConstant.html#method-i-on_assignment","(value)",""],["on_attr","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-on_attr","(node, attr_name, args)",""],["on_begin","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-on_begin","(node)",""],["on_begin","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-on_begin","(node)","<p>We operate on `begin` nodes, instead of using `OnMethodDef`, so that we can\nwalk over pairs of consecutive …\n"],["on_begin","RuboCop::Cop::Layout::IndentationConsistency","RuboCop/Cop/Layout/IndentationConsistency.html#method-i-on_begin","(node)",""],["on_begin","RuboCop::Cop::Lint::EmptyExpression","RuboCop/Cop/Lint/EmptyExpression.html#method-i-on_begin","(node)",""],["on_begin","RuboCop::Cop::Lint::UnreachableCode","RuboCop/Cop/Lint/UnreachableCode.html#method-i-on_begin","(node)",""],["on_begin","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-on_begin","(node)",""],["on_begin","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-on_begin","(node)",""],["on_binary","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_binary","(node)",""],["on_block","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::BlockEndNewline","RuboCop/Cop/Layout/BlockEndNewline.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::EmptyLinesAroundBlockBody","RuboCop/Cop/Layout/EmptyLinesAroundBlockBody.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::MultilineBlockLayout","RuboCop/Cop/Layout/MultilineBlockLayout.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Lint::NextWithoutAccumulator","RuboCop/Cop/Lint/NextWithoutAccumulator.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Lint::RedundantWithIndex","RuboCop/Cop/Lint/RedundantWithIndex.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Lint::RedundantWithObject","RuboCop/Cop/Lint/RedundantWithObject.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Metrics::BlockLength","RuboCop/Cop/Metrics/BlockLength.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Metrics::MethodLength","RuboCop/Cop/Metrics/MethodLength.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Performance::CompareWithBlock","RuboCop/Cop/Performance/CompareWithBlock.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Performance::RedundantSortBy","RuboCop/Cop/Performance/RedundantSortBy.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Performance::TimesMap","RuboCop/Cop/Performance/TimesMap.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::CollectionMethods","RuboCop/Cop/Style/CollectionMethods.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::EachForSimpleLoop","RuboCop/Cop/Style/EachForSimpleLoop.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::EachWithObject","RuboCop/Cop/Style/EachWithObject.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::For","RuboCop/Cop/Style/For.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::MethodCalledOnDoEndBlock","RuboCop/Cop/Style/MethodCalledOnDoEndBlock.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::MultilineBlockChain","RuboCop/Cop/Style/MultilineBlockChain.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::Proc","RuboCop/Cop/Style/Proc.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-on_block","(node)",""],["on_block","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-on_block","(node)",""],["on_blockarg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_blockarg","(node)",""],["on_blockarg","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_blockarg","(node)",""],["on_break","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_break","(node)",""],["on_case","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-on_case","(case_node)",""],["on_case","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_case","(case_node)",""],["on_case","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Lint::DuplicateCaseCondition","RuboCop/Cop/Lint/DuplicateCaseCondition.html#method-i-on_case","(case_node)",""],["on_case","RuboCop::Cop::Lint::EmptyWhen","RuboCop/Cop/Lint/EmptyWhen.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_case","(case_node)",""],["on_case","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-on_case","(case_node)",""],["on_case","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Style::EmptyCaseCondition","RuboCop/Cop/Style/EmptyCaseCondition.html#method-i-on_case","(case_node)",""],["on_case","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-on_case","(node)",""],["on_case","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-on_case","(node)",""],["on_casgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_casgn","(node)",""],["on_casgn","RuboCop::Cop::Naming::ConstantName","RuboCop/Cop/Naming/ConstantName.html#method-i-on_casgn","(node)",""],["on_casgn","RuboCop::Cop::Rails::RelativeDateConstant","RuboCop/Cop/Rails/RelativeDateConstant.html#method-i-on_casgn","(node)",""],["on_casgn","RuboCop::Cop::Style::MutableConstant","RuboCop/Cop/Style/MutableConstant.html#method-i-on_casgn","(node)",""],["on_class","RuboCop::Cop::EnforceSuperclass","RuboCop/Cop/EnforceSuperclass.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Layout::EmptyLinesAroundClassBody","RuboCop/Cop/Layout/EmptyLinesAroundClassBody.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Lint::InheritException","RuboCop/Cop/Lint/InheritException.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Metrics::ClassLength","RuboCop/Cop/Metrics/ClassLength.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Naming::ClassAndModuleCamelCase","RuboCop/Cop/Naming/ClassAndModuleCamelCase.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Style::ClassMethods","RuboCop/Cop/Style/ClassMethods.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-on_class","(node)",""],["on_class","RuboCop::Cop::Style::StructInheritance","RuboCop/Cop/Style/StructInheritance.html#method-i-on_class","(node)",""],["on_conditionals","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_conditionals","(node)",""],["on_const","RuboCop::Cop::Lint::UnifiedInteger","RuboCop/Cop/Lint/UnifiedInteger.html#method-i-on_const","(node)",""],["on_const","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-on_const","(node)",""],["on_const","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-on_const","(node)",""],["on_csend","RuboCop::Cop::Rails::OutputSafety","RuboCop/Cop/Rails/OutputSafety.html#method-i-on_csend","(node)",""],["on_cvasgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_cvasgn","(node)",""],["on_cvasgn","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_cvasgn","(node)",""],["on_cvasgn","RuboCop::Cop::Naming::VariableNumber","RuboCop/Cop/Naming/VariableNumber.html#method-i-on_cvasgn","(node)",""],["on_cvasgn","RuboCop::Cop::Style::ClassVars","RuboCop/Cop/Style/ClassVars.html#method-i-on_cvasgn","(node)",""],["on_cvasgn","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-on_cvasgn","(node)",""],["on_def","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::EmptyLinesAroundMethodBody","RuboCop/Cop/Layout/EmptyLinesAroundMethodBody.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::FirstMethodParameterLineBreak","RuboCop/Cop/Layout/FirstMethodParameterLineBreak.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout","RuboCop/Cop/Layout/MultilineMethodDefinitionBraceLayout.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Layout::SpaceAfterMethodName","RuboCop/Cop/Layout/SpaceAfterMethodName.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Lint::DefEndAlignment","RuboCop/Cop/Lint/DefEndAlignment.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Lint::NestedMethodDefinition","RuboCop/Cop/Lint/NestedMethodDefinition.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Lint::UselessSetterCall","RuboCop/Cop/Lint/UselessSetterCall.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::MethodComplexity","RuboCop/Cop/MethodComplexity.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Metrics::MethodLength","RuboCop/Cop/Metrics/MethodLength.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Naming::AccessorMethodName","RuboCop/Cop/Naming/AccessorMethodName.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Naming::MethodName","RuboCop/Cop/Naming/MethodName.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Performance::RedundantBlockCall","RuboCop/Cop/Performance/RedundantBlockCall.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::DefWithParentheses","RuboCop/Cop/Style/DefWithParentheses.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::DocumentationMethod","RuboCop/Cop/Style/DocumentationMethod.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::MethodMissing","RuboCop/Cop/Style/MethodMissing.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::OptionalArguments","RuboCop/Cop/Style/OptionalArguments.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::RedundantBegin","RuboCop/Cop/Style/RedundantBegin.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_def","(node)","<p>Using self.x to distinguish from local variable x\n"],["on_def","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-on_def","(node)",""],["on_def","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-on_def","(node)",""],["on_defined?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_defined-3F","(node)",""],["on_defs","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::EmptyLinesAroundMethodBody","RuboCop/Cop/Layout/EmptyLinesAroundMethodBody.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::FirstMethodParameterLineBreak","RuboCop/Cop/Layout/FirstMethodParameterLineBreak.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout","RuboCop/Cop/Layout/MultilineMethodDefinitionBraceLayout.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Layout::SpaceAfterMethodName","RuboCop/Cop/Layout/SpaceAfterMethodName.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Lint::DefEndAlignment","RuboCop/Cop/Lint/DefEndAlignment.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Lint::NestedMethodDefinition","RuboCop/Cop/Lint/NestedMethodDefinition.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Lint::UselessSetterCall","RuboCop/Cop/Lint/UselessSetterCall.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::MethodComplexity","RuboCop/Cop/MethodComplexity.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Metrics::MethodLength","RuboCop/Cop/Metrics/MethodLength.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Naming::AccessorMethodName","RuboCop/Cop/Naming/AccessorMethodName.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Naming::MethodName","RuboCop/Cop/Naming/MethodName.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::DefWithParentheses","RuboCop/Cop/Style/DefWithParentheses.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::DocumentationMethod","RuboCop/Cop/Style/DocumentationMethod.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::EmptyMethod","RuboCop/Cop/Style/EmptyMethod.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::MethodMissing","RuboCop/Cop/Style/MethodMissing.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::RedundantBegin","RuboCop/Cop/Style/RedundantBegin.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::RedundantReturn","RuboCop/Cop/Style/RedundantReturn.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::SingleLineMethods","RuboCop/Cop/Style/SingleLineMethods.html#method-i-on_defs","(node)",""],["on_defs","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-on_defs","(node)",""],["on_dstr","Heredoc","Heredoc.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Layout::SpaceInsideStringInterpolation","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Lint::EmptyInterpolation","RuboCop/Cop/Lint/EmptyInterpolation.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Lint::ImplicitStringConcatenation","RuboCop/Cop/Lint/ImplicitStringConcatenation.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Lint::LiteralInInterpolation","RuboCop/Cop/Lint/LiteralInInterpolation.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Lint::StringConversionInInterpolation","RuboCop/Cop/Lint/StringConversionInInterpolation.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Rails::FilePath","RuboCop/Cop/Rails/FilePath.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-on_dstr","(node)",""],["on_dstr","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-on_dstr","(node)",""],["on_eflipflop","RuboCop::Cop::Style::FlipFlop","RuboCop/Cop/Style/FlipFlop.html#method-i-on_eflipflop","(node)",""],["on_ensure","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_ensure","(node)",""],["on_ensure","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-on_ensure","(node)",""],["on_ensure","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_ensure","(node)",""],["on_ensure","RuboCop::Cop::Lint::EmptyEnsure","RuboCop/Cop/Lint/EmptyEnsure.html#method-i-on_ensure","(node)",""],["on_ensure","RuboCop::Cop::Lint::EnsureReturn","RuboCop/Cop/Lint/EnsureReturn.html#method-i-on_ensure","(node)",""],["on_erange","RuboCop::Cop::Layout::SpaceInsideRangeLiteral","RuboCop/Cop/Layout/SpaceInsideRangeLiteral.html#method-i-on_erange","(node)",""],["on_float","RuboCop::Cop::Lint::FloatOutOfRange","RuboCop/Cop/Lint/FloatOutOfRange.html#method-i-on_float","(node)",""],["on_float","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-on_float","(node)",""],["on_for","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_for","(node)",""],["on_for","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_for","(node)",""],["on_for","RuboCop::Cop::Style::For","RuboCop/Cop/Style/For.html#method-i-on_for","(node)",""],["on_for","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-on_for","(node)",""],["on_gvar","RuboCop::Cop::Style::GlobalVars","RuboCop/Cop/Style/GlobalVars.html#method-i-on_gvar","(node)",""],["on_gvar","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-on_gvar","(node)",""],["on_gvasgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_gvasgn","(node)",""],["on_gvasgn","RuboCop::Cop::Style::GlobalVars","RuboCop/Cop/Style/GlobalVars.html#method-i-on_gvasgn","(node)",""],["on_gvasgn","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-on_gvasgn","(node)",""],["on_hash","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Layout::FirstHashElementLineBreak","RuboCop/Cop/Layout/FirstHashElementLineBreak.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Layout::MultilineHashBraceLayout","RuboCop/Cop/Layout/MultilineHashBraceLayout.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Lint::DuplicatedKey","RuboCop/Cop/Lint/DuplicatedKey.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-on_hash","(node)",""],["on_hash","RuboCop::Cop::Style::TrailingCommaInLiteral","RuboCop/Cop/Style/TrailingCommaInLiteral.html#method-i-on_hash","(node)",""],["on_heredoc","Heredoc","Heredoc.html#method-i-on_heredoc","(_node)",""],["on_heredoc","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-on_heredoc","(node)",""],["on_heredoc","RuboCop::Cop::Naming::HeredocDelimiterCase","RuboCop/Cop/Naming/HeredocDelimiterCase.html#method-i-on_heredoc","(node)",""],["on_heredoc","RuboCop::Cop::Naming::HeredocDelimiterNaming","RuboCop/Cop/Naming/HeredocDelimiterNaming.html#method-i-on_heredoc","(node)",""],["on_if","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-on_if","(node, base = nil)",""],["on_if","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_if","(node, base = node)",""],["on_if","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Lint::ConditionPosition","RuboCop/Cop/Lint/ConditionPosition.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Lint::ElseLayout","RuboCop/Cop/Lint/ElseLayout.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::OnNormalIfUnless","RuboCop/Cop/OnNormalIfUnless.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Rails::Blank","RuboCop/Cop/Rails/Blank.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::GuardClause","RuboCop/Cop/Style/GuardClause.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::IfInsideElse","RuboCop/Cop/Style/IfInsideElse.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::IfUnlessModifierOfIfUnless","RuboCop/Cop/Style/IfUnlessModifierOfIfUnless.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::MultilineIfModifier","RuboCop/Cop/Style/MultilineIfModifier.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::MultilineTernaryOperator","RuboCop/Cop/Style/MultilineTernaryOperator.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::NegatedIf","RuboCop/Cop/Style/NegatedIf.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::NestedTernaryOperator","RuboCop/Cop/Style/NestedTernaryOperator.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::ParenthesesAroundCondition","RuboCop/Cop/Style/ParenthesesAroundCondition.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-on_if","(node)",""],["on_if","RuboCop::Cop::Style::UnlessElse","RuboCop/Cop/Style/UnlessElse.html#method-i-on_if","(node)",""],["on_iflipflop","RuboCop::Cop::Style::FlipFlop","RuboCop/Cop/Style/FlipFlop.html#method-i-on_iflipflop","(node)",""],["on_int","RuboCop::Cop::Style::NumericLiteralPrefix","RuboCop/Cop/Style/NumericLiteralPrefix.html#method-i-on_int","(node)",""],["on_int","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-on_int","(node)",""],["on_irange","RuboCop::Cop::Layout::SpaceInsideRangeLiteral","RuboCop/Cop/Layout/SpaceInsideRangeLiteral.html#method-i-on_irange","(node)",""],["on_ivasgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_ivasgn","(node)",""],["on_ivasgn","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_ivasgn","(node)",""],["on_ivasgn","RuboCop::Cop::Naming::VariableNumber","RuboCop/Cop/Naming/VariableNumber.html#method-i-on_ivasgn","(node)",""],["on_ivasgn","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-on_ivasgn","(node)",""],["on_kwarg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_kwarg","(node)",""],["on_kwbegin","RuboCop::Cop::Layout::EmptyLinesAroundBeginBody","RuboCop/Cop/Layout/EmptyLinesAroundBeginBody.html#method-i-on_kwbegin","(node)",""],["on_kwbegin","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-on_kwbegin","(node)",""],["on_kwbegin","RuboCop::Cop::Layout::IndentationConsistency","RuboCop/Cop/Layout/IndentationConsistency.html#method-i-on_kwbegin","(node)",""],["on_kwbegin","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_kwbegin","(node)",""],["on_kwbegin","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_kwbegin","(node)",""],["on_kwbegin","RuboCop::Cop::Lint::UnreachableCode","RuboCop/Cop/Lint/UnreachableCode.html#method-i-on_kwbegin","(node)",""],["on_kwoptarg","RuboCop::Cop::Layout::SpaceAfterColon","RuboCop/Cop/Layout/SpaceAfterColon.html#method-i-on_kwoptarg","(node)",""],["on_kwoptarg","RuboCop::Cop::Lint::CircularArgumentReference","RuboCop/Cop/Lint/CircularArgumentReference.html#method-i-on_kwoptarg","(node)",""],["on_kwoptarg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_kwoptarg","(node)",""],["on_kwrestarg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_kwrestarg","(node)",""],["on_lvasgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_lvasgn","(node)",""],["on_lvasgn","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_lvasgn","(node)",""],["on_lvasgn","RuboCop::Cop::Naming::VariableNumber","RuboCop/Cop/Naming/VariableNumber.html#method-i-on_lvasgn","(node)",""],["on_lvasgn","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-on_lvasgn","(node)",""],["on_lvasgn","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_lvasgn","(node)",""],["on_masgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_masgn","(node)",""],["on_masgn","RuboCop::Cop::Rails::RelativeDateConstant","RuboCop/Cop/Rails/RelativeDateConstant.html#method-i-on_masgn","(node)",""],["on_masgn","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-on_masgn","(node)",""],["on_masgn","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-on_masgn","(node)",""],["on_match_current_line","RuboCop::Cop::Lint::RegexpAsCondition","RuboCop/Cop/Lint/RegexpAsCondition.html#method-i-on_match_current_line","(node)",""],["on_method_def","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-on_method_def","(node)",""],["on_module","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Layout::EmptyLinesAroundModuleBody","RuboCop/Cop/Layout/EmptyLinesAroundModuleBody.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Metrics::ModuleLength","RuboCop/Cop/Metrics/ModuleLength.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Naming::ClassAndModuleCamelCase","RuboCop/Cop/Naming/ClassAndModuleCamelCase.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Style::ClassMethods","RuboCop/Cop/Style/ClassMethods.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Style::Documentation","RuboCop/Cop/Style/Documentation.html#method-i-on_module","(node)",""],["on_module","RuboCop::Cop::Style::ModuleFunction","RuboCop/Cop/Style/ModuleFunction.html#method-i-on_module","(node)",""],["on_next","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_next","(node)",""],["on_normal_if_unless","RuboCop::Cop::Style::EmptyElse","RuboCop/Cop/Style/EmptyElse.html#method-i-on_normal_if_unless","(node)",""],["on_normal_if_unless","RuboCop::Cop::Style::IfWithSemicolon","RuboCop/Cop/Style/IfWithSemicolon.html#method-i-on_normal_if_unless","(node)",""],["on_normal_if_unless","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-on_normal_if_unless","(node)",""],["on_normal_if_unless","RuboCop::Cop::Style::MultilineIfThen","RuboCop/Cop/Style/MultilineIfThen.html#method-i-on_normal_if_unless","(node)",""],["on_normal_if_unless","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-on_normal_if_unless","(node)",""],["on_nth_ref","RuboCop::Cop::Style::PerlBackrefs","RuboCop/Cop/Style/PerlBackrefs.html#method-i-on_nth_ref","(node)",""],["on_op_asgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_op_asgn","(node)",""],["on_op_asgn","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_op_asgn","(node)",""],["on_optarg","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-on_optarg","(node)",""],["on_optarg","RuboCop::Cop::Lint::CircularArgumentReference","RuboCop/Cop/Lint/CircularArgumentReference.html#method-i-on_optarg","(node)",""],["on_optarg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_optarg","(node)",""],["on_or","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-on_or","(node)",""],["on_or","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_or","(node)",""],["on_or","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_or","(node)",""],["on_or","RuboCop::Cop::Performance::DoubleStartEndWith","RuboCop/Cop/Performance/DoubleStartEndWith.html#method-i-on_or","(node)",""],["on_or","RuboCop::Cop::Rails::Blank","RuboCop/Cop/Rails/Blank.html#method-i-on_or","(node)",""],["on_or","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-on_or","(node)",""],["on_or","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_or","(node)",""],["on_or_asgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_or_asgn","(node)",""],["on_or_asgn","RuboCop::Cop::Rails::RelativeDateConstant","RuboCop/Cop/Rails/RelativeDateConstant.html#method-i-on_or_asgn","(node)",""],["on_or_asgn","RuboCop::Cop::Style::MultilineMemoization","RuboCop/Cop/Style/MultilineMemoization.html#method-i-on_or_asgn","(node)",""],["on_or_asgn","RuboCop::Cop::Style::MutableConstant","RuboCop/Cop/Style/MutableConstant.html#method-i-on_or_asgn","(node)",""],["on_or_asgn","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_or_asgn","(node)","<p>Assignment of self.x\n"],["on_pair","RuboCop::Cop::Layout::SpaceAfterColon","RuboCop/Cop/Layout/SpaceAfterColon.html#method-i-on_pair","(node)",""],["on_pair","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_pair","(node)",""],["on_percent_literal","RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral","RuboCop/Cop/Layout/SpaceInsideArrayPercentLiteral.html#method-i-on_percent_literal","(node)",""],["on_percent_literal","RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html#method-i-on_percent_literal","(node)",""],["on_percent_literal","RuboCop::Cop::Lint::PercentStringArray","RuboCop/Cop/Lint/PercentStringArray.html#method-i-on_percent_literal","(node)",""],["on_percent_literal","RuboCop::Cop::Lint::PercentSymbolArray","RuboCop/Cop/Lint/PercentSymbolArray.html#method-i-on_percent_literal","(node)",""],["on_percent_literal","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_percent_literal","(node)",""],["on_percent_literal","RuboCop::Cop::Style::PercentQLiterals","RuboCop/Cop/Style/PercentQLiterals.html#method-i-on_percent_literal","(node)",""],["on_percent_literal","RuboCop::Cop::Style::UnneededCapitalW","RuboCop/Cop/Style/UnneededCapitalW.html#method-i-on_percent_literal","(node)",""],["on_postexe","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_postexe","(node)",""],["on_postexe","RuboCop::Cop::Lint::EndInMethod","RuboCop/Cop/Lint/EndInMethod.html#method-i-on_postexe","(node)",""],["on_postexe","RuboCop::Cop::Style::EndBlock","RuboCop/Cop/Style/EndBlock.html#method-i-on_postexe","(node)",""],["on_preexe","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_preexe","(node)",""],["on_preexe","RuboCop::Cop::Style::BeginBlock","RuboCop/Cop/Style/BeginBlock.html#method-i-on_preexe","(node)",""],["on_regexp","RuboCop::Cop::StringHelp","RuboCop/Cop/StringHelp.html#method-i-on_regexp","(node)",""],["on_regexp","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_regexp","(node)",""],["on_regexp","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-on_regexp","(node)",""],["on_regexp","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-on_regexp","(node)",""],["on_resbody","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Lint::HandleExceptions","RuboCop/Cop/Lint/HandleExceptions.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Lint::RescueException","RuboCop/Cop/Lint/RescueException.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Lint::RescueType","RuboCop/Cop/Lint/RescueType.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Lint::RescueWithoutErrorClass","RuboCop/Cop/Lint/RescueWithoutErrorClass.html#method-i-on_resbody","(node)",""],["on_resbody","RuboCop::Cop::Style::RescueModifier","RuboCop/Cop/Style/RescueModifier.html#method-i-on_resbody","(node)",""],["on_rescue","RuboCop::Cop::Layout::ElseAlignment","RuboCop/Cop/Layout/ElseAlignment.html#method-i-on_rescue","(node)",""],["on_rescue","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_rescue","(node)",""],["on_rescue","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_rescue","(node)",""],["on_rescue","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-on_rescue","(node)",""],["on_rescue","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-on_rescue","(node)",""],["on_restarg","RuboCop::Cop::Naming::VariableName","RuboCop/Cop/Naming/VariableName.html#method-i-on_restarg","(node)",""],["on_return","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_return","(node)",""],["on_return","RuboCop::Cop::Lint::NonLocalExitFromIterator","RuboCop/Cop/Lint/NonLocalExitFromIterator.html#method-i-on_return","(return_node)",""],["on_return","RuboCop::Cop::Lint::ReturnInVoidContext","RuboCop/Cop/Lint/ReturnInVoidContext.html#method-i-on_return","(return_node)",""],["on_return","RuboCop::Cop::Style::MinMax","RuboCop/Cop/Style/MinMax.html#method-i-on_return","(node)",""],["on_return","RuboCop::Cop::Style::ReturnNil","RuboCop/Cop/Style/ReturnNil.html#method-i-on_return","(node)",""],["on_same_line?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-on_same_line-3F","(a, b)",""],["on_sclass","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-on_sclass","(node)",""],["on_sclass","RuboCop::Cop::Layout::EmptyLinesAroundClassBody","RuboCop/Cop/Layout/EmptyLinesAroundClassBody.html#method-i-on_sclass","(node)",""],["on_sclass","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-on_sclass","(node)",""],["on_send","RuboCop::Cop::Bundler::InsecureProtocolSource","RuboCop/Cop/Bundler/InsecureProtocolSource.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::CheckAssignment","RuboCop/Cop/CheckAssignment.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::EnforceSuperclass","RuboCop/Cop/EnforceSuperclass.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::InternalAffairs::DeprecatedPositionalArguments","RuboCop/Cop/InternalAffairs/DeprecatedPositionalArguments.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::InternalAffairs::NodeTypePredicate","RuboCop/Cop/InternalAffairs/NodeTypePredicate.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::InternalAffairs::OffenseLocationKeyword","RuboCop/Cop/InternalAffairs/OffenseLocationKeyword.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::InternalAffairs::RedundantLocationArgument","RuboCop/Cop/InternalAffairs/RedundantLocationArgument.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::InternalAffairs::RedundantMessageArgument","RuboCop/Cop/InternalAffairs/RedundantMessageArgument.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::AlignHash","RuboCop/Cop/Layout/AlignHash.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::ClosingParenthesisIndentation","RuboCop/Cop/Layout/ClosingParenthesisIndentation.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::FirstMethodArgumentLineBreak","RuboCop/Cop/Layout/FirstMethodArgumentLineBreak.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::IndentArray","RuboCop/Cop/Layout/IndentArray.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::MultilineMethodCallBraceLayout","RuboCop/Cop/Layout/MultilineMethodCallBraceLayout.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::SpaceAfterNot","RuboCop/Cop/Layout/SpaceAfterNot.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::SpaceBeforeFirstArg","RuboCop/Cop/Layout/SpaceBeforeFirstArg.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::AmbiguousBlockAssociation","RuboCop/Cop/Lint/AmbiguousBlockAssociation.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::Debugger","RuboCop/Cop/Lint/Debugger.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::DefEndAlignment","RuboCop/Cop/Lint/DefEndAlignment.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::DeprecatedClassMethods","RuboCop/Cop/Lint/DeprecatedClassMethods.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::EachWithObjectArgument","RuboCop/Cop/Lint/EachWithObjectArgument.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::MultipleCompare","RuboCop/Cop/Lint/MultipleCompare.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::ParenthesesAsGroupedExpression","RuboCop/Cop/Lint/ParenthesesAsGroupedExpression.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::RandOne","RuboCop/Cop/Lint/RandOne.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::RequireParentheses","RuboCop/Cop/Lint/RequireParentheses.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::SafeNavigationChain","RuboCop/Cop/Lint/SafeNavigationChain.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::UnneededRequireStatement","RuboCop/Cop/Lint/UnneededRequireStatement.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::UriEscapeUnescape","RuboCop/Cop/Lint/UriEscapeUnescape.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::UriRegexp","RuboCop/Cop/Lint/UriRegexp.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Lint::UselessComparison","RuboCop/Cop/Lint/UselessComparison.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::Caller","RuboCop/Cop/Performance/Caller.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::Casecmp","RuboCop/Cop/Performance/Casecmp.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::Count","RuboCop/Cop/Performance/Count.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::Detect","RuboCop/Cop/Performance/Detect.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::EndWith","RuboCop/Cop/Performance/EndWith.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::FixedSize","RuboCop/Cop/Performance/FixedSize.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::FlatMap","RuboCop/Cop/Performance/FlatMap.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::LstripRstrip","RuboCop/Cop/Performance/LstripRstrip.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::RangeInclude","RuboCop/Cop/Performance/RangeInclude.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::RedundantMatch","RuboCop/Cop/Performance/RedundantMatch.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::ReverseEach","RuboCop/Cop/Performance/ReverseEach.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::Size","RuboCop/Cop/Performance/Size.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::StartWith","RuboCop/Cop/Performance/StartWith.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::TimesMap","RuboCop/Cop/Performance/TimesMap.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::UnfreezeString","RuboCop/Cop/Performance/UnfreezeString.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Performance::UriDefaultParser","RuboCop/Cop/Performance/UriDefaultParser.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::ActiveSupportAliases","RuboCop/Cop/Rails/ActiveSupportAliases.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::Blank","RuboCop/Cop/Rails/Blank.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::DelegateAllowBlank","RuboCop/Cop/Rails/DelegateAllowBlank.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::DynamicFindBy","RuboCop/Cop/Rails/DynamicFindBy.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::EnumUniqueness","RuboCop/Cop/Rails/EnumUniqueness.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::Exit","RuboCop/Cop/Rails/Exit.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::FilePath","RuboCop/Cop/Rails/FilePath.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::FindBy","RuboCop/Cop/Rails/FindBy.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::FindEach","RuboCop/Cop/Rails/FindEach.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::HasAndBelongsToMany","RuboCop/Cop/Rails/HasAndBelongsToMany.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::HasManyOrHasOneDependent","RuboCop/Cop/Rails/HasManyOrHasOneDependent.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::HttpPositionalArguments","RuboCop/Cop/Rails/HttpPositionalArguments.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::NotNullColumn","RuboCop/Cop/Rails/NotNullColumn.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::Output","RuboCop/Cop/Rails/Output.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::OutputSafety","RuboCop/Cop/Rails/OutputSafety.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::ReadWriteAttribute","RuboCop/Cop/Rails/ReadWriteAttribute.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::RequestReferer","RuboCop/Cop/Rails/RequestReferer.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::SafeNavigation","RuboCop/Cop/Rails/SafeNavigation.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::ScopeArgs","RuboCop/Cop/Rails/ScopeArgs.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::SkipsModelValidations","RuboCop/Cop/Rails/SkipsModelValidations.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::UniqBeforePluck","RuboCop/Cop/Rails/UniqBeforePluck.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::UnknownEnv","RuboCop/Cop/Rails/UnknownEnv.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Rails::Validation","RuboCop/Cop/Rails/Validation.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Security::Eval","RuboCop/Cop/Security/Eval.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Security::JSONLoad","RuboCop/Cop/Security/JSONLoad.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Security::MarshalLoad","RuboCop/Cop/Security/MarshalLoad.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Security::YAMLLoad","RuboCop/Cop/Security/YAMLLoad.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::ArrayJoin","RuboCop/Cop/Style/ArrayJoin.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::Attr","RuboCop/Cop/Style/Attr.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::AutoResourceCleanup","RuboCop/Cop/Style/AutoResourceCleanup.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::CaseEquality","RuboCop/Cop/Style/CaseEquality.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::ClassCheck","RuboCop/Cop/Style/ClassCheck.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::CollectionMethods","RuboCop/Cop/Style/CollectionMethods.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::ColonMethodCall","RuboCop/Cop/Style/ColonMethodCall.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::DateTime","RuboCop/Cop/Style/DateTime.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::Dir","RuboCop/Cop/Style/Dir.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::DoubleNegation","RuboCop/Cop/Style/DoubleNegation.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::EvenOdd","RuboCop/Cop/Style/EvenOdd.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::FormatString","RuboCop/Cop/Style/FormatString.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::ImplicitRuntimeError","RuboCop/Cop/Style/ImplicitRuntimeError.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::InverseMethods","RuboCop/Cop/Style/InverseMethods.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::LambdaCall","RuboCop/Cop/Style/LambdaCall.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::MethodCalledOnDoEndBlock","RuboCop/Cop/Style/MethodCalledOnDoEndBlock.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::MixinUsage","RuboCop/Cop/Style/MixinUsage.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::NestedParenthesizedCalls","RuboCop/Cop/Style/NestedParenthesizedCalls.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::NilComparison","RuboCop/Cop/Style/NilComparison.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::PreferredHashMethods","RuboCop/Cop/Style/PreferredHashMethods.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::RaiseArgs","RuboCop/Cop/Style/RaiseArgs.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::RedundantException","RuboCop/Cop/Style/RedundantException.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::RedundantFreeze","RuboCop/Cop/Style/RedundantFreeze.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::Send","RuboCop/Cop/Style/Send.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::SignalException","RuboCop/Cop/Style/SignalException.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::StderrPuts","RuboCop/Cop/Style/StderrPuts.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::StringMethods","RuboCop/Cop/Style/StringMethods.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::TrailingCommaInArguments","RuboCop/Cop/Style/TrailingCommaInArguments.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-on_send","(node)",""],["on_send","RuboCop::Cop::Style::ZeroLengthPredicate","RuboCop/Cop/Style/ZeroLengthPredicate.html#method-i-on_send","(node)",""],["on_special_asgn","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-on_special_asgn","(node)",""],["on_splat","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-on_splat","(node)",""],["on_str","Heredoc","Heredoc.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::Lint::InterpolationCheck","RuboCop/Cop/Lint/InterpolationCheck.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::StringHelp","RuboCop/Cop/StringHelp.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::Style::PercentQLiterals","RuboCop/Cop/Style/PercentQLiterals.html#method-i-on_str","(node)",""],["on_str","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-on_str","(node)",""],["on_super","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_super","(node)",""],["on_super","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-on_super","(node)",""],["on_sym","RuboCop::Cop::Lint::BooleanSymbol","RuboCop/Cop/Lint/BooleanSymbol.html#method-i-on_sym","(node)",""],["on_sym","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_sym","(node)",""],["on_sym","RuboCop::Cop::Style::SymbolLiteral","RuboCop/Cop/Style/SymbolLiteral.html#method-i-on_sym","(node)",""],["on_until","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_until","(node, base = node)",""],["on_until","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Lint::ConditionPosition","RuboCop/Cop/Lint/ConditionPosition.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::NegatedWhile","RuboCop/Cop/Style/NegatedWhile.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::ParenthesesAroundCondition","RuboCop/Cop/Style/ParenthesesAroundCondition.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::WhileUntilDo","RuboCop/Cop/Style/WhileUntilDo.html#method-i-on_until","(node)",""],["on_until","RuboCop::Cop::Style::WhileUntilModifier","RuboCop/Cop/Style/WhileUntilModifier.html#method-i-on_until","(node)",""],["on_until_post","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_until_post","(node)",""],["on_until_post","RuboCop::Cop::Lint::Loop","RuboCop/Cop/Lint/Loop.html#method-i-on_until_post","(node)",""],["on_until_post","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_until_post","(node)",""],["on_until_post","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-on_until_post","(node)",""],["on_when","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_when","(node)",""],["on_when","RuboCop::Cop::Style::WhenThen","RuboCop/Cop/Style/WhenThen.html#method-i-on_when","(node)",""],["on_while","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-on_while","(node, base = node)",""],["on_while","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Lint::ConditionPosition","RuboCop/Cop/Lint/ConditionPosition.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::NegatedWhile","RuboCop/Cop/Style/NegatedWhile.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::ParenthesesAroundCondition","RuboCop/Cop/Style/ParenthesesAroundCondition.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::WhileUntilDo","RuboCop/Cop/Style/WhileUntilDo.html#method-i-on_while","(node)",""],["on_while","RuboCop::Cop::Style::WhileUntilModifier","RuboCop/Cop/Style/WhileUntilModifier.html#method-i-on_while","(node)",""],["on_while_post","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-on_while_post","(node)",""],["on_while_post","RuboCop::Cop::Lint::Loop","RuboCop/Cop/Lint/Loop.html#method-i-on_while_post","(node)",""],["on_while_post","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-on_while_post","(node)",""],["on_while_post","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-on_while_post","(node)",""],["on_xstr","Heredoc","Heredoc.html#method-i-on_xstr","(node)",""],["on_xstr","RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html#method-i-on_xstr","(node)",""],["on_xstr","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-on_xstr","(node)",""],["on_xstr","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-on_xstr","(node)",""],["on_xstr","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-on_xstr","(node)",""],["on_yield","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_yield","(node)",""],["on_yield","RuboCop::Cop::Style::MethodCallWithArgsParentheses","RuboCop/Cop/Style/MethodCallWithArgsParentheses.html#method-i-on_yield","(node)",""],["on_zsuper","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-on_zsuper","(node)",""],["one_child?","RuboCop::Cop::Style::ClassAndModuleChildren","RuboCop/Cop/Style/ClassAndModuleChildren.html#method-i-one_child-3F","(body)",""],["only_begin_arg?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-only_begin_arg-3F","(args)",""],["only_closing_paren_before_comma?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-only_closing_paren_before_comma-3F","(node)",""],["only_includes_unneeded_disable?","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-only_includes_unneeded_disable-3F","()",""],["opening_brace_on_same_line?","RuboCop::Cop::MultilineLiteralBraceLayout","RuboCop/Cop/MultilineLiteralBraceLayout.html#method-i-opening_brace_on_same_line-3F","(node)","<p>This method depends on the fact that we have guarded against implicit and\nempty literals.\n"],["opening_delimiter","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-opening_delimiter","()","<p>The opening delimiter for this `block` literal.\n<p>@return [String] the opening delimiter for the `block` …\n"],["operation_rhs","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-operation_rhs","(node)",""],["operator","RuboCop::AST::KeywordSplatNode","RuboCop/AST/KeywordSplatNode.html#method-i-operator","()","<p>Returns the operator for the `kwsplat` as a string.\n<p>@return [String] the double splat operator\n"],["operator","RuboCop::AST::PredicateOperatorNode","RuboCop/AST/PredicateOperatorNode.html#method-i-operator","()","<p>Returns the operator as a string.\n<p>@return [String] the operator\n"],["operator","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-operator","()",""],["operator_assignment?","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-operator_assignment-3F","()",""],["operator_assignment_message","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-operator_assignment_message","(scope, assignment)",""],["operator_assignment_node","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-operator_assignment_node","()",""],["operator_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-operator_method-3F","()","<p>Checks whether the method is an operator method.\n<p>@return [Boolean] whether the method is an operator\n"],["operator_rhs?","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-operator_rhs-3F","(node, receiver)",""],["operator_with_regular_syntax?","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-operator_with_regular_syntax-3F","(send_node)",""],["opposite_kw","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-opposite_kw","(if_body)",""],["opposite_method?","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-opposite_method-3F","(child)",""],["opposite_style_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-opposite_style_detected","()",""],["opposite_style_detected","RuboCop::Cop::Style::CharacterLiteral","RuboCop/Cop/Style/CharacterLiteral.html#method-i-opposite_style_detected","()","<p>Dummy implementation of method in ConfigurableEnforcedStyle that is called\nfrom StringHelp.\n"],["option","RuboCop::Options","RuboCop/Options.html#method-i-option","(opts, *args)","<p>Sets a value in the @options hash, based on the given long option and its\nvalue, in addition to calling …\n"],["options_config=","RuboCop::ConfigStore","RuboCop/ConfigStore.html#method-i-options_config-3D","(options_config)",""],["ordered_offense_counts","RuboCop::Formatter::OffenseCountFormatter","RuboCop/Formatter/OffenseCountFormatter.html#method-i-ordered_offense_counts","(offense_counts)","<p>rubocop:enable Metrics/AbcSize\n"],["ordered_offense_counts","RuboCop::Formatter::WorstOffendersFormatter","RuboCop/Formatter/WorstOffendersFormatter.html#method-i-ordered_offense_counts","(offense_counts)","<p>rubocop:enable Metrics/AbcSize\n"],["other_message","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-other_message","(basename)",""],["other_offense_in_same_range?","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-other_offense_in_same_range-3F","(node)","<p>Returns true if the given node is within another node that has already been\nmarked for auto-correction …\n"],["output_cop","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_cop","(cop_name, offense_count)",""],["output_cop_comments","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_cop_comments","(output, cfg, cop_name, offense_count)",""],["output_cop_config","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_cop_config","(output, cfg, cop_name)",""],["output_cop_param_comments","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_cop_param_comments","(params, default_cfg)",""],["output_exclude_list","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_exclude_list","(output, offending_files, cop_name)",""],["output_exclude_path","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_exclude_path","(output, file, parent)",""],["output_offending_files","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_offending_files","(output, cfg, cop_name)",""],["output_offenses","RuboCop::Formatter::DisabledConfigFormatter","RuboCop/Formatter/DisabledConfigFormatter.html#method-i-output_offenses","()",""],["own_line_comment?","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-own_line_comment-3F","(comment)",""],["pairs","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-pairs","()","<p>Returns an array of all the key value pairs in the `hash` literal.\n<p>@return [Array&lt;PairNode&gt;] an …\n"],["pairs_on_same_line?","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-pairs_on_same_line-3F","()","<p>Checks whether any of the key value pairs in the `hash` literal are on the\nsame line.\n<p>@note A multiline …\n"],["parens_allowed?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-parens_allowed-3F","(node)",""],["parens_required?","RuboCop::Cop::Parentheses","RuboCop/Cop/Parentheses.html#method-i-parens_required-3F","(node)",""],["parent_block_node","RuboCop::Cop::Lint::NextWithoutAccumulator","RuboCop/Cop/Lint/NextWithoutAccumulator.html#method-i-parent_block_node","(node)",""],["parentheses?","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-parentheses-3F","(node)",""],["parenthesize?","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-parenthesize-3F","(node)",""],["parenthesized?","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-parenthesized-3F","()","<p>Checks whether this node&#39;s arguments are wrapped in parentheses.\n<p>@return [Boolean] whether this node&#39;s …\n"],["parenthesized?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-parenthesized-3F","(node)",""],["parenthesized_source","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-parenthesized_source","(node)",""],["parse","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-c-parse","(identifier)",""],["parse","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-parse","(source, path = nil)",""],["parse","RuboCop::MagicComment","RuboCop/MagicComment.html#method-c-parse","(comment)","<p>Detect magic comment format and pass it to the appropriate wrapper.\n<p>@param comment [String]\n<p>@return [RuboCop::MagicComment] …\n"],["parse","RuboCop::Options","RuboCop/Options.html#method-i-parse","(command_line_args)",""],["parse","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-parse","(source, ruby_version)",""],["parse","RuboCop::RSpec::ExpectOffense::AnnotatedSource","RuboCop/RSpec/ExpectOffense/AnnotatedSource.html#method-c-parse","(annotated_source)","<p>@param annotated_source [String] string passed to the matchers\n<p>Separates annotation lines from source …\n"],["parse_source","CopHelper","CopHelper.html#method-i-parse_source","(source, file = nil)",""],["parser_class","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-parser_class","(ruby_version)","<p>rubocop:disable Metrics/MethodLength\n"],["part_of_an_array?","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-part_of_an_array-3F","(node)",""],["part_of_ignored_node?","RuboCop::Cop::IgnoredNode","RuboCop/Cop/IgnoredNode.html#method-i-part_of_ignored_node-3F","(node)",""],["partial_matcher!","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-partial_matcher-21","(expected)",""],["parts","RuboCop::Cop::Style::BlockComments","RuboCop/Cop/Style/BlockComments.html#method-i-parts","(comment)",""],["path_relative_to_config","RuboCop::Config","RuboCop/Config.html#method-i-path_relative_to_config","(path)",""],["patterns_to_exclude","RuboCop::Config","RuboCop/Config.html#method-i-patterns_to_exclude","()",""],["patterns_to_include","RuboCop::Config","RuboCop/Config.html#method-i-patterns_to_include","()",""],["percent?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-percent-3F","(node)",""],["percent_literal?","RuboCop::AST::ArrayNode","RuboCop/AST/ArrayNode.html#method-i-percent_literal-3F","(type = nil)","<p>Checks whether the `array` literal is delimited by percent brackets.\n<p>@overload percent_literal?\n\n<pre>Check for ...</pre>\n"],["percent_literal?","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-percent_literal-3F","(node)",""],["persisted_referenced?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-persisted_referenced-3F","(assignment)",""],["pipe?","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-pipe-3F","(args_delimiter)",""],["plain_range","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-plain_range","(outer_node)",""],["plain_source","RuboCop::RSpec::ExpectOffense::AnnotatedSource","RuboCop/RSpec/ExpectOffense/AnnotatedSource.html#method-i-plain_source","()","<p>Return the plain source code without annotations\n<p>@return [String]\n"],["plural_method?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-plural_method-3F","(method_name)",""],["plural_receiver?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-plural_receiver-3F","(number)",""],["pluralize","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-pluralize","(method_name)",""],["pluralize","RuboCop::Formatter::TextUtil","RuboCop/Formatter/TextUtil.html#method-i-pluralize","(number, thing, options = {})",""],["pop_scope","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-pop_scope","()",""],["positional_arguments","RuboCop::Cop::InternalAffairs::DeprecatedPositionalArguments","RuboCop/Cop/InternalAffairs/DeprecatedPositionalArguments.html#method-i-positional_arguments","(node)",""],["possible_dsl?","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-possible_dsl-3F","(node)",""],["possible_ellipses","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-possible_ellipses","(location)",""],["possibly_include_hidden?","RuboCop::Config","RuboCop/Config.html#method-i-possibly_include_hidden-3F","()","<p>Returns true if there&#39;s a chance that an Include pattern matches hidden\nfiles, false if that&#39;s …\n"],["preceded_by_operator?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-preceded_by_operator-3F","(node, _range)",""],["preceding_comment?","RuboCop::Cop::DocumentationComment","RuboCop/Cop/DocumentationComment.html#method-i-preceding_comment-3F","(n1, n2)",""],["preceding_line","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-preceding_line","(token)",""],["preceding_lines","RuboCop::Cop::DocumentationComment","RuboCop/Cop/DocumentationComment.html#method-i-preceding_lines","(node)",""],["preceding_non_public_modifier?","RuboCop::Cop::DefNode","RuboCop/Cop/DefNode.html#method-i-preceding_non_public_modifier-3F","(node)",""],["preceed?","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-preceed-3F","(n1, n2)",""],["predicate_method?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-predicate_method-3F","()","<p>Checks whether the method is a predicate method.\n<p>@return [Boolean] whether the method is a predicate method …\n"],["predicate_prefixes","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-predicate_prefixes","()",""],["predicate_whitelist","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-predicate_whitelist","()",""],["preferred_base_class","RuboCop::Cop::Lint::InheritException","RuboCop/Cop/Lint/InheritException.html#method-i-preferred_base_class","()",""],["preferred_delimiters","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-preferred_delimiters","()",""],["preferred_delimiters","RuboCop::Cop::Style::CommandLiteral","RuboCop/Cop/Style/CommandLiteral.html#method-i-preferred_delimiters","()",""],["preferred_delimiters","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-preferred_delimiters","()",""],["preferred_delimiters_config","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-preferred_delimiters_config","()",""],["preferred_delimiters_for","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-preferred_delimiters_for","(type)",""],["preferred_method","RuboCop::Cop::MethodPreference","RuboCop/Cop/MethodPreference.html#method-i-preferred_method","(method)",""],["preferred_method","RuboCop::Cop::Performance::Detect","RuboCop/Cop/Performance/Detect.html#method-i-preferred_method","()",""],["preferred_method","RuboCop::Cop::Rails::ActionFilter","RuboCop/Cop/Rails/ActionFilter.html#method-i-preferred_method","(method)",""],["preferred_method","RuboCop::Cop::Rails::Validation","RuboCop/Cop/Rails/Validation.html#method-i-preferred_method","(method)",""],["preferred_methods","RuboCop::Cop::MethodPreference","RuboCop/Cop/MethodPreference.html#method-i-preferred_methods","()",""],["preferred_names","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-preferred_names","(global)",""],["preferred_string_literal","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-preferred_string_literal","()",""],["prefix_blacklist","RuboCop::Cop::Naming::PredicateName","RuboCop/Cop/Naming/PredicateName.html#method-i-prefix_blacklist","()",""],["prefixed_method_name","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-prefixed_method_name","(body)",""],["prepare","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-prepare","(processed_source)","<p>TODO: Bad design.\n"],["prev_node","RuboCop::Cop::Layout::EmptyLineBetweenDefs","RuboCop/Cop/Layout/EmptyLineBetweenDefs.html#method-i-prev_node","(node)",""],["previous_and_current_lines_empty?","RuboCop::Cop::Layout::EmptyLines","RuboCop/Cop/Layout/EmptyLines.html#method-i-previous_and_current_lines_empty-3F","(line)",""],["previous_code_line","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-previous_code_line","(line_number)","<p>Takes the line number of a given code line and returns a string containing\nthe previous line that&#39;s …\n"],["previous_declaration","RuboCop::Cop::Bundler::OrderedGems","RuboCop/Cop/Bundler/OrderedGems.html#method-i-previous_declaration","(node)",""],["previous_declaration","RuboCop::Cop::Gemspec::OrderedDependencies","RuboCop/Cop/Gemspec/OrderedDependencies.html#method-i-previous_declaration","(node)",""],["previous_line_empty?","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-previous_line_empty-3F","(previous_line)",""],["previous_line_ignoring_comments","RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier","RuboCop/Cop/Layout/EmptyLinesAroundAccessModifier.html#method-i-previous_line_ignoring_comments","(processed_source, send_line)",""],["previous_line_ignoring_comments","RuboCop::Cop::Layout::EmptyLinesAroundBody","RuboCop/Cop/Layout/EmptyLinesAroundBody.html#method-i-previous_line_ignoring_comments","(send_line)",""],["primitive_array?","RuboCop::Cop::Lint::LiteralAsCondition","RuboCop/Cop/Lint/LiteralAsCondition.html#method-i-primitive_array-3F","(node)",""],["print_available_cops","RuboCop::CLI","RuboCop/CLI.html#method-i-print_available_cops","()",""],["print_cop_details","RuboCop::CLI","RuboCop/CLI.html#method-i-print_cop_details","(cops)",""],["print_cops_of_department","RuboCop::CLI","RuboCop/CLI.html#method-i-print_cops_of_department","(registry, department, show_all)",""],["prints_as_self?","RuboCop::Cop::Lint::LiteralInInterpolation","RuboCop/Cop/Lint/LiteralInInterpolation.html#method-i-prints_as_self-3F","(node)","<p>Does node print its own source when converted to a string?\n"],["private_or_protected_before","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-private_or_protected_before","(line)",""],["private_or_protected_delegation","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-private_or_protected_delegation","(node)",""],["private_or_protected_inline","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-private_or_protected_inline","(line)",""],["procedural_method?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-procedural_method-3F","(method_name)",""],["process","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-process","(node, *types)",""],["process_assignment","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-process_assignment","(asgn_node, rhs_node)",""],["process_assignment_node","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-process_assignment_node","(node)",""],["process_binary_operator_assignment","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-process_binary_operator_assignment","(op_asgn_node)",""],["process_commissioner_errors","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-process_commissioner_errors","(file, file_errors)",""],["process_control_op","RuboCop::Cop::Style::ParenthesesAroundCondition","RuboCop/Cop/Style/ParenthesesAroundCondition.html#method-i-process_control_op","(node)",""],["process_explicit_path","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-process_explicit_path","(path)",""],["process_file","RuboCop::Runner","RuboCop/Runner.html#method-i-process_file","(file)",""],["process_logical_operator","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-process_logical_operator","(node)",""],["process_logical_operator_assignment","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-process_logical_operator_assignment","(asgn_node)",""],["process_multiple_assignment","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-process_multiple_assignment","(masgn_node)",""],["process_source","RuboCop::Cop::Performance::DoubleStartEndWith","RuboCop/Cop/Performance/DoubleStartEndWith.html#method-i-process_source","(node)",""],["progressbar_color","RuboCop::Formatter::FuubarStyleFormatter","RuboCop/Formatter/FuubarStyleFormatter.html#method-i-progressbar_color","()",""],["proper_block_style?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-proper_block_style-3F","(node)","<p>rubocop:enable Metrics/CyclimaticComplexity\n"],["proper_dot_position?","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-proper_dot_position-3F","(node)",""],["proper_method_name","RuboCop::Cop::Style::PreferredHashMethods","RuboCop/Cop/Style/PreferredHashMethods.html#method-i-proper_method_name","(method_name)",""],["push_scope","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-push_scope","(scope_node)",""],["put_comma","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-put_comma","(node, items, kind)",""],["qualified?","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-qualified-3F","()",""],["qualified_cop_name","RuboCop::CommentConfig","RuboCop/CommentConfig.html#method-i-qualified_cop_name","(cop_name)",""],["qualified_cop_name","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-c-qualified_cop_name","(name, origin)",""],["qualified_cop_name","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-qualified_cop_name","(name, path)","<p>Convert a user provided cop name into a properly namespaced name\n<p>@example gives back a correctly qualified …\n"],["qualified_name","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-qualified_name","(enclosing, namespace, mod_name)",""],["qualify_badge","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-qualify_badge","(badge)",""],["rackup_config_file?","RuboCop::Cop::Layout::LeadingCommentSpace","RuboCop/Cop/Layout/LeadingCommentSpace.html#method-i-rackup_config_file-3F","()",""],["rackup_options?","RuboCop::Cop::Layout::LeadingCommentSpace","RuboCop/Cop/Layout/LeadingCommentSpace.html#method-i-rackup_options-3F","(comment)",""],["rails?","RuboCop::Cop::SafeMode","RuboCop/Cop/SafeMode.html#method-i-rails-3F","()",""],["rails_safe_mode?","RuboCop::Cop::SafeMode","RuboCop/Cop/SafeMode.html#method-i-rails_safe_mode-3F","()",""],["rainbow","RuboCop::Formatter::Colorizable","RuboCop/Formatter/Colorizable.html#method-i-rainbow","()",""],["raised_to_power_negative_numeric?","RuboCop::Cop::Style::RedundantParentheses","RuboCop/Cop/Style/RedundantParentheses.html#method-i-raised_to_power_negative_numeric-3F","(begin_node, node)",""],["range","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-range","(node)",""],["range_between_condition_and_else","RuboCop::Cop::Style::UnlessElse","RuboCop/Cop/Style/UnlessElse.html#method-i-range_between_condition_and_else","(node, condition)",""],["range_between_else_and_end","RuboCop::Cop::Style::UnlessElse","RuboCop/Cop/Style/UnlessElse.html#method-i-range_between_else_and_end","(node)",""],["range_between_tokens","RuboCop::Cop::SpaceInside","RuboCop/Cop/SpaceInside.html#method-i-range_between_tokens","(t1, t2)",""],["range_for_parentheses","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-range_for_parentheses","(offense, left)",""],["range_of_space_to_the_left","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-range_of_space_to_the_left","(range)",""],["range_of_space_to_the_right","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-range_of_space_to_the_right","(range)",""],["range_size","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-range_size","(range_node)",""],["read_attribute_replacement","RuboCop::Cop::Rails::ReadWriteAttribute","RuboCop/Cop/Rails/ReadWriteAttribute.html#method-i-read_attribute_replacement","(node)",""],["real_column","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-real_column","()","<p>@api private\n<p>Internally we use column number that start at 0, but when outputting column\nnumbers, we want …\n"],["receiver","RuboCop::AST::DefNode","RuboCop/AST/DefNode.html#method-i-receiver","()","<p>The receiver of the method definition, if any.\n<p>@return [Node, nil] the receiver of the method definition, …\n"],["receiver","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-receiver","()","<p>The receiving node of the method dispatch.\n<p>@return [Node, nil] the receiver of the dispatched method or …\n"],["receiver_alignment_base","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-receiver_alignment_base","(node)","<p>a\n\n<pre>.b\n.c</pre>\n"],["redundant_location_argument","RuboCop::Cop::InternalAffairs::RedundantLocationArgument","RuboCop/Cop/InternalAffairs/RedundantLocationArgument.html#method-i-redundant_location_argument","(node)",""],["redundant_parentheses?","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-redundant_parentheses-3F","(node)",""],["redundant_parentheses_enabled?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-redundant_parentheses_enabled-3F","()",""],["reference!","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-reference-21","()",""],["reference!","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-reference-21","(node)",""],["reference_url","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-reference_url","()",""],["reference_variable","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-reference_variable","(name, node)",""],["referenced?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-referenced-3F","()",""],["regex","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-regex","()",""],["regex_matches","RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters","RuboCop/Cop/Layout/SpaceInsidePercentLiteralDelimiters.html#method-i-regex_matches","(node, &blk)",""],["regexp_named_capture?","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-regexp_named_capture-3F","()",""],["register_each_offense","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-register_each_offense","(node)",""],["register_kv_offense","RuboCop::Cop::Performance::HashEachMethods","RuboCop/Cop/Performance/HashEachMethods.html#method-i-register_kv_offense","(node)",""],["register_offense","RuboCop::Cop::Bundler::DuplicatedGem","RuboCop/Cop/Bundler/DuplicatedGem.html#method-i-register_offense","(node, gem_name, line_of_first_occurrence)",""],["register_offense","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-register_offense","(block_node, start_loc, end_loc, do_source_line_column)",""],["register_offense","RuboCop::Cop::Lint::Loop","RuboCop/Cop/Lint/Loop.html#method-i-register_offense","(node)",""],["register_offense","RuboCop::Cop::Lint::UriRegexp","RuboCop/Cop/Lint/UriRegexp.html#method-i-register_offense","(node, top_level: '', arg: '')",""],["register_offense","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-register_offense","(loc, line)",""],["register_offense","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-register_offense","(previous, current)",""],["register_offense","RuboCop::Cop::Performance::Detect","RuboCop/Cop/Performance/Detect.html#method-i-register_offense","(node, receiver, second_method)",""],["register_offense","RuboCop::Cop::Performance::FlatMap","RuboCop/Cop/Performance/FlatMap.html#method-i-register_offense","(node, map_node, first_method, flatten, message)",""],["register_offense","RuboCop::Cop::Rails::ActiveSupportAliases","RuboCop/Cop/Rails/ActiveSupportAliases.html#method-i-register_offense","(node, method_name)",""],["register_offense","RuboCop::Cop::Rails::FilePath","RuboCop/Cop/Rails/FilePath.html#method-i-register_offense","(node)",""],["registered?","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-registered-3F","(badge)",""],["regopt","RuboCop::AST::RegexpNode","RuboCop/AST/RegexpNode.html#method-i-regopt","()","<p>@return [RuboCop::AST::Node] a regopt node\n"],["regular_method_call?","RuboCop::Cop::Style::RedundantSelf","RuboCop/Cop/Style/RedundantSelf.html#method-i-regular_method_call-3F","(node)",""],["regular_method_call_with_arguments?","RuboCop::Cop::Layout::SpaceBeforeFirstArg","RuboCop/Cop/Layout/SpaceBeforeFirstArg.html#method-i-regular_method_call_with_arguments-3F","(node)",""],["regular_operator?","RuboCop::Cop::Layout::SpaceAroundOperators","RuboCop/Cop/Layout/SpaceAroundOperators.html#method-i-regular_operator-3F","(send_node)",""],["reindent","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-reindent","(lines, node, corrector)","<p>Adjust indentation of `lines` to match `node`\n"],["reindent_line","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-reindent_line","(corrector, lineno, delta, buffer)",""],["reindentable_lines","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-reindentable_lines","(node)",""],["reject_mutually_exclusive_defaults","RuboCop::Config","RuboCop/Config.html#method-i-reject_mutually_exclusive_defaults","()",""],["reject_obsolete_cops_and_parameters","RuboCop::Config","RuboCop/Config.html#method-i-reject_obsolete_cops_and_parameters","()",""],["relative_date_method?","RuboCop::Cop::Rails::RelativeDateConstant","RuboCop/Cop/Rails/RelativeDateConstant.html#method-i-relative_date_method-3F","(node)",""],["relative_path","RuboCop::PathUtil","RuboCop/PathUtil.html#method-i-relative_path","(path, base_dir = Dir.pwd)",""],["relative_to_receiver_message","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-relative_to_receiver_message","(rhs)",""],["relevant_diagnostic?","RuboCop::Cop::Lint::AmbiguousOperator","RuboCop/Cop/Lint/AmbiguousOperator.html#method-i-relevant_diagnostic-3F","(diagnostic)",""],["relevant_diagnostic?","RuboCop::Cop::Lint::AmbiguousRegexpLiteral","RuboCop/Cop/Lint/AmbiguousRegexpLiteral.html#method-i-relevant_diagnostic-3F","(diagnostic)",""],["relevant_diagnostic?","RuboCop::Cop::Lint::UselessElseWithoutRescue","RuboCop/Cop/Lint/UselessElseWithoutRescue.html#method-i-relevant_diagnostic-3F","(diagnostic)",""],["relevant_file?","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-relevant_file-3F","(file)",""],["relevant_file?","RuboCop::Cop::InternalAffairs::UselessMessageAssertion","RuboCop/Cop/InternalAffairs/UselessMessageAssertion.html#method-i-relevant_file-3F","(file)","<p>Only process spec files\n"],["relevant_node?","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-relevant_node-3F","(send_node)",""],["relevant_node?","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-relevant_node-3F","(node)",""],["relevant_options_digest","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-relevant_options_digest","(options)","<p>Return a hash of the options given at invocation, minus the ones that have\nno effect on which offenses …\n"],["remove","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-remove","(range, corrector)",""],["remove","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-remove","(range)","<p>Removes the source range.\n<p>@param [Parser::Source::Range] range\n"],["remove_braces","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-remove_braces","(corrector, node)",""],["remove_braces_with_whitespace","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-remove_braces_with_whitespace","(corrector, node)",""],["remove_brackets","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-remove_brackets","(array)",""],["remove_files","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-remove_files","(files, dirs, remove_count)",""],["remove_irrelevant_cops","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-remove_irrelevant_cops","(filename)",""],["remove_leading","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-remove_leading","(range, size)","<p>Removes `size` characters from the beginning of the given range. If `size`\nis greater than the size of …\n"],["remove_leading_whitespace","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-remove_leading_whitespace","(node, corrector)",""],["remove_oldest_files","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-remove_oldest_files","(files, dirs, cache_root, verbose)",""],["remove_optarg_equals","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-remove_optarg_equals","(asgn_tokens, processed_source)",""],["remove_parentheses","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-remove_parentheses","(corrector, node)",""],["remove_preceding","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-remove_preceding","(range, size)","<p>Removes `size` characters prior to the source range.\n<p>@param [Parser::Source::Range] range @param [Integer] …\n"],["remove_second_param","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-remove_second_param","(corrector, node, first_param)",""],["remove_space_before","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-remove_space_before","(end_pos, delta)",""],["remove_trailing","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-remove_trailing","(range, size)","<p>Removes `size` characters from the end of the given range. If `size` is\ngreater than the size of `range`, …\n"],["remove_trailing_whitespace","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-remove_trailing_whitespace","(node, corrector)",""],["remove_unparenthesized_whitespace","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-remove_unparenthesized_whitespace","(corrector, node)",""],["remove_whitespace_in_branches","RuboCop::Cop::Style::ConditionalCorrectorHelper","RuboCop/Cop/Style/ConditionalCorrectorHelper.html#method-i-remove_whitespace_in_branches","(corrector, branch, condition, column)",""],["render_html","RuboCop::Formatter::HTMLFormatter","RuboCop/Formatter/HTMLFormatter.html#method-i-render_html","()",""],["reorder_condition","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-reorder_condition","(corrector, when_node)",""],["reordering_correction","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-reordering_correction","(when_node)",""],["repeated_condition?","RuboCop::Cop::Lint::DuplicateCaseCondition","RuboCop/Cop/Lint/DuplicateCaseCondition.html#method-i-repeated_condition-3F","(previous, condition)",""],["replace","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-replace","(range, content)","<p>Replaces the code of the source range `range` with `content`.\n<p>@param [Parser::Source::Range] range @param …\n"],["replace_begin_end_with_modifier","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-replace_begin_end_with_modifier","(node)",""],["replace_braces_with_do_end","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-replace_braces_with_do_end","(loc)",""],["replace_branch_assignment","RuboCop::Cop::Style::ConditionalCorrectorHelper","RuboCop/Cop/Style/ConditionalCorrectorHelper.html#method-i-replace_branch_assignment","(corrector, branch)",""],["replace_do_end_with_braces","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-replace_do_end_with_braces","(loc)",""],["replace_method","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-replace_method","(node, first, second, first_param, replacement)",""],["replace_source","RuboCop::Cop::Style::InfiniteLoop","RuboCop/Cop/Style/InfiniteLoop.html#method-i-replace_source","(range, replacement)",""],["replacement","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-replacement","(node)",""],["replacement","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-replacement","(conditions)",""],["replacement","RuboCop::Cop::Rails::Blank","RuboCop/Cop/Rails/Blank.html#method-i-replacement","(node)",""],["replacement","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-replacement","(node)",""],["replacement","RuboCop::Cop::Rails::SafeNavigation","RuboCop/Cop/Rails/SafeNavigation.html#method-i-replacement","(method, params)",""],["replacement","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-replacement","(numeric, operation)",""],["replacement","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-replacement","(node)",""],["replacement","RuboCop::Cop::Style::SpecialGlobalVars","RuboCop/Cop/Style/SpecialGlobalVars.html#method-i-replacement","(node, global_var)",""],["replacement","RuboCop::Cop::Style::ZeroLengthPredicate","RuboCop/Cop/Style/ZeroLengthPredicate.html#method-i-replacement","(node)",""],["replacement_condition","RuboCop::Cop::Style::RedundantConditional","RuboCop/Cop/Style/RedundantConditional.html#method-i-replacement_condition","(node)",""],["replacement_method","RuboCop::Cop::Lint::DeprecatedClassMethods","RuboCop/Cop/Lint/DeprecatedClassMethods.html#method-i-replacement_method","(data)",""],["replacement_method","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-replacement_method","(node, first_source, second_source)",""],["replacement_method","RuboCop::Cop::Style::Attr","RuboCop/Cop/Style/Attr.html#method-i-replacement_method","(node)",""],["replacement_method","RuboCop::Cop::Style::EvenOdd","RuboCop/Cop/Style/EvenOdd.html#method-i-replacement_method","(arg, method)",""],["replacement_operator","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-replacement_operator","(keyword)",""],["replacement_range","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-replacement_range","(node)",""],["replacement_supported?","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-replacement_supported-3F","(operator)",""],["report_file","RuboCop::Formatter::ClangStyleFormatter","RuboCop/Formatter/ClangStyleFormatter.html#method-i-report_file","(file, offenses)",""],["report_file","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-report_file","(file, offenses)",""],["report_file_as_mark","RuboCop::Formatter::ProgressFormatter","RuboCop/Formatter/ProgressFormatter.html#method-i-report_file_as_mark","(offenses)",""],["report_highlighted_area","RuboCop::Formatter::ClangStyleFormatter","RuboCop/Formatter/ClangStyleFormatter.html#method-i-report_highlighted_area","(highlighted_area)",""],["report_highlighted_area","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-report_highlighted_area","(highlighted_area)",""],["report_line","RuboCop::Formatter::ClangStyleFormatter","RuboCop/Formatter/ClangStyleFormatter.html#method-i-report_line","(location)",""],["report_line","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-report_line","(location)",""],["report_offense","RuboCop::Formatter::ClangStyleFormatter","RuboCop/Formatter/ClangStyleFormatter.html#method-i-report_offense","(file, offense)",""],["report_offense","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-report_offense","(file, offense)",""],["report_opposing_styles","RuboCop::Cop::ConfigurableFormatting","RuboCop/Cop/ConfigurableFormatting.html#method-i-report_opposing_styles","(node, name)",""],["report_summary","RuboCop::Formatter::OffenseCountFormatter","RuboCop/Formatter/OffenseCountFormatter.html#method-i-report_summary","(offense_counts)","<p>rubocop:disable Metrics/AbcSize\n"],["report_summary","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-report_summary","(file_count, offense_count, correction_count)",""],["report_summary","RuboCop::Formatter::WorstOffendersFormatter","RuboCop/Formatter/WorstOffendersFormatter.html#method-i-report_summary","(offense_counts)","<p>rubocop:disable Metrics/AbcSize\n"],["request","RuboCop::RemoteConfig","RuboCop/RemoteConfig.html#method-i-request","(uri = @uri, limit = 10, &block)",""],["require_exists?","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-require_exists-3F","()",""],["require_for_non_public_methods?","RuboCop::Cop::Style::DocumentationMethod","RuboCop/Cop/Style/DocumentationMethod.html#method-i-require_for_non_public_methods-3F","()",""],["require_parentheses?","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-require_parentheses-3F","(args)",""],["require_parentheses?","RuboCop::Cop::Style::NumericPredicate","RuboCop/Cop/Style/NumericPredicate.html#method-i-require_parentheses-3F","(node)",""],["require_parentheses?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-require_parentheses-3F","()",""],["require_parentheses_when_complex?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-require_parentheses_when_complex-3F","()",""],["require_path","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-require_path","()",""],["require_path_fragments","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-require_path_fragments","(require_directove)",""],["requires_bare_percent?","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-requires_bare_percent-3F","(source)",""],["requires_file_removal?","RuboCop::ResultCache","RuboCop/ResultCache.html#method-c-requires_file_removal-3F","(file_count, config_store)",""],["requires_interpolation?","RuboCop::Cop::Style::UnneededCapitalW","RuboCop/Cop/Style/UnneededCapitalW.html#method-i-requires_interpolation-3F","(node)",""],["requires_parens?","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-requires_parens-3F","(node)",""],["requires_parens?","RuboCop::Cop::Style::Not","RuboCop/Cop/Style/Not.html#method-i-requires_parens-3F","(child)",""],["requires_parentheses?","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-requires_parentheses-3F","(node)",""],["requires_percent_q?","RuboCop::Cop::Style::BarePercentLiterals","RuboCop/Cop/Style/BarePercentLiterals.html#method-i-requires_percent_q-3F","(source)",""],["rescue_modifier?","RuboCop::Cop::RescueNode","RuboCop/Cop/RescueNode.html#method-i-rescue_modifier-3F","(node)",""],["rescued_exceptions","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-rescued_exceptions","(rescue_group)","<p>@param [RuboCop::AST::Node] rescue_group is a node of array_type\n"],["reset_callbacks","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-reset_callbacks","()",""],["reset_errors","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-reset_errors","()",""],["resolve_badge","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-resolve_badge","(given_badge, real_badge, source_path)",""],["resolve_block_method_name","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-resolve_block_method_name","(block_send_or_super)",""],["resolve_inheritance","RuboCop::ConfigLoaderResolver","RuboCop/ConfigLoaderResolver.html#method-i-resolve_inheritance","(path, hash, file)",""],["resolve_inheritance_from_gems","RuboCop::ConfigLoaderResolver","RuboCop/ConfigLoaderResolver.html#method-i-resolve_inheritance_from_gems","(hash, gems)",""],["resolve_requires","RuboCop::ConfigLoaderResolver","RuboCop/ConfigLoaderResolver.html#method-i-resolve_requires","(path, hash)",""],["rest_argument?","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-rest_argument-3F","()",""],["return_of_method_call?","RuboCop::Cop::Style::ParallelAssignment","RuboCop/Cop/Style/ParallelAssignment.html#method-i-return_of_method_call-3F","(node)",""],["return_value","RuboCop::Cop::Style::EachWithObject","RuboCop/Cop/Style/EachWithObject.html#method-i-return_value","(body)",""],["return_value?","RuboCop::Cop::Lint::NonLocalExitFromIterator","RuboCop/Cop/Lint/NonLocalExitFromIterator.html#method-i-return_value-3F","(return_node)",""],["return_value_assigned?","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-return_value_assigned-3F","(node)","<p>Ignore simple assignment or if condition\n"],["return_value_chaining?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-return_value_chaining-3F","(node)",""],["return_value_node_of_scope","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-return_value_node_of_scope","(scope)","<p>TODO: More precise handling (rescue, ensure, nested begin, etc.)\n"],["return_value_of_scope?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-return_value_of_scope-3F","(node)",""],["return_value_used?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-return_value_used-3F","(node)",""],["reverse_comparison","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-reverse_comparison","(operator)",""],["reverse_index","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-reverse_index","(collection, item)",""],["revert_method_uselessness","RuboCop::Cop::Lint::IneffectiveAccessModifier","RuboCop/Cop/Lint/IneffectiveAccessModifier.html#method-i-revert_method_uselessness","(methods)",""],["rewrite","RuboCop::Cop::Corrector","RuboCop/Cop/Corrector.html#method-i-rewrite","()","<p>Does the actual rewrite and returns string corresponding to the rewritten\nsource.\n<p>@return [String]\n"],["rewrite_with_modifier","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-rewrite_with_modifier","(node, parent, new_source)",""],["rhs","RuboCop::AST::BinaryOperatorNode","RuboCop/AST/BinaryOperatorNode.html#method-i-rhs","()","<p>Returns the right hand side node of the binary operation.\n<p>@return [Node] the right hand side of the binary …\n"],["right_argument_count?","RuboCop::Cop::Rails::Exit","RuboCop/Cop/Rails/Exit.html#method-i-right_argument_count-3F","(arg_nodes)","<p>More than 1 argument likely means it is a different `exit` implementation\nthan the one we are preventing. …\n"],["right_assignment_node","RuboCop::Cop::Rails::SaveBang","RuboCop/Cop/Rails/SaveBang.html#method-i-right_assignment_node","(assignment)",""],["right_brace?","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-right_brace-3F","(token)",""],["right_brace_and_space","RuboCop::Cop::Style::BracesAroundHashParameters","RuboCop/Cop/Style/BracesAroundHashParameters.html#method-i-right_brace_and_space","(loc_end)",""],["right_hand_operand","RuboCop::Cop::Style::NestedModifier","RuboCop/Cop/Style/NestedModifier.html#method-i-right_hand_operand","(node, left_hand_keyword)",""],["right_method_name?","RuboCop::Cop::Rails::Exit","RuboCop/Cop/Rails/Exit.html#method-i-right_method_name-3F","(method_name)",""],["right_receiver?","RuboCop::Cop::Rails::Exit","RuboCop/Cop/Rails/Exit.html#method-i-right_receiver-3F","(receiver_node)","<p>Only register if exit is being called explicitly on Kernel or Process or if\nreceiver node is nil for …\n"],["right_side?","RuboCop::Cop::SpaceInside::Brackets","RuboCop/Cop/SpaceInside/Brackets.html#method-i-right_side-3F","(token)",""],["root_node?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-root_node-3F","(node)","<p>Check if a node does not have a parent\n<p>@param node [Node]\n<p>@return [Boolean] if the parent is nil\n"],["rubocop_checksum","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-rubocop_checksum","()","<p>The checksum of the rubocop program running the inspection.\n"],["rubocop_directive_comment?","RuboCop::Cop::DocumentationComment","RuboCop/Cop/DocumentationComment.html#method-i-rubocop_directive_comment-3F","(comment)",""],["rubocop_root_file_path","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-rubocop_root_file_path","()",""],["ruby19_check","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-ruby19_check","(pairs)",""],["ruby19_no_mixed_keys_check","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-ruby19_no_mixed_keys_check","(pairs)",""],["ruby_executable?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-ruby_executable-3F","(file)",""],["ruby_extension?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-ruby_extension-3F","(file)",""],["ruby_file?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-ruby_file-3F","(file)",""],["ruby_filename?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-ruby_filename-3F","(file)",""],["run","RuboCop::CLI","RuboCop/CLI.html#method-i-run","(args = ARGV)","<p>@api public\n<p>Entry point for the application logic. Here we do the command line\narguments processing and …\n"],["run","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-run","(node_var)",""],["run","RuboCop::Runner","RuboCop/Runner.html#method-i-run","(paths)",""],["run_cli","RuboCop::RakeTask","RuboCop/RakeTask.html#method-i-run_cli","(verbose, options)",""],["run_exclusively_with?","RuboCop::Cop::VariableForce::Branchable","RuboCop/Cop/VariableForce/Branchable.html#method-i-run_exclusively_with-3F","(other)",""],["run_hook","RuboCop::Cop::Force","RuboCop/Cop/Force.html#method-i-run_hook","(method_name, *args)",""],["s","RuboCop::AST::Sexp","RuboCop/AST/Sexp.html#method-i-s","(type, *children)","<p>Creates a {Node} with type `type` and children `children`.\n"],["safe_assignment_allowed?","RuboCop::Cop::SafeAssignment","RuboCop/Cop/SafeAssignment.html#method-i-safe_assignment_allowed-3F","()",""],["safe_chain?","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-safe_chain-3F","(node)",""],["safe_method","RuboCop::Cop::Rails::TimeZone","RuboCop/Cop/Rails/TimeZone.html#method-i-safe_method","(method_name, node)",""],["safe_mode?","RuboCop::Cop::SafeMode","RuboCop/Cop/SafeMode.html#method-i-safe_mode-3F","()",""],["safe_navigation_call?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-safe_navigation_call-3F","(range, pos)",""],["safe_to_time?","RuboCop::Cop::Rails::Date","RuboCop/Cop/Rails/Date.html#method-i-safe_to_time-3F","(node)",""],["same_line?","RuboCop::AST::HashElementNode","RuboCop/AST/HashElementNode.html#method-i-same_line-3F","(other)","<p>Checks whether this `hash` element is on the same line as `other`.\n<p>@note A multiline element is considered …\n"],["same_line?","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-same_line-3F","(n1, n2)",""],["same_name_assignment?","RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html#method-i-same_name_assignment-3F","(node)",""],["sample_arg","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-sample_arg","(method, method_args)",""],["sample_size","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-sample_size","(method_args)",""],["sample_size_for_one_arg","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-sample_size_for_one_arg","(arg)",""],["sample_size_for_two_args","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-sample_size_for_two_args","(first, second)",""],["sanitize_name","RuboCop::Cop::Naming::MethodName","RuboCop/Cop/Naming/MethodName.html#method-i-sanitize_name","(name)",""],["save","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-save","(offenses)",""],["save_in_cache","RuboCop::Runner","RuboCop/Runner.html#method-i-save_in_cache","(cache, offenses)",""],["scan","RuboCop::Cop::Lint::UselessSetterCall::MethodVariableTracker","RuboCop/Cop/Lint/UselessSetterCall/MethodVariableTracker.html#method-i-scan","(node, &block)",""],["scan_node","RuboCop::Cop::VariableForce::Scope","RuboCop/Cop/VariableForce/Scope.html#method-i-scan_node","(node, &block)",""],["scope","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-scope","()",""],["scope_body","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-scope_body","(node)",""],["scope_root","RuboCop::Cop::Performance::RegexpMatch","RuboCop/Cop/Performance/RegexpMatch.html#method-i-scope_root","(node)",""],["scope_stack","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-scope_stack","()",""],["scope_type","RuboCop::Cop::Style::Alias","RuboCop/Cop/Style/Alias.html#method-i-scope_type","(node)","<p>In this expression, will `self` be the same as the innermost enclosing\nclass or module block (:lexical)? …\n"],["scoped_node?","RuboCop::Cop::Lint::NonLocalExitFromIterator","RuboCop/Cop/Lint/NonLocalExitFromIterator.html#method-i-scoped_node-3F","(node)",""],["scoped_node?","RuboCop::Cop::Style::ReturnNil","RuboCop/Cop/Style/ReturnNil.html#method-i-scoped_node-3F","(node)",""],["scoping_method_call?","RuboCop::Cop::Lint::NestedMethodDefinition","RuboCop/Cop/Lint/NestedMethodDefinition.html#method-i-scoping_method_call-3F","(child)",""],["second_argument","RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector","RuboCop/Cop/Performance/RedundantMerge/EachWithObjectInspector.html#method-i-second_argument","()",""],["select","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-select","(&block)",""],["selected_cops_of_department","RuboCop::CLI","RuboCop/CLI.html#method-i-selected_cops_of_department","(cops, department)",""],["selector_range","RuboCop::Cop::Layout::DotPosition","RuboCop/Cop/Layout/DotPosition.html#method-i-selector_range","(node)",""],["self_receiver?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-self_receiver-3F","()","<p>Checks whether the <strong>explicit</strong> receiver of this method\ndispatch is `self`.\n<p>@return [Boolean] whether the …\n"],["self_receiver?","RuboCop::AST::MethodIdentifierPredicates","RuboCop/AST/MethodIdentifierPredicates.html#method-i-self_receiver-3F","()","<p>Checks whether the <strong>explicit</strong> receiver of this node is\n`self`.\n<p>@return [Boolean] whether the receiver of …\n"],["semantic_alignment_base","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-semantic_alignment_base","(node, rhs)","<p>a.b\n\n<pre>.c</pre>\n"],["semantic_alignment_node","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-semantic_alignment_node","(node)",""],["semantic_block_style?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-semantic_block_style-3F","(node)",""],["semantic_message","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-semantic_message","(node)",""],["semantic_operator?","RuboCop::AST::PredicateOperatorNode","RuboCop/AST/PredicateOperatorNode.html#method-i-semantic_operator-3F","()","<p>Checks whether this is a semantic operator.\n<p>@return [Boolean] whether this is a semantic operator\n"],["send_node","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-send_node","()","<p>The `send` node associated with this block.\n<p>@return [SendNode] the `send` node associated with the `block` …\n"],["separate_mixins","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-separate_mixins","(node)",""],["separated_style?","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-separated_style-3F","()",""],["separator_delta","RuboCop::Cop::HashAlignment::ValueAlignment","RuboCop/Cop/HashAlignment/ValueAlignment.html#method-i-separator_delta","(first_pair, current_pair, key_delta)",""],["separator_style?","RuboCop::Cop::Layout::IndentHash","RuboCop/Cop/Layout/IndentHash.html#method-i-separator_style-3F","(first_pair)",""],["serialize_offense","RuboCop::CachedData","RuboCop/CachedData.html#method-i-serialize_offense","(offense)",""],["setter_call_to_local_variable?","RuboCop::Cop::Lint::UselessSetterCall","RuboCop/Cop/Lint/UselessSetterCall.html#method-i-setter_call_to_local_variable-3F","(node)",""],["setter_method?","RuboCop::AST::MethodDispatchNode","RuboCop/AST/MethodDispatchNode.html#method-i-setter_method-3F","()","<p>Checks whether the dispatched method is a setter method.\n<p>@return [Boolean] whether the dispatched method …\n"],["setter_method?","RuboCop::Cop::Lint::ReturnInVoidContext","RuboCop/Cop/Lint/ReturnInVoidContext.html#method-i-setter_method-3F","(method_name)",""],["setter_method?","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-setter_method-3F","(method_name)",""],["setup_ivars","RuboCop::RakeTask","RuboCop/RakeTask.html#method-i-setup_ivars","(name)",""],["setup_subtasks","RuboCop::RakeTask","RuboCop/RakeTask.html#method-i-setup_subtasks","(name, *args, &task_block)",""],["shebang?","RuboCop::Cop::Layout::LeadingCommentSpace","RuboCop/Cop/Layout/LeadingCommentSpace.html#method-i-shebang-3F","(comment)",""],["shebang?","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-shebang-3F","(line)",""],["shebang_token?","RuboCop::Cop::Style::Copyright","RuboCop/Cop/Style/Copyright.html#method-i-shebang_token-3F","(processed_source, token_index)",""],["short_group_regex","RuboCop::Cop::Style::NumericLiterals","RuboCop/Cop/Style/NumericLiterals.html#method-i-short_group_regex","()",""],["should_align?","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-should_align-3F","(node, rhs, given_style)",""],["should_align_with_base?","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-should_align_with_base-3F","()",""],["should_aligned_with_preceding_line?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-should_aligned_with_preceding_line-3F","(token)",""],["should_be_unused?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-should_be_unused-3F","()",""],["should_have_comma?","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-should_have_comma-3F","(style, node)",""],["should_indent_relative_to_receiver?","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-should_indent_relative_to_receiver-3F","()",""],["sibling_mixins","RuboCop::Cop::Style::MixinGrouping","RuboCop/Cop/Style/MixinGrouping.html#method-i-sibling_mixins","(send_node)",""],["similar_name_message","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-similar_name_message","(variable)",""],["similarity","RuboCop::StringUtil","RuboCop/StringUtil.html#method-i-similarity","(string_a, string_b)",""],["simple_if_without_break?","RuboCop::Cop::Style::Next","RuboCop/Cop/Style/Next.html#method-i-simple_if_without_break-3F","(node)",""],["simple_method_arg?","RuboCop::Cop::Style::EachWithObject","RuboCop/Cop/Style/EachWithObject.html#method-i-simple_method_arg-3F","(method_arg)","<p>rubocop:endable Metrics/AbcSize\n"],["single_child?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-single_child-3F","(node)",""],["single_interpolation?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-single_interpolation-3F","(node)",""],["single_line?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-single_line-3F","()","<p>Checks whether this is a single line block. This is overridden here because\nthe general version in `Node` …\n"],["single_line_as_modifier?","RuboCop::Cop::StatementModifier","RuboCop/Cop/StatementModifier.html#method-i-single_line_as_modifier-3F","(node)",""],["single_line_condition?","RuboCop::AST::ConditionalNode","RuboCop/AST/ConditionalNode.html#method-i-single_line_condition-3F","()","<p>Checks whether the condition of the node is written on a single line.\n<p>@return [Boolean] whether the condition …\n"],["single_line_conditions_only?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-single_line_conditions_only-3F","()",""],["single_line_ignoring_receiver?","RuboCop::Cop::Layout::MultilineMethodCallBraceLayout","RuboCop/Cop/Layout/MultilineMethodCallBraceLayout.html#method-i-single_line_ignoring_receiver-3F","(node)",""],["single_variable_interpolation?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-single_variable_interpolation-3F","(node)",""],["singular_method?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-singular_method-3F","(method_name)",""],["singular_receiver?","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-singular_receiver-3F","(number)",""],["singularize","RuboCop::Cop::Rails::PluralizationGrammar","RuboCop/Cop/Rails/PluralizationGrammar.html#method-i-singularize","(method_name)",""],["skip_check?","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-skip_check-3F","(base_loc, body_node)",""],["skip_children?","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-skip_children-3F","(asgn_node)",""],["slash_literal?","RuboCop::Cop::Style::RegexpLiteral","RuboCop/Cop/Style/RegexpLiteral.html#method-i-slash_literal-3F","(node)",""],["slice_source","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-slice_source","(source_range, new_begin, new_end)",""],["slow_compare?","RuboCop::Cop::Performance::CompareWithBlock","RuboCop/Cop/Performance/CompareWithBlock.html#method-i-slow_compare-3F","(method, args_a, args_b)",""],["smallest_percent_size","RuboCop::Cop::ArrayMinSize","RuboCop/Cop/ArrayMinSize.html#method-i-smallest_percent_size","(style, ary_size)",""],["smart_loaded_path","RuboCop::Config","RuboCop/Config.html#method-i-smart_loaded_path","()",""],["smart_path","RuboCop::Formatter::DisabledLinesFormatter","RuboCop/Formatter/DisabledLinesFormatter.html#method-i-smart_path","(path)",""],["smart_path","RuboCop::PathUtil","RuboCop/PathUtil.html#method-i-smart_path","(path)",""],["snake_case","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-snake_case","(camel_case_string)",""],["sort!","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-sort-21","()",""],["sort_by_range","RuboCop::Cop::Performance::RedundantSortBy","RuboCop/Cop/Performance/RedundantSortBy.html#method-i-sort_by_range","(send, node)",""],["sorted?","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-sorted-3F","(rescued_groups)",""],["source","RuboCop::Cop::Style::ParallelAssignment::GenericCorrector","RuboCop/Cop/Style/ParallelAssignment/GenericCorrector.html#method-i-source","(node)",""],["source_after_highlight","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-source_after_highlight","(offense)",""],["source_before_highlight","RuboCop::Formatter::HTMLFormatter::ERBContext","RuboCop/Formatter/HTMLFormatter/ERBContext.html#method-i-source_before_highlight","(offense)",""],["source_from_regex_constructor","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-source_from_regex_constructor","(node)",""],["source_from_regex_literal","RuboCop::Cop::Performance::StringReplacement","RuboCop/Cop/Performance/StringReplacement.html#method-i-source_from_regex_literal","(node)",""],["source_line","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-source_line","()","<p>@api private\n"],["source_location","RuboCop::Cop::Lint::DuplicateMethods","RuboCop/Cop/Lint/DuplicateMethods.html#method-i-source_location","(node)",""],["source_path","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-source_path","()",""],["source_range","RuboCop::Cop::Bundler::InsecureProtocolSource","RuboCop/Cop/Bundler/InsecureProtocolSource.html#method-i-source_range","(node)",""],["source_range","RuboCop::Cop::Performance::Sample","RuboCop/Cop/Performance/Sample.html#method-i-source_range","(shuffle_node, node)",""],["source_starting_at","RuboCop::Cop::Performance::Count","RuboCop/Cop/Performance/Count.html#method-i-source_starting_at","(node)",""],["space","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-space","(begin_pos, end_pos, msg)",""],["space_after_arrow?","RuboCop::Cop::Layout::SpaceInLambdaLiteral","RuboCop/Cop/Layout/SpaceInLambdaLiteral.html#method-i-space_after_arrow-3F","(lambda_node)",""],["space_after_missing?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-space_after_missing-3F","(range)",""],["space_before","RuboCop::Cop::Layout::InitialIndentation","RuboCop/Cop/Layout/InitialIndentation.html#method-i-space_before","(token)",""],["space_before_missing?","RuboCop::Cop::Layout::SpaceAroundKeyword","RuboCop/Cop/Layout/SpaceAroundKeyword.html#method-i-space_before_missing-3F","(range)",""],["space_between?","RuboCop::Cop::SurroundingSpace","RuboCop/Cop/SurroundingSpace.html#method-i-space_between-3F","(t1, _t2)",""],["space_detected","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-space_detected","(left_brace, space_plus_brace)",""],["space_forbidden_before_rcurly?","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-space_forbidden_before_rcurly-3F","()",""],["space_inside_left_brace","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-space_inside_left_brace","(left_brace, args_delimiter)",""],["space_inside_right_brace","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-space_inside_right_brace","(right_brace)",""],["space_missing","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-space_missing","(left_brace)",""],["space_missing?","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-space_missing-3F","(t1, t2)",""],["space_missing?","RuboCop::Cop::SpaceBeforePunctuation","RuboCop/Cop/SpaceBeforePunctuation.html#method-i-space_missing-3F","(t1, t2)",""],["space_on_any_side?","RuboCop::Cop::Layout::SpaceInsideStringInterpolation","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html#method-i-space_on_any_side-3F","(node)",""],["space_on_both_sides?","RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault","RuboCop/Cop/Layout/SpaceAroundEqualsInParameterDefault.html#method-i-space_on_both_sides-3F","(arg, equals, value)",""],["space_on_each_side?","RuboCop::Cop::Layout::SpaceInsideStringInterpolation","RuboCop/Cop/Layout/SpaceInsideStringInterpolation.html#method-i-space_on_each_side-3F","(node)",""],["space_range","RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces","RuboCop/Cop/Layout/SpaceInsideHashLiteralBraces.html#method-i-space_range","(token_range)",""],["space_range","RuboCop::Cop::Lint::ParenthesesAsGroupedExpression","RuboCop/Cop/Lint/ParenthesesAsGroupedExpression.html#method-i-space_range","(expr, space_length)",""],["space_required_after?","RuboCop::Cop::SpaceBeforePunctuation","RuboCop/Cop/SpaceBeforePunctuation.html#method-i-space_required_after-3F","(token)",""],["space_required_after_lcurly?","RuboCop::Cop::SpaceBeforePunctuation","RuboCop/Cop/SpaceBeforePunctuation.html#method-i-space_required_after_lcurly-3F","()",""],["space_required_before?","RuboCop::Cop::SpaceAfterPunctuation","RuboCop/Cop/SpaceAfterPunctuation.html#method-i-space_required_before-3F","(token)",""],["space_style_before_rcurly","RuboCop::Cop::Layout::SpaceAfterComma","RuboCop/Cop/Layout/SpaceAfterComma.html#method-i-space_style_before_rcurly","()",""],["space_style_before_rcurly","RuboCop::Cop::Layout::SpaceAfterSemicolon","RuboCop/Cop/Layout/SpaceAfterSemicolon.html#method-i-space_style_before_rcurly","()",""],["spaces_before_left_parenthesis","RuboCop::Cop::Lint::ParenthesesAsGroupedExpression","RuboCop/Cop/Lint/ParenthesesAsGroupedExpression.html#method-i-spaces_before_left_parenthesis","(node)",""],["spec_path","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-spec_path","()",""],["special_inner_call_indentation?","RuboCop::Cop::Layout::FirstParameterIndentation","RuboCop/Cop/Layout/FirstParameterIndentation.html#method-i-special_inner_call_indentation-3F","(node)",""],["special_keyword?","RuboCop::Cop::Lint::LiteralInInterpolation","RuboCop/Cop/Lint/LiteralInInterpolation.html#method-i-special_keyword-3F","(node)",""],["special_keyword_arg?","RuboCop::Cop::Rails::HttpPositionalArguments","RuboCop/Cop/Rails/HttpPositionalArguments.html#method-i-special_keyword_arg-3F","(node)",""],["special_modifier?","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-special_modifier-3F","(node)",""],["specifics","RuboCop::Cop::Layout::SpaceInsideBrackets","RuboCop/Cop/Layout/SpaceInsideBrackets.html#method-i-specifics","()",""],["specifics","RuboCop::Cop::Layout::SpaceInsideParens","RuboCop/Cop/Layout/SpaceInsideParens.html#method-i-specifics","()",""],["specified?","RuboCop::MagicComment","RuboCop/MagicComment.html#method-i-specified-3F","(value)",""],["splat_args?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-splat_args-3F","(node)",""],["splat_argument?","RuboCop::AST::ParameterizedNode","RuboCop/AST/ParameterizedNode.html#method-i-splat_argument-3F","()","<p>Checks whether any argument of the node is a splat argument, i.e. `*splat`.\n<p>@return [Boolean] whether …\n"],["splat_offenses","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-splat_offenses","(when_conditions)",""],["splat_variable_before?","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-splat_variable_before-3F","(first_offense, variables)",""],["split_comment","RuboCop::Cop::Style::AnnotationComment","RuboCop/Cop/Style/AnnotationComment.html#method-i-split_comment","(comment)",""],["split_token","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-split_token","(source_range, match_begin, match_end)",""],["sprintf?","RuboCop::Cop::Lint::FormatParameterMismatch","RuboCop/Cop/Lint/FormatParameterMismatch.html#method-i-sprintf-3F","(node)",""],["square_brackets?","RuboCop::AST::ArrayNode","RuboCop/AST/ArrayNode.html#method-i-square_brackets-3F","()","<p>Checks whether the `array` literal is delimited by square brackets.\n<p>@return [Boolean] whether the array …\n"],["stabby_lambda_with_args?","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-stabby_lambda_with_args-3F","(node)",""],["standard_string_literal?","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-standard_string_literal-3F","(token)",""],["start_for_block_node","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-start_for_block_node","(block_node)",""],["start_line_range","RuboCop::Cop::Lint::EndAlignment","RuboCop/Cop/Lint/EndAlignment.html#method-i-start_line_range","(node)",""],["start_of_new_scope?","RuboCop::Cop::Lint::UselessAccessModifier","RuboCop/Cop/Lint/UselessAccessModifier.html#method-i-start_of_new_scope-3F","(child)",""],["start_with_percent_q_variant?","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-start_with_percent_q_variant-3F","(string)",""],["start_with_shebang?","RuboCop::Cop::Lint::ScriptPermission","RuboCop/Cop/Lint/ScriptPermission.html#method-i-start_with_shebang-3F","(processed_source)",""],["started","RuboCop::Formatter::BaseFormatter","RuboCop/Formatter/BaseFormatter.html#method-i-started","(target_files)","<p>@api public\n<p>Invoked once before any files are inspected.\n<p>@param target_files [Array(String)]\n"],["started","RuboCop::Formatter::DisabledLinesFormatter","RuboCop/Formatter/DisabledLinesFormatter.html#method-i-started","(_target_files)",""],["started","RuboCop::Formatter::FuubarStyleFormatter","RuboCop/Formatter/FuubarStyleFormatter.html#method-i-started","(target_files)",""],["started","RuboCop::Formatter::HTMLFormatter","RuboCop/Formatter/HTMLFormatter.html#method-i-started","(target_files)",""],["started","RuboCop::Formatter::JSONFormatter","RuboCop/Formatter/JSONFormatter.html#method-i-started","(target_files)",""],["started","RuboCop::Formatter::OffenseCountFormatter","RuboCop/Formatter/OffenseCountFormatter.html#method-i-started","(target_files)",""],["started","RuboCop::Formatter::ProgressFormatter","RuboCop/Formatter/ProgressFormatter.html#method-i-started","(target_files)",""],["started","RuboCop::Formatter::SimpleTextFormatter","RuboCop/Formatter/SimpleTextFormatter.html#method-i-started","(_target_files)",""],["started","RuboCop::Formatter::TapFormatter","RuboCop/Formatter/TapFormatter.html#method-i-started","(target_files)",""],["started","RuboCop::Formatter::WorstOffendersFormatter","RuboCop/Formatter/WorstOffendersFormatter.html#method-i-started","(target_files)",""],["starts_with_access_modifier?","RuboCop::Cop::Layout::IndentationWidth","RuboCop/Cop/Layout/IndentationWidth.html#method-i-starts_with_access_modifier-3F","(body_node)",""],["static_method_name","RuboCop::Cop::Rails::DynamicFindBy","RuboCop/Cop/Rails/DynamicFindBy.html#method-i-static_method_name","(method_name)","<p>Returns static method name. If code isn&#39;t wrong, returns nil\n"],["stderr_gvar?","RuboCop::Cop::Style::StderrPuts","RuboCop/Cop/Style/StderrPuts.html#method-i-stderr_gvar-3F","(sym)",""],["stderr_puts_range","RuboCop::Cop::Style::StderrPuts","RuboCop/Cop/Style/StderrPuts.html#method-i-stderr_puts_range","(send)",""],["str_content","RuboCop::Cop::Lint::ImplicitStringConcatenation","RuboCop/Cop/Lint/ImplicitStringConcatenation.html#method-i-str_content","(node)",""],["str_contents","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-str_contents","(source_map)",""],["string_literal?","RuboCop::Cop::Lint::ImplicitStringConcatenation","RuboCop/Cop/Lint/ImplicitStringConcatenation.html#method-i-string_literal-3F","(node)",""],["string_literal?","RuboCop::Cop::Style::UnneededPercentQ","RuboCop/Cop/Style/UnneededPercentQ.html#method-i-string_literal-3F","(node)",""],["string_literal_lines","RuboCop::Cop::Layout::Tab","RuboCop/Cop/Layout/Tab.html#method-i-string_literal_lines","(ast)",""],["string_literals_config","RuboCop::Cop::Style::EmptyLiteral","RuboCop/Cop/Style/EmptyLiteral.html#method-i-string_literals_config","()",""],["string_source","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-string_source","(node)",""],["string_with_slash?","RuboCop::Cop::Rails::FilePath","RuboCop/Cop/Rails/FilePath.html#method-i-string_with_slash-3F","(node)",""],["stripped_source_upto","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-stripped_source_upto","(line)",""],["style","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-style","()",""],["style","RuboCop::Cop::Layout::EmptyLinesAroundBeginBody","RuboCop/Cop/Layout/EmptyLinesAroundBeginBody.html#method-i-style","()",""],["style","RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords","RuboCop/Cop/Layout/EmptyLinesAroundExceptionHandlingKeywords.html#method-i-style","()",""],["style","RuboCop::Cop::Layout::EmptyLinesAroundMethodBody","RuboCop/Cop/Layout/EmptyLinesAroundMethodBody.html#method-i-style","()",""],["style","RuboCop::Cop::Layout::IndentHeredoc","RuboCop/Cop/Layout/IndentHeredoc.html#method-i-style","()",""],["style_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-style_detected","(detected)",""],["style_for_empty_braces","RuboCop::Cop::Layout::SpaceBeforeBlockBraces","RuboCop/Cop/Layout/SpaceBeforeBlockBraces.html#method-i-style_for_empty_braces","()",""],["style_for_empty_braces","RuboCop::Cop::Layout::SpaceInsideBlockBraces","RuboCop/Cop/Layout/SpaceInsideBlockBraces.html#method-i-style_for_empty_braces","()",""],["style_guide_cops_only?","RuboCop::Runner","RuboCop/Runner.html#method-i-style_guide_cops_only-3F","(config)",""],["style_guide_url","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-style_guide_url","()",""],["style_parameter_name","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-style_parameter_name","()",""],["style_parameter_name","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-style_parameter_name","()",""],["style_parameter_name","RuboCop::Cop::Layout::SpaceAroundBlockParameters","RuboCop/Cop/Layout/SpaceAroundBlockParameters.html#method-i-style_parameter_name","()",""],["style_parameter_name","RuboCop::Cop::Lint::BlockAlignment","RuboCop/Cop/Lint/BlockAlignment.html#method-i-style_parameter_name","()",""],["style_parameter_name","RuboCop::Cop::Rails::UniqBeforePluck","RuboCop/Cop/Rails/UniqBeforePluck.html#method-i-style_parameter_name","()",""],["style_parameter_name","RuboCop::Cop::TrailingComma","RuboCop/Cop/TrailingComma.html#method-i-style_parameter_name","()",""],["summary","RuboCop::Formatter::SimpleTextFormatter::Report","RuboCop/Formatter/SimpleTextFormatter/Report.html#method-i-summary","()",""],["super?","RuboCop::Cop::Style::SymbolProc","RuboCop/Cop/Style/SymbolProc.html#method-i-super-3F","(node)",""],["support_autocorrect?","RuboCop::Cop::AutocorrectLogic","RuboCop/Cop/AutocorrectLogic.html#method-i-support_autocorrect-3F","()",""],["support_target_rails_version?","RuboCop::Cop::TargetRailsVersion","RuboCop/Cop/TargetRailsVersion.html#method-i-support_target_rails_version-3F","(version)",""],["support_target_ruby_version?","RuboCop::Cop::TargetRubyVersion","RuboCop/Cop/TargetRubyVersion.html#method-i-support_target_ruby_version-3F","(version)",""],["supported_styles","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-supported_styles","()",""],["supported_types","RuboCop::Cop::Layout::MultilineAssignmentLayout","RuboCop/Cop/Layout/MultilineAssignmentLayout.html#method-i-supported_types","()",""],["suspicious_name?","RuboCop::Cop::Style::OptionHash","RuboCop/Cop/Style/OptionHash.html#method-i-suspicious_name-3F","(arg_name)",""],["swap_range","RuboCop::Cop::OrderedGemNode","RuboCop/Cop/OrderedGemNode.html#method-i-swap_range","(corrector, range1, range2)",""],["sym_indices?","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-sym_indices-3F","(pairs)",""],["symbol_without_quote?","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-symbol_without_quote-3F","(string)",""],["symbols_contain_spaces?","RuboCop::Cop::Style::SymbolArray","RuboCop/Cop/Style/SymbolArray.html#method-i-symbols_contain_spaces-3F","(node)",""],["symlink_protection_triggered?","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-symlink_protection_triggered-3F","(path)",""],["syntactic_alignment_base","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-syntactic_alignment_base","(lhs, rhs)",""],["system_call_err?","RuboCop::Cop::Lint::ShadowedException","RuboCop/Cop/Lint/ShadowedException.html#method-i-system_call_err-3F","(error)",""],["tail","RuboCop::Cop::Style::ConditionalAssignmentHelper","RuboCop/Cop/Style/ConditionalAssignmentHelper.html#method-i-tail","(branch)",""],["tail","RuboCop::Cop::Style::IdenticalConditionalBranches","RuboCop/Cop/Style/IdenticalConditionalBranches.html#method-i-tail","(node)",""],["take_variable_and_default_from_ternary","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-take_variable_and_default_from_ternary","(node)",""],["take_variable_and_default_from_unless","RuboCop::Cop::Style::OrAssignment","RuboCop/Cop/Style/OrAssignment.html#method-i-take_variable_and_default_from_unless","(node)",""],["target_args","RuboCop::Cop::Style::SingleLineBlockParams","RuboCop/Cop/Style/SingleLineBlockParams.html#method-i-target_args","(method_name)",""],["target_files_in_dir","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-target_files_in_dir","(base_dir = Dir.pwd)","<p>Finds all Ruby source files under the current or other supplied directory.\nA Ruby source file is defined …\n"],["target_line","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-target_line","()",""],["target_method_lineno","RuboCop::Cop::Layout::AlignParameters","RuboCop/Cop/Layout/AlignParameters.html#method-i-target_method_lineno","(node)",""],["target_rails_version","RuboCop::Config","RuboCop/Config.html#method-i-target_rails_version","()",""],["target_rails_version","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-target_rails_version","()",""],["target_ruby_source","RuboCop::Config","RuboCop/Config.html#method-i-target_ruby_source","()",""],["target_ruby_version","RuboCop::Config","RuboCop/Config.html#method-i-target_ruby_version","()",""],["target_ruby_version","RuboCop::Cop::Cop","RuboCop/Cop/Cop.html#method-i-target_ruby_version","()",""],["target_ruby_version_to_f!","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-target_ruby_version_to_f-21","(hash)",""],["targets_exception?","RuboCop::Cop::Lint::RescueException","RuboCop/Cop/Lint/RescueException.html#method-i-targets_exception-3F","(rescue_arg_node)",""],["ternary","RuboCop::Cop::Style::TernaryCorrector","RuboCop/Cop/Style/TernaryCorrector.html#method-c-ternary","(condition, if_branch, else_branch)",""],["ternary?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-ternary-3F","()","<p>Checks whether the `if` node is a ternary operator.\n<p>@return [Boolean] whether the `if` node is a ternary …\n"],["ternary_condition?","RuboCop::Cop::Style::ConditionalAssignment","RuboCop/Cop/Style/ConditionalAssignment.html#method-i-ternary_condition-3F","(node)",""],["then?","RuboCop::AST::WhenNode","RuboCop/AST/WhenNode.html#method-i-then-3F","()","<p>Checks whether the `when` node has a `then` keyword.\n<p>@return [Boolean] whether the `when` node has a `then` …\n"],["to_assignments","RuboCop::Cop::Performance::RedundantMerge","RuboCop/Cop/Performance/RedundantMerge.html#method-i-to_assignments","(receiver, pairs)",""],["to_h","RuboCop::Config","RuboCop/Config.html#method-i-to_h","()",""],["to_h","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-to_h","()",""],["to_hash","RuboCop::Config","RuboCop/Config.html#method-i-to_hash","()",""],["to_inspect?","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-to_inspect-3F","(file, hidden_files, base_dir_config)",""],["to_json","RuboCop::CachedData","RuboCop/CachedData.html#method-i-to_json","(offenses)",""],["to_modifier_form","RuboCop::Cop::Style::IfUnlessModifier","RuboCop/Cop/Style/IfUnlessModifier.html#method-i-to_modifier_form","(node)",""],["to_module_name","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-to_module_name","(basename)",""],["to_namespace","RuboCop::Cop::Naming::FileName","RuboCop/Cop/Naming/FileName.html#method-i-to_namespace","(path)",""],["to_normal_if","RuboCop::Cop::Style::MultilineIfModifier","RuboCop/Cop/Style/MultilineIfModifier.html#method-i-to_normal_if","(node)",""],["to_regexp","RuboCop::AST::RegexpNode","RuboCop/AST/RegexpNode.html#method-i-to_regexp","()","<p>@return [Regexp] a regexp of this node\n"],["to_s","RuboCop::Config","RuboCop/Config.html#method-i-to_s","()",""],["to_s","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-to_s","()",""],["to_s","RuboCop::Cop::Offense","RuboCop/Cop/Offense.html#method-i-to_s","()","<p>@api private This is just for debugging purpose.\n"],["to_s","RuboCop::Cop::Severity","RuboCop/Cop/Severity.html#method-i-to_s","()","<p>@api private\n"],["to_s","RuboCop::RSpec::ExpectOffense::AnnotatedSource","RuboCop/RSpec/ExpectOffense/AnnotatedSource.html#method-i-to_s","()","<p>Construct annotated source string (like what we parse)\n<p>Reconstruct a deterministic annotated source string. …\n"],["to_s","RuboCop::Token","RuboCop/Token.html#method-i-to_s","()",""],["to_string_literal","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-to_string_literal","(string)",""],["to_supported_styles","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-to_supported_styles","(enforced_style)",""],["to_symbol_literal","RuboCop::Cop::Util","RuboCop/Cop/Util.html#method-i-to_symbol_literal","(string)",""],["to_ternary","RuboCop::Cop::Style::OneLineConditional","RuboCop/Cop/Style/OneLineConditional.html#method-i-to_ternary","(node)",""],["todo","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-todo","()",""],["token_after_last_string","RuboCop::Cop::Style::LineEndConcatenation","RuboCop/Cop/Style/LineEndConcatenation.html#method-i-token_after_last_string","(successor, base_index)",""],["token_ranges","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-token_ranges","(contents)",""],["token_table","RuboCop::Cop::SurroundingSpace","RuboCop/Cop/SurroundingSpace.html#method-i-token_table","()",""],["tokenize","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-tokenize","(parser)",""],["tokens","RuboCop::Cop::Style::FormatStringToken","RuboCop/Cop/Style/FormatStringToken.html#method-i-tokens","(str_node, &block)","<p>rubocop:enable FormatStringToken\n"],["tokens","RuboCop::MagicComment::EditorComment","RuboCop/MagicComment/EditorComment.html#method-i-tokens","()","<p>Individual tokens composing an editor specific comment string.\n<p>@return [Array&lt;String&gt;]\n"],["tokens_for_lines","RuboCop::Cop::Style::Semicolon","RuboCop/Cop/Style/Semicolon.html#method-i-tokens_for_lines","()",""],["top_level_node?","RuboCop::Cop::Style::MixinUsage","RuboCop/Cop/Style/MixinUsage.html#method-i-top_level_node-3F","(node)",""],["toplevel_dirs","RuboCop::TargetFinder","RuboCop/TargetFinder.html#method-i-toplevel_dirs","(base_dir, flags)",""],["total_offense_count","RuboCop::Formatter::OffenseCountFormatter","RuboCop/Formatter/OffenseCountFormatter.html#method-i-total_offense_count","(offense_counts)",""],["total_offense_count","RuboCop::Formatter::WorstOffendersFormatter","RuboCop/Formatter/WorstOffendersFormatter.html#method-i-total_offense_count","(offense_counts)",""],["trailing_range?","RuboCop::Cop::Lint::UnneededDisable","RuboCop/Cop/Lint/UnneededDisable.html#method-i-trailing_range-3F","(ranges, range)",""],["transform","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-transform","(config)","<p>Returns a new hash where the parameters of the given config hash have been\nreplaced by parameters returned …\n"],["trap_interrupt","RuboCop::CLI","RuboCop/CLI.html#method-i-trap_interrupt","(runner)",""],["traverse_node","RuboCop::Cop::Lint::AssignmentInCondition","RuboCop/Cop/Lint/AssignmentInCondition.html#method-i-traverse_node","(node, types, &block)","<p>each_node/visit_descendants_with_types with :skip_children\n"],["trivial_accessor_kind","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-trivial_accessor_kind","(node)",""],["trivial_delegate?","RuboCop::Cop::Rails::Delegate","RuboCop/Cop/Rails/Delegate.html#method-i-trivial_delegate-3F","(method_name, args, body)",""],["trivial_reader?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-trivial_reader-3F","(node)",""],["trivial_writer?","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-trivial_writer-3F","(node)",""],["tsort_each_child","RuboCop::Cop::Style::ParallelAssignment::AssignmentSorter","RuboCop/Cop/Style/ParallelAssignment/AssignmentSorter.html#method-i-tsort_each_child","(assignment)",""],["tsort_each_node","RuboCop::Cop::Style::ParallelAssignment::AssignmentSorter","RuboCop/Cop/Style/ParallelAssignment/AssignmentSorter.html#method-i-tsort_each_node","()",""],["two_alternatives?","RuboCop::Cop::Layout::CommentIndentation","RuboCop/Cop/Layout/CommentIndentation.html#method-i-two_alternatives-3F","(line)",""],["type","RuboCop::Cop::PercentLiteral","RuboCop/Cop/PercentLiteral.html#method-i-type","(node)",""],["unary_plus_non_offense?","RuboCop::Cop::Layout::ExtraSpacing","RuboCop/Cop/Layout/ExtraSpacing.html#method-i-unary_plus_non_offense-3F","(range)",""],["unexpected_double_quotes?","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-unexpected_double_quotes-3F","(quote)",""],["unexpected_indent_offset","RuboCop::Cop::Layout::AccessModifierIndentation","RuboCop/Cop/Layout/AccessModifierIndentation.html#method-i-unexpected_indent_offset","()","<p>An offset that is not expected, but correct if the configuration is\nchanged.\n"],["unexpected_single_quotes?","RuboCop::Cop::Style::StringLiterals","RuboCop/Cop/Style/StringLiterals.html#method-i-unexpected_single_quotes-3F","(quote)",""],["unexpected_style_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-unexpected_style_detected","(unexpected)",""],["unimportant_missing_cr?","RuboCop::Cop::Layout::EndOfLine","RuboCop/Cop/Layout/EndOfLine.html#method-i-unimportant_missing_cr-3F","(index, last_line, line)","<p>If there is no LF on the last line, we don&#39;t care if there&#39;s no CR.\n"],["union_terms","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-union_terms","(tokens, temp_node, seq_head)",""],["unknown_env_name?","RuboCop::Cop::Rails::UnknownEnv","RuboCop/Cop/Rails/UnknownEnv.html#method-i-unknown_env_name-3F","(name)",""],["unless?","RuboCop::AST::IfNode","RuboCop/AST/IfNode.html#method-i-unless-3F","()","<p>Checks whether this node is an `unless` statement. (This is not true of\nternary operators and `if` statements.) …\n"],["unless_and_nil_check?","RuboCop::Cop::Style::NonNilCheck","RuboCop/Cop/Style/NonNilCheck.html#method-i-unless_and_nil_check-3F","(send_node)",""],["unless_condition","RuboCop::Cop::Rails::Blank","RuboCop/Cop/Rails/Blank.html#method-i-unless_condition","(node, method_call)",""],["unless_condition","RuboCop::Cop::Rails::Present","RuboCop/Cop/Rails/Present.html#method-i-unless_condition","(node, method_call)",""],["unless_else_config","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-unless_else_config","()",""],["unless_else_cop_enabled?","RuboCop::Cop::Style::MissingElse","RuboCop/Cop/Style/MissingElse.html#method-i-unless_else_cop_enabled-3F","()",""],["unnecessary_comment_offense","RuboCop::Cop::Style::FrozenStringLiteralComment","RuboCop/Cop/Style/FrozenStringLiteralComment.html#method-i-unnecessary_comment_offense","(processed_source)",""],["unneeded_brackets?","RuboCop::Cop::Lint::UnneededSplatExpansion","RuboCop/Cop/Lint/UnneededSplatExpansion.html#method-i-unneeded_brackets-3F","(node)",""],["unneeded_ranges","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-unneeded_ranges","(node)",""],["unparenthesized_literal_args?","RuboCop::Cop::Style::Lambda","RuboCop/Cop/Style/Lambda.html#method-i-unparenthesized_literal_args-3F","(args)",""],["unparenthesized_method_call?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-unparenthesized_method_call-3F","(child)",""],["unrecognized_style_detected","RuboCop::Cop::ConfigurableEnforcedStyle","RuboCop/Cop/ConfigurableEnforcedStyle.html#method-i-unrecognized_style_detected","()",""],["unsafe_autocorrect?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-unsafe_autocorrect-3F","(condition)",""],["unsafe_method?","RuboCop::Cop::Style::SafeNavigation","RuboCop/Cop/Style/SafeNavigation.html#method-i-unsafe_method-3F","(send_node)",""],["unused_range","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-unused_range","(node_type, mlhs_node, right)",""],["unused_variables_only?","RuboCop::Cop::Style::TrailingUnderscoreVariable","RuboCop/Cop/Style/TrailingUnderscoreVariable.html#method-i-unused_variables_only-3F","(offense, variables)",""],["unwanted_parentheses","RuboCop::Cop::Style::MethodDefParentheses","RuboCop/Cop/Style/MethodDefParentheses.html#method-i-unwanted_parentheses","(args)",""],["unwanted_parentheses_corrector","RuboCop::Cop::Style::StabbyLambdaParentheses","RuboCop/Cop/Style/StabbyLambdaParentheses.html#method-i-unwanted_parentheses_corrector","(node)",""],["unwind","RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector","RuboCop/Cop/Performance/RedundantMerge/EachWithObjectInspector.html#method-i-unwind","(receiver)",""],["updated_directives","RuboCop::Cop::Generator::RequireFileInjector","RuboCop/Cop/Generator/RequireFileInjector.html#method-i-updated_directives","()",""],["uri_regexp","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-uri_regexp","()",""],["urls","RuboCop::Cop::MessageAnnotator","RuboCop/Cop/MessageAnnotator.html#method-i-urls","()",""],["used?","RuboCop::Cop::VariableForce::Assignment","RuboCop/Cop/VariableForce/Assignment.html#method-i-used-3F","()",""],["used?","RuboCop::Cop::VariableForce::Variable","RuboCop/Cop/VariableForce/Variable.html#method-i-used-3F","()","<p>This is a convenient way to check whether the variable is used in its\nentire variable lifetime. For more …\n"],["user_vars","RuboCop::Cop::Style::GlobalVars","RuboCop/Cop/Style/GlobalVars.html#method-i-user_vars","()",""],["uses_preferred_delimiter?","RuboCop::Cop::Style::PercentLiteralDelimiters","RuboCop/Cop/Style/PercentLiteralDelimiters.html#method-i-uses_preferred_delimiter-3F","(node, type)",""],["valid?","RuboCop::ResultCache","RuboCop/ResultCache.html#method-i-valid-3F","()",""],["valid_argument_types?","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-i-valid_argument_types-3F","()",""],["valid_exceptions","RuboCop::Cop::Lint::RescueType","RuboCop/Cop/Lint/RescueType.html#method-i-valid_exceptions","(exceptions)",""],["valid_line?","RuboCop::Formatter::ClangStyleFormatter","RuboCop/Formatter/ClangStyleFormatter.html#method-i-valid_line-3F","(offense)",""],["valid_name?","RuboCop::Cop::ConfigurableFormatting","RuboCop/Cop/ConfigurableFormatting.html#method-i-valid_name-3F","(node, name, given_style = style)",""],["valid_options?","RuboCop::Cop::Rails::HasManyOrHasOneDependent","RuboCop/Cop/Rails/HasManyOrHasOneDependent.html#method-i-valid_options-3F","(options)",""],["valid_syntax?","RuboCop::ProcessedSource","RuboCop/ProcessedSource.html#method-i-valid_syntax-3F","()",""],["valid_uri?","RuboCop::Cop::Metrics::LineLength","RuboCop/Cop/Metrics/LineLength.html#method-i-valid_uri-3F","(uri_ish_string)",""],["validate","RuboCop::Config","RuboCop/Config.html#method-i-validate","()",""],["validate_compatibility","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-validate_compatibility","()",""],["validate_config","RuboCop::Cop::Layout::MultilineMethodCallIndentation","RuboCop/Cop/Layout/MultilineMethodCallIndentation.html#method-i-validate_config","()",""],["validate_config","RuboCop::Cop::Layout::MultilineOperationIndentation","RuboCop/Cop/Layout/MultilineOperationIndentation.html#method-i-validate_config","()",""],["validate_config","RuboCop::Cop::Team","RuboCop/Cop/Team.html#method-i-validate_config","()",""],["validate_cop_list","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-c-validate_cop_list","(names)","<p>Cop name validation must be done later than option parsing, so it&#39;s not\ncalled from within Options …\n"],["validate_enforced_styles","RuboCop::Config","RuboCop/Config.html#method-i-validate_enforced_styles","(valid_cop_names)",""],["validate_exclude_limit_option","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-validate_exclude_limit_option","(args)",""],["validate_options_vs_config","RuboCop::CLI","RuboCop/CLI.html#method-i-validate_options_vs_config","()",""],["validate_parallel","RuboCop::OptionsValidator","RuboCop/OptionsValidator.html#method-i-validate_parallel","()",""],["validate_parameter_names","RuboCop::Config","RuboCop/Config.html#method-i-validate_parameter_names","(valid_cop_names)",""],["validate_section_presence","RuboCop::Config","RuboCop/Config.html#method-i-validate_section_presence","(name)",""],["validate_syntax_cop","RuboCop::Config","RuboCop/Config.html#method-i-validate_syntax_cop","(valid_cop_names)",""],["value","RuboCop::AST::HashElementNode","RuboCop/AST/HashElementNode.html#method-i-value","()","<p>Returns the value of this `hash` element.\n<p>@note For keyword splats, this returns the whole node\n<p>@return …\n"],["value_delta","RuboCop::AST::HashElementNode","RuboCop/AST/HashElementNode.html#method-i-value_delta","(other)","<p>Returns the delta between this element&#39;s value and the argument&#39;s.\n<p>@note Keyword splats always …\n"],["value_delta","RuboCop::AST::HashElementNode::HashElementDelta","RuboCop/AST/HashElementNode/HashElementDelta.html#method-i-value_delta","()",""],["value_delta","RuboCop::Cop::HashAlignment::SeparatorAlignment","RuboCop/Cop/HashAlignment/SeparatorAlignment.html#method-i-value_delta","(first_pair, current_pair)",""],["value_delta","RuboCop::Cop::HashAlignment::TableAlignment","RuboCop/Cop/HashAlignment/TableAlignment.html#method-i-value_delta","(first_pair, current_pair)",""],["value_used?","RuboCop::Cop::Performance::RedundantMerge::EachWithObjectInspector","RuboCop/Cop/Performance/RedundantMerge/EachWithObjectInspector.html#method-i-value_used-3F","()",""],["values","RuboCop::AST::ArrayNode","RuboCop/AST/ArrayNode.html#method-i-values","()","<p>Returns an array of all value nodes in the `array` literal.\n<p>@return [Array&lt;Node&gt;] an array of value …\n"],["values","RuboCop::AST::HashNode","RuboCop/AST/HashNode.html#method-i-values","()","<p>Returns an array of all the values in the `hash` literal.\n<p>@return [Array&lt;Node&gt;] an array of values …\n"],["var_nodes","RuboCop::Cop::Style::VariableInterpolation","RuboCop/Cop/Style/VariableInterpolation.html#method-i-var_nodes","(nodes)",""],["variable","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-variable","()","<p>Returns the iteration variable of the `for` loop.\n<p>@return [Node] The iteration variable of the `for` loop …\n"],["variable_alignment?","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-variable_alignment-3F","(whole_expression, rhs, end_alignment_style)",""],["variable_exist?","RuboCop::Cop::VariableForce::VariableTable","RuboCop/Cop/VariableForce/VariableTable.html#method-i-variable_exist-3F","(name)",""],["variable_in_mass_assignment?","RuboCop::Cop::Style::MethodCallWithoutArgsParentheses","RuboCop/Cop/Style/MethodCallWithoutArgsParentheses.html#method-i-variable_in_mass_assignment-3F","(variable_name, node)",""],["variable_interpolation?","RuboCop::Cop::Style::UnneededInterpolation","RuboCop/Cop/Style/UnneededInterpolation.html#method-i-variable_interpolation-3F","(node)",""],["variable_like_method_invocation?","RuboCop::Cop::Lint::UselessAssignment","RuboCop/Cop/Lint/UselessAssignment.html#method-i-variable_like_method_invocation-3F","(node)",""],["variable_name","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-variable_name","(node)",""],["variable_type","RuboCop::Cop::Lint::UnusedBlockArgument","RuboCop/Cop/Lint/UnusedBlockArgument.html#method-i-variable_type","(variable)",""],["variable_used?","RuboCop::Cop::Lint::UnusedArgument","RuboCop/Cop/Lint/UnusedArgument.html#method-i-variable_used-3F","(variable)",""],["variables_in_node","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-variables_in_node","(node)",""],["variables_in_simple_node","RuboCop::Cop::Style::MultipleComparison","RuboCop/Cop/Style/MultipleComparison.html#method-i-variables_in_simple_node","(node)",""],["version","RuboCop::Version","RuboCop/Version.html#method-c-version","(debug = false)",""],["void_context?","RuboCop::AST::BlockNode","RuboCop/AST/BlockNode.html#method-i-void_context-3F","()","<p>Checks whether this node body is a void context.\n<p>@return [Boolean] whether the `block` node body is a …\n"],["void_context?","RuboCop::AST::DefNode","RuboCop/AST/DefNode.html#method-i-void_context-3F","()","<p>Checks whether this node body is a void context.\n<p>@return [Boolean] whether the `def` node body is a void …\n"],["void_context?","RuboCop::AST::ForNode","RuboCop/AST/ForNode.html#method-i-void_context-3F","()","<p>Checks whether this node body is a void context. Always `true` for `for`.\n<p>@return [true] whether the `for` …\n"],["void_context_method?","RuboCop::Cop::Lint::ReturnInVoidContext","RuboCop/Cop/Lint/ReturnInVoidContext.html#method-i-void_context_method-3F","(method_name)",""],["walk","RuboCop::AST::Traversal","RuboCop/AST/Traversal.html#method-i-walk","(node)",""],["warm_cache","RuboCop::Runner","RuboCop/Runner.html#method-i-warm_cache","(target_files)","<p>Warms up the RuboCop cache by forking a suitable number of rubocop\ninstances that each inspects its alotted …\n"],["warn_about_unrecognized_cops","RuboCop::Config","RuboCop/Config.html#method-i-warn_about_unrecognized_cops","(invalid_cop_names)",""],["when_branch_range","RuboCop::Cop::Performance::CaseWhenSplat","RuboCop/Cop/Performance/CaseWhenSplat.html#method-i-when_branch_range","(when_node)",""],["when_branches","RuboCop::AST::CaseNode","RuboCop/AST/CaseNode.html#method-i-when_branches","()","<p>Returns an array of all the when branches in the `case` statement.\n<p>@return [Array&lt;WhenNode&gt;] an …\n"],["white_space_range","RuboCop::Cop::Style::ConditionalCorrectorHelper","RuboCop/Cop/Style/ConditionalCorrectorHelper.html#method-i-white_space_range","(node, column)",""],["whitelist","RuboCop::Cop::Lint::SafeNavigationChain","RuboCop/Cop/Lint/SafeNavigationChain.html#method-i-whitelist","()",""],["whitelist","RuboCop::Cop::Rails::DynamicFindBy","RuboCop/Cop/Rails/DynamicFindBy.html#method-i-whitelist","()",""],["whitelist","RuboCop::Cop::Style::TrivialAccessors","RuboCop/Cop/Style/TrivialAccessors.html#method-i-whitelist","()",""],["whitelisted?","RuboCop::Cop::Style::NestedParenthesizedCalls","RuboCop/Cop/Style/NestedParenthesizedCalls.html#method-i-whitelisted-3F","(send_node)",""],["whitelisted_methods","RuboCop::Cop::Style::NestedParenthesizedCalls","RuboCop/Cop/Style/NestedParenthesizedCalls.html#method-i-whitelisted_methods","()",""],["whitespace_after?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-whitespace_after-3F","(range, length = 1)",""],["whitespace_after?","RuboCop::Cop::Style::TernaryParentheses","RuboCop/Cop/Style/TernaryParentheses.html#method-i-whitespace_after-3F","(node)",""],["whitespace_after_operator?","RuboCop::Cop::Layout::SpaceAfterNot","RuboCop/Cop/Layout/SpaceAfterNot.html#method-i-whitespace_after_operator-3F","(node)",""],["whitespace_before?","RuboCop::Cop::Style::BlockDelimiters","RuboCop/Cop/Style/BlockDelimiters.html#method-i-whitespace_before-3F","(range)",""],["whitespace_before_arg","RuboCop::Cop::Style::AndOr","RuboCop/Cop/Style/AndOr.html#method-i-whitespace_before_arg","(node)",""],["whitespace_range","RuboCop::Cop::EndKeywordAlignment","RuboCop/Cop/EndKeywordAlignment.html#method-i-whitespace_range","(node)",""],["whitespace_range","RuboCop::Cop::Layout::CaseIndentation","RuboCop/Cop/Layout/CaseIndentation.html#method-i-whitespace_range","(node)",""],["whitespace_range","RuboCop::Cop::Layout::RescueEnsureAlignment","RuboCop/Cop/Layout/RescueEnsureAlignment.html#method-i-whitespace_range","(node)",""],["windows?","RuboCop::Platform","RuboCop/Platform.html#method-c-windows-3F","()",""],["with","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-with","(cops)",""],["with_color","RuboCop::Formatter::FuubarStyleFormatter","RuboCop/Formatter/FuubarStyleFormatter.html#method-i-with_color","()",""],["with_cop_error_handling","RuboCop::Cop::Commissioner","RuboCop/Cop/Commissioner.html#method-i-with_cop_error_handling","(cop, node = nil)","<p>Allow blind rescues here, since we&#39;re absorbing and packaging or\nre-raising exceptions that can be …\n"],["with_department","RuboCop::Cop::Badge","RuboCop/Cop/Badge.html#method-i-with_department","(department)",""],["with_department","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-with_department","(department)","<p>@return [Registry] Cops for that specific department.\n"],["with_index_range","RuboCop::Cop::Lint::RedundantWithIndex","RuboCop/Cop/Lint/RedundantWithIndex.html#method-i-with_index_range","(send)",""],["with_object_range","RuboCop::Cop::Lint::RedundantWithObject","RuboCop/Cop/Lint/RedundantWithObject.html#method-i-with_object_range","(send)",""],["with_offense_annotations","RuboCop::RSpec::ExpectOffense::AnnotatedSource","RuboCop/RSpec/ExpectOffense/AnnotatedSource.html#method-i-with_offense_annotations","(offenses)","<p>Annotate the source code with the RuboCop offenses provided\n<p>@param offenses [Array&lt;RuboCop::Cop::Offense&gt;] …\n"],["with_temp_node","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-with_temp_node","(cur_node)",""],["with_temp_variable","RuboCop::NodePattern::Compiler","RuboCop/NodePattern/Compiler.html#method-i-with_temp_variable","()",""],["within?","RuboCop::Cop::AutocorrectAlignment","RuboCop/Cop/AutocorrectAlignment.html#method-i-within-3F","(inner, outer)",""],["within_change_method?","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-within_change_method-3F","(node)",""],["within_reversible_block?","RuboCop::Cop::Rails::ReversibleMigration","RuboCop/Cop/Rails/ReversibleMigration.html#method-i-within_reversible_block-3F","(node)",""],["without_department","RuboCop::Cop::Registry","RuboCop/Cop/Registry.html#method-i-without_department","(department)","<p>@return [Registry] Cops not for a specific department.\n"],["word_regex","RuboCop::Cop::Style::WordArray","RuboCop/Cop/Style/WordArray.html#method-i-word_regex","()",""],["word_symbol_pair?","RuboCop::Cop::Style::HashSyntax","RuboCop/Cop/Style/HashSyntax.html#method-i-word_symbol_pair-3F","(pair)",""],["write_attribute_replacement","RuboCop::Cop::Rails::ReadWriteAttribute","RuboCop/Cop/Rails/ReadWriteAttribute.html#method-i-write_attribute_replacement","(node)",""],["write_source","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-write_source","()",""],["write_spec","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-write_spec","()",""],["write_unless_file_exists","RuboCop::Cop::Generator","RuboCop/Cop/Generator.html#method-i-write_unless_file_exists","(path, contents)",""],["wrong_method_name","RuboCop::Cop::Rails::RequestReferer","RuboCop/Cop/Rails/RequestReferer.html#method-i-wrong_method_name","()",""],["wrong_quotes?","RuboCop::Cop::StringLiteralsHelp","RuboCop/Cop/StringLiteralsHelp.html#method-i-wrong_quotes-3F","(node)",""],["yaml_safe_load","RuboCop::ConfigLoader","RuboCop/ConfigLoader.html#method-c-yaml_safe_load","(yaml_code, filename)",""],["yoda_condition?","RuboCop::Cop::Style::YodaCondition","RuboCop/Cop/Style/YodaCondition.html#method-i-yoda_condition-3F","(node)",""],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2012-17 Bozhidar Batsov\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p><img src=\"https://badge.fury.io/rb/rubocop.svg\">\n<img\nsrc=\"https://gemnasium.com/bbatsov/rubocop.svg\"> ...\n"]]}}