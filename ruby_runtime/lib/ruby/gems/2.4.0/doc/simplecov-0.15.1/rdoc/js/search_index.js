var search_data = {"index":{"searchIndex":["coverage","rails","simplecov","arrayfilter","blockfilter","commandguesser","configuration","exitcodes","filelist","filter","formatter","multiformatter","instancemethods","simpleformatter","lastrun","linesclassifier","profiles","railtie","rawcoverage","regexfilter","result","resultmerger","sourcefile","line","stringfilter","[]()","__broken_result__()","adapters()","add_filter()","add_group()","add_not_loaded_files()","at_exit()","build_filter()","build_lines()","class_for_argument()","classify()","clear_result()","clear_resultset()","command_name()","command_name()","configure()","coverage()","coverage_dir()","coverage_exceeding_source_warn()","coverage_path()","covered?()","covered_lines()","covered_lines()","covered_percent()","covered_percent()","covered_percentages()","covered_strength()","covered_strength()","created_at()","define()","filenames()","filter!()","filtered()","filters()","format()","format()","format!()","formatter()","formatters()","formatters=()","from_command_line_options()","from_defined_constants()","from_env()","from_hash()","grouped()","groups()","groups()","guess()","last_run_path()","least_covered_file()","line()","lines()","lines_of_code()","lines_of_code()","lines_strength()","load()","load_adapter()","load_profile()","matches?()","matches?()","matches?()","matches?()","matches?()","maximum_coverage_drop()","merge_file_coverage()","merge_line_coverage()","merge_results()","merge_results()","merge_resultsets()","merge_timeout()","merged_result()","minimum_coverage()","minimum_coverage_by_file()","missed?()","missed_lines()","missed_lines()","never?()","never_lines()","never_lines()","new()","new()","new()","new()","new()","new()","no_cov_line()","no_lines?()","nocov_token()","parse_filter()","passes?()","process_skipped_lines()","profiles()","project_filename()","project_name()","read()","refuse_coverage_drop()","relevant_lines()","result()","result()","result?()","results()","resultset()","resultset_path()","resultset_writelock()","root()","round_float()","skip_token()","skipped!()","skipped?()","skipped_lines()","skipped_lines()","source()","source_lines()","src()","start()","status()","store_result()","stored_data()","synchronize_resultset()","to_hash()","track_files()","tracked_files()","usable?()","use_merging()","write()","tasks.rake"],"longSearchIndex":["coverage","rails","simplecov","simplecov::arrayfilter","simplecov::blockfilter","simplecov::commandguesser","simplecov::configuration","simplecov::exitcodes","simplecov::filelist","simplecov::filter","simplecov::formatter","simplecov::formatter::multiformatter","simplecov::formatter::multiformatter::instancemethods","simplecov::formatter::simpleformatter","simplecov::lastrun","simplecov::linesclassifier","simplecov::profiles","simplecov::railtie","simplecov::rawcoverage","simplecov::regexfilter","simplecov::result","simplecov::resultmerger","simplecov::sourcefile","simplecov::sourcefile::line","simplecov::stringfilter","simplecov::formatter::multiformatter::[]()","coverage::__broken_result__()","simplecov::configuration#adapters()","simplecov::configuration#add_filter()","simplecov::configuration#add_group()","simplecov::add_not_loaded_files()","simplecov::configuration#at_exit()","simplecov::filter::build_filter()","simplecov::sourcefile#build_lines()","simplecov::filter::class_for_argument()","simplecov::linesclassifier#classify()","simplecov::clear_result()","simplecov::resultmerger::clear_resultset()","simplecov::configuration#command_name()","simplecov::result#command_name()","simplecov::configuration#configure()","simplecov::result#coverage()","simplecov::configuration#coverage_dir()","simplecov::sourcefile#coverage_exceeding_source_warn()","simplecov::configuration#coverage_path()","simplecov::sourcefile::line#covered?()","simplecov::filelist#covered_lines()","simplecov::sourcefile#covered_lines()","simplecov::filelist#covered_percent()","simplecov::sourcefile#covered_percent()","simplecov::filelist#covered_percentages()","simplecov::filelist#covered_strength()","simplecov::sourcefile#covered_strength()","simplecov::result#created_at()","simplecov::profiles#define()","simplecov::result#filenames()","simplecov::result#filter!()","simplecov::filtered()","simplecov::configuration#filters()","simplecov::formatter::multiformatter::instancemethods#format()","simplecov::formatter::simpleformatter#format()","simplecov::result#format!()","simplecov::configuration#formatter()","simplecov::configuration#formatters()","simplecov::configuration#formatters=()","simplecov::commandguesser::from_command_line_options()","simplecov::commandguesser::from_defined_constants()","simplecov::commandguesser::from_env()","simplecov::result::from_hash()","simplecov::grouped()","simplecov::configuration#groups()","simplecov::result#groups()","simplecov::commandguesser::guess()","simplecov::lastrun::last_run_path()","simplecov::filelist#least_covered_file()","simplecov::sourcefile#line()","simplecov::sourcefile#lines()","simplecov::filelist#lines_of_code()","simplecov::sourcefile#lines_of_code()","simplecov::sourcefile#lines_strength()","simplecov::profiles#load()","simplecov::load_adapter()","simplecov::load_profile()","simplecov::arrayfilter#matches?()","simplecov::blockfilter#matches?()","simplecov::filter#matches?()","simplecov::regexfilter#matches?()","simplecov::stringfilter#matches?()","simplecov::configuration#maximum_coverage_drop()","simplecov::rawcoverage#merge_file_coverage()","simplecov::rawcoverage#merge_line_coverage()","simplecov::rawcoverage#merge_results()","simplecov::resultmerger::merge_results()","simplecov::rawcoverage#merge_resultsets()","simplecov::configuration#merge_timeout()","simplecov::resultmerger::merged_result()","simplecov::configuration#minimum_coverage()","simplecov::configuration#minimum_coverage_by_file()","simplecov::sourcefile::line#missed?()","simplecov::filelist#missed_lines()","simplecov::sourcefile#missed_lines()","simplecov::sourcefile::line#never?()","simplecov::filelist#never_lines()","simplecov::sourcefile#never_lines()","simplecov::arrayfilter::new()","simplecov::filter::new()","simplecov::formatter::multiformatter::new()","simplecov::result::new()","simplecov::sourcefile::new()","simplecov::sourcefile::line::new()","simplecov::linesclassifier::no_cov_line()","simplecov::sourcefile#no_lines?()","simplecov::configuration#nocov_token()","simplecov::configuration#parse_filter()","simplecov::filter#passes?()","simplecov::sourcefile#process_skipped_lines()","simplecov::configuration#profiles()","simplecov::sourcefile#project_filename()","simplecov::configuration#project_name()","simplecov::lastrun::read()","simplecov::configuration#refuse_coverage_drop()","simplecov::sourcefile#relevant_lines()","coverage::result()","simplecov::result()","simplecov::result?()","simplecov::resultmerger::results()","simplecov::resultmerger::resultset()","simplecov::resultmerger::resultset_path()","simplecov::resultmerger::resultset_writelock()","simplecov::configuration#root()","simplecov::sourcefile#round_float()","simplecov::configuration#skip_token()","simplecov::sourcefile::line#skipped!()","simplecov::sourcefile::line#skipped?()","simplecov::filelist#skipped_lines()","simplecov::sourcefile#skipped_lines()","simplecov::sourcefile#source()","simplecov::sourcefile#source_lines()","simplecov::sourcefile#src()","simplecov::start()","simplecov::sourcefile::line#status()","simplecov::resultmerger::store_result()","simplecov::resultmerger::stored_data()","simplecov::resultmerger::synchronize_resultset()","simplecov::result#to_hash()","simplecov::configuration#track_files()","simplecov::configuration#tracked_files()","simplecov::usable?()","simplecov::configuration#use_merging()","simplecov::lastrun::write()",""],"info":[["Coverage","","Coverage.html","","<p>Coverage for JRuby &lt; 1.7.0 does not work correctly\n\n<pre>- does not distinguish lines that cannot be executed ...</pre>\n"],["Rails","","Rails.html","",""],["SimpleCov","","SimpleCov.html","","<p>Helper that tries to find out what test suite is running (for\nSimpleCov.command_name)\n<p>Bundles the configuration …\n"],["SimpleCov::ArrayFilter","","SimpleCov/ArrayFilter.html","",""],["SimpleCov::BlockFilter","","SimpleCov/BlockFilter.html","",""],["SimpleCov::CommandGuesser","","SimpleCov/CommandGuesser.html","",""],["SimpleCov::Configuration","","SimpleCov/Configuration.html","",""],["SimpleCov::ExitCodes","","SimpleCov/ExitCodes.html","",""],["SimpleCov::FileList","","SimpleCov/FileList.html","",""],["SimpleCov::Filter","","SimpleCov/Filter.html","","<p>Base filter class. Inherit from this to create custom filters, and\noverwrite the passes?(source_file) …\n"],["SimpleCov::Formatter","","SimpleCov/Formatter.html","","<p>TODO: Documentation on how to build your own formatters\n"],["SimpleCov::Formatter::MultiFormatter","","SimpleCov/Formatter/MultiFormatter.html","",""],["SimpleCov::Formatter::MultiFormatter::InstanceMethods","","SimpleCov/Formatter/MultiFormatter/InstanceMethods.html","",""],["SimpleCov::Formatter::SimpleFormatter","","SimpleCov/Formatter/SimpleFormatter.html","",""],["SimpleCov::LastRun","","SimpleCov/LastRun.html","",""],["SimpleCov::LinesClassifier","","SimpleCov/LinesClassifier.html","","<p>Classifies whether lines are relevant for code coverage analysis. Comments\n&amp; whitespace lines, and …\n"],["SimpleCov::Profiles","","SimpleCov/Profiles.html","",""],["SimpleCov::Railtie","","SimpleCov/Railtie.html","",""],["SimpleCov::RawCoverage","","SimpleCov/RawCoverage.html","",""],["SimpleCov::RegexFilter","","SimpleCov/RegexFilter.html","",""],["SimpleCov::Result","","SimpleCov/Result.html","","<p>A simplecov code coverage result, initialized from the Hash Ruby 1.9&#39;s\nbuilt-in coverage library …\n"],["SimpleCov::ResultMerger","","SimpleCov/ResultMerger.html","",""],["SimpleCov::SourceFile","","SimpleCov/SourceFile.html","","<p>Representation of a source file including it&#39;s coverage data, source\ncode, source lines and featuring …\n"],["SimpleCov::SourceFile::Line","","SimpleCov/SourceFile/Line.html","","<p>Representation of a single line in a source file including this specific\nline&#39;s source code, line_number …\n"],["SimpleCov::StringFilter","","SimpleCov/StringFilter.html","",""],["[]","SimpleCov::Formatter::MultiFormatter","SimpleCov/Formatter/MultiFormatter.html#method-c-5B-5D","(*args)",""],["__broken_result__","Coverage","Coverage.html#method-c-__broken_result__","()",""],["adapters","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-adapters","()",""],["add_filter","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-add_filter","(filter_argument = nil, &filter_proc)","<p>Add a filter to the processing chain. There are four ways to define a\nfilter:\n<p>as a String that will then …\n"],["add_group","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-add_group","(group_name, filter_argument = nil, &filter_proc)","<p>Define a group for files. Works similar to add_filter, only that the first\nargument is the desired group …\n"],["add_not_loaded_files","SimpleCov","SimpleCov.html#method-c-add_not_loaded_files","(result)","<p>Finds files that were to be tracked but were not loaded and initializes the\nline-by-line coverage to …\n"],["at_exit","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-at_exit","(&block)","<p>Gets or sets the behavior to process coverage results.\n<p>By default, it will call SimpleCov.result.format! …\n"],["build_filter","SimpleCov::Filter","SimpleCov/Filter.html#method-c-build_filter","(filter_argument)",""],["build_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-build_lines","()",""],["class_for_argument","SimpleCov::Filter","SimpleCov/Filter.html#method-c-class_for_argument","(filter_argument)",""],["classify","SimpleCov::LinesClassifier","SimpleCov/LinesClassifier.html#method-i-classify","(lines)",""],["clear_result","SimpleCov","SimpleCov.html#method-c-clear_result","()","<p>Clear out the previously cached .result. Primarily useful in testing\n"],["clear_resultset","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-clear_resultset","()","<p>Clear out the previously cached .resultset\n"],["command_name","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-command_name","(name = nil)","<p>The name of the command (a.k.a. Test Suite) currently running. Used for\nresult merging and caching.  …\n"],["command_name","SimpleCov::Result","SimpleCov/Result.html#method-i-command_name","()","<p>The command name that launched this result. Delegated to\nSimpleCov.command_name if not set manually\n"],["configure","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-configure","(&block)","<p>Allows you to configure simplecov in a block instead of prepending\nSimpleCov to all config methods you&#39;re …\n"],["coverage","SimpleCov::Result","SimpleCov/Result.html#method-i-coverage","()",""],["coverage_dir","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-coverage_dir","(dir = nil)","<p>The name of the output and cache directory. Defaults to &#39;coverage&#39;\n<p>Configure with SimpleCov.coverage_dir …\n"],["coverage_exceeding_source_warn","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-coverage_exceeding_source_warn","()","<p>Warning to identify condition from Issue #56\n"],["coverage_path","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-coverage_path","()","<p>Returns the full path to the output directory using SimpleCov.root and\nSimpleCov.coverage_dir, so you …\n"],["covered?","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-i-covered-3F","()","<p>Returns true if this is a line that has been covered\n"],["covered_lines","SimpleCov::FileList","SimpleCov/FileList.html#method-i-covered_lines","()","<p>Returns the count of lines that have coverage\n"],["covered_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-covered_lines","()","<p>Returns all covered lines as SimpleCov::SourceFile::Line\n"],["covered_percent","SimpleCov::FileList","SimpleCov/FileList.html#method-i-covered_percent","()","<p>Computes the coverage based upon lines covered and lines missed @return\n[Float]\n"],["covered_percent","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-covered_percent","()","<p>The coverage for this file in percent. 0 if the file has no relevant lines\n"],["covered_percentages","SimpleCov::FileList","SimpleCov/FileList.html#method-i-covered_percentages","()","<p>Computes the coverage based upon lines covered and lines missed for each\nfile Returns an array with all …\n"],["covered_strength","SimpleCov::FileList","SimpleCov/FileList.html#method-i-covered_strength","()","<p>Computes the strength (hits / line) based upon lines covered and lines\nmissed @return [Float]\n"],["covered_strength","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-covered_strength","()",""],["created_at","SimpleCov::Result","SimpleCov/Result.html#method-i-created_at","()","<p>Defines when this result has been created. Defaults to Time.now\n"],["define","SimpleCov::Profiles","SimpleCov/Profiles.html#method-i-define","(name, &blk)","<p>Define a SimpleCov profile:\n\n<pre>SimpleCov.profiles.define &#39;rails&#39; do\n  # Same as SimpleCov.configure do .. ...</pre>\n"],["filenames","SimpleCov::Result","SimpleCov/Result.html#method-i-filenames","()","<p>Returns all filenames for source files contained in this result\n"],["filter!","SimpleCov::Result","SimpleCov/Result.html#method-i-filter-21","()","<p>Applies all configured SimpleCov filters on this result&#39;s source files\n"],["filtered","SimpleCov","SimpleCov.html#method-c-filtered","(files)","<p>Applies the configured filters to the given array of SimpleCov::SourceFile\nitems\n"],["filters","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-filters","()","<p>Returns the list of configured filters. Add filters using\nSimpleCov.add_filter.\n"],["format","SimpleCov::Formatter::MultiFormatter::InstanceMethods","SimpleCov/Formatter/MultiFormatter/InstanceMethods.html#method-i-format","(result)",""],["format","SimpleCov::Formatter::SimpleFormatter","SimpleCov/Formatter/SimpleFormatter.html#method-i-format","(result)","<p>Takes a SimpleCov::Result and generates a string out of it\n"],["format!","SimpleCov::Result","SimpleCov/Result.html#method-i-format-21","()","<p>Applies the configured SimpleCov.formatter on this result\n"],["formatter","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-formatter","(formatter = nil)","<p>Gets or sets the configured formatter.\n<p>Configure with: SimpleCov.formatter(SimpleCov::Formatter::SimpleFormatter)\n…\n"],["formatters","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-formatters","()","<p>Gets the configured formatters.\n"],["formatters=","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-formatters-3D","(formatters)","<p>Sets the configured formatters.\n"],["from_command_line_options","SimpleCov::CommandGuesser","SimpleCov/CommandGuesser.html#method-c-from_command_line_options","()",""],["from_defined_constants","SimpleCov::CommandGuesser","SimpleCov/CommandGuesser.html#method-c-from_defined_constants","()",""],["from_env","SimpleCov::CommandGuesser","SimpleCov/CommandGuesser.html#method-c-from_env","()",""],["from_hash","SimpleCov::Result","SimpleCov/Result.html#method-c-from_hash","(hash)","<p>Loads a SimpleCov::Result#to_hash dump\n"],["grouped","SimpleCov","SimpleCov.html#method-c-grouped","(files)","<p>Applies the configured groups to the given array of SimpleCov::SourceFile\nitems\n"],["groups","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-groups","()","<p>Returns the configured groups. Add groups using SimpleCov.add_group\n"],["groups","SimpleCov::Result","SimpleCov/Result.html#method-i-groups","()","<p>Returns a Hash of groups for this result. Define groups using\nSimpleCov.add_group &#39;Models&#39;, &#39;app/models&#39; …\n"],["guess","SimpleCov::CommandGuesser","SimpleCov/CommandGuesser.html#method-c-guess","()",""],["last_run_path","SimpleCov::LastRun","SimpleCov/LastRun.html#method-c-last_run_path","()",""],["least_covered_file","SimpleCov::FileList","SimpleCov/FileList.html#method-i-least_covered_file","()","<p>Finds the least covered file and returns that file&#39;s name\n"],["line","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-line","(number)","<p>Access SimpleCov::SourceFile::Line source lines by line number\n"],["lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-lines","()","<p>Returns all source lines for this file as instances of\nSimpleCov::SourceFile::Line, and thus including …\n"],["lines_of_code","SimpleCov::FileList","SimpleCov/FileList.html#method-i-lines_of_code","()","<p>Returns the overall amount of relevant lines of code across all files in\nthis list\n"],["lines_of_code","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-lines_of_code","()","<p>Returns the number of relevant lines (covered + missed)\n"],["lines_strength","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-lines_strength","()",""],["load","SimpleCov::Profiles","SimpleCov/Profiles.html#method-i-load","(name)","<p>Applies the profile of given name on SimpleCov.configure\n"],["load_adapter","SimpleCov","SimpleCov.html#method-c-load_adapter","(name)",""],["load_profile","SimpleCov","SimpleCov.html#method-c-load_profile","(name)","<p>Applies the profile of given name on SimpleCov configuration\n"],["matches?","SimpleCov::ArrayFilter","SimpleCov/ArrayFilter.html#method-i-matches-3F","(source_files_list)","<p>Returns true if any of the filters in the array match the given source\nfile. Configure this Filter like …\n"],["matches?","SimpleCov::BlockFilter","SimpleCov/BlockFilter.html#method-i-matches-3F","(source_file)","<p>Returns true if the block given when initializing this filter with\nBlockFilter.new {|src_file| … } …\n"],["matches?","SimpleCov::Filter","SimpleCov/Filter.html#method-i-matches-3F","(_)",""],["matches?","SimpleCov::RegexFilter","SimpleCov/RegexFilter.html#method-i-matches-3F","(source_file)","<p>Returns true when the given source file&#39;s filename matches the regex\nconfigured when initializing …\n"],["matches?","SimpleCov::StringFilter","SimpleCov/StringFilter.html#method-i-matches-3F","(source_file)","<p>Returns true when the given source file&#39;s filename matches the string\nconfigured when initializing …\n"],["maximum_coverage_drop","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-maximum_coverage_drop","(coverage_drop = nil)","<p>Defines the maximum coverage drop at once allowed for the testsuite to\npass. SimpleCov will return non-zero …\n"],["merge_file_coverage","SimpleCov::RawCoverage","SimpleCov/RawCoverage.html#method-i-merge_file_coverage","(file1, file2)",""],["merge_line_coverage","SimpleCov::RawCoverage","SimpleCov/RawCoverage.html#method-i-merge_line_coverage","(count1, count2)",""],["merge_results","SimpleCov::RawCoverage","SimpleCov/RawCoverage.html#method-i-merge_results","(*results)","<p>Merges multiple Coverage.result hashes\n"],["merge_results","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-merge_results","(*results)","<p>Merge two or more SimpleCov::Results into a new one with merged coverage\ndata and the command_name for …\n"],["merge_resultsets","SimpleCov::RawCoverage","SimpleCov/RawCoverage.html#method-i-merge_resultsets","(result1, result2)","<p>Merges two Coverage.result hashes\n"],["merge_timeout","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-merge_timeout","(seconds = nil)","<p>Defines the maximum age (in seconds) of a resultset to still be included in\nmerged results. i.e. If you …\n"],["merged_result","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-merged_result","()","<p>Gets all SimpleCov::Results from cache, merges them and produces a new\nSimpleCov::Result with merged …\n"],["minimum_coverage","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-minimum_coverage","(coverage = nil)","<p>Defines the minimum overall coverage required for the testsuite to pass.\nSimpleCov will return non-zero …\n"],["minimum_coverage_by_file","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-minimum_coverage_by_file","(coverage = nil)","<p>Defines the minimum coverage per file required for the testsuite to pass.\nSimpleCov will return non-zero …\n"],["missed?","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-i-missed-3F","()","<p>Returns true if this is a line that should have been covered, but was not\n"],["missed_lines","SimpleCov::FileList","SimpleCov/FileList.html#method-i-missed_lines","()","<p>Returns the count of lines that have been missed\n"],["missed_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-missed_lines","()","<p>Returns all lines that should have been, but were not covered as instances\nof SimpleCov::SourceFile::Line …\n"],["never?","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-i-never-3F","()","<p>Returns true if this line is not relevant for coverage\n"],["never_lines","SimpleCov::FileList","SimpleCov/FileList.html#method-i-never_lines","()","<p>Returns the count of lines that are not relevant for coverage\n"],["never_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-never_lines","()","<p>Returns all lines that are not relevant for coverage as\nSimpleCov::SourceFile::Line instances\n"],["new","SimpleCov::ArrayFilter","SimpleCov/ArrayFilter.html#method-c-new","(filter_argument)",""],["new","SimpleCov::Filter","SimpleCov/Filter.html#method-c-new","(filter_argument)",""],["new","SimpleCov::Formatter::MultiFormatter","SimpleCov/Formatter/MultiFormatter.html#method-c-new","(formatters = nil)",""],["new","SimpleCov::Result","SimpleCov/Result.html#method-c-new","(original_result)","<p>Initialize a new SimpleCov::Result from given Coverage.result (a Hash of\nfilenames each containing an …\n"],["new","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-c-new","(filename, coverage)",""],["new","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-c-new","(src, line_number, coverage)",""],["no_cov_line","SimpleCov::LinesClassifier","SimpleCov/LinesClassifier.html#method-c-no_cov_line","()",""],["no_lines?","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-no_lines-3F","()",""],["nocov_token","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-nocov_token","(nocov_token = nil)","<p>Certain code blocks (i.e. Ruby-implementation specific code) can be\nexcluded from the coverage metrics …\n"],["parse_filter","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-parse_filter","(filter_argument = nil, &filter_proc)","<p>The actual filter processor. Not meant for direct use\n"],["passes?","SimpleCov::Filter","SimpleCov/Filter.html#method-i-passes-3F","(source_file)",""],["process_skipped_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-process_skipped_lines","(lines)","<p>Will go through all source files and mark lines that are wrapped within #\n:nocov: comment blocks as skipped. …\n"],["profiles","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-profiles","()","<p>Returns the hash of available profiles\n"],["project_filename","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-project_filename","()","<p>The path to this source file relative to the projects directory\n"],["project_name","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-project_name","(new_name = nil)","<p>Returns the project name - currently assuming the last dirname in the\nSimpleCov.root is this.\n"],["read","SimpleCov::LastRun","SimpleCov/LastRun.html#method-c-read","()",""],["refuse_coverage_drop","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-refuse_coverage_drop","()","<p>Refuses any coverage drop. That is, coverage is only allowed to increase.\nSimpleCov will return non-zero …\n"],["relevant_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-relevant_lines","()",""],["result","Coverage","Coverage.html#method-c-result","()",""],["result","SimpleCov","SimpleCov.html#method-c-result","()","<p>Returns the result for the current coverage run, merging it across test\nsuites from cache using SimpleCov::ResultMerger …\n"],["result?","SimpleCov","SimpleCov.html#method-c-result-3F","()","<p>Returns nil if the result has not been computed Otherwise, returns the\nresult\n"],["results","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-results","()","<p>Gets the resultset hash and re-creates all included instances of\nSimpleCov::Result from that. All results …\n"],["resultset","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-resultset","()","<p>Loads the cached resultset from JSON and returns it as a Hash, caching it\nfor subsequent accesses.\n"],["resultset_path","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-resultset_path","()","<p>The path to the .resultset.json cache file\n"],["resultset_writelock","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-resultset_writelock","()",""],["root","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-root","(root = nil)","<p>The root for the project. This defaults to the current working directory.\n<p>Configure with SimpleCov.root …\n"],["round_float","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-round_float","(float, places)","<p>ruby 1.9 could use Float#round(places) instead @return [Float]\n"],["skip_token","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-skip_token","(nocov_token = nil)",""],["skipped!","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-i-skipped-21","()","<p>Flags this line as skipped\n"],["skipped?","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-i-skipped-3F","()","<p>Returns true if this line was skipped, false otherwise. Lines are skipped\nif they are wrapped with # …\n"],["skipped_lines","SimpleCov::FileList","SimpleCov/FileList.html#method-i-skipped_lines","()","<p>Returns the count of skipped lines\n"],["skipped_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-skipped_lines","()","<p>Returns all lines that were skipped as SimpleCov::SourceFile::Line\ninstances\n"],["source","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-source","()",""],["source_lines","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-source_lines","()",""],["src","SimpleCov::SourceFile","SimpleCov/SourceFile.html#method-i-src","()","<p>The source code for this file. Aliased as :source\n"],["start","SimpleCov","SimpleCov.html#method-c-start","(profile = nil, &block)","<p>Sets up SimpleCov to run against your project. You can optionally specify a\nprofile to use as well as …\n"],["status","SimpleCov::SourceFile::Line","SimpleCov/SourceFile/Line.html#method-i-status","()","<p>The status of this line - either covered, missed, skipped or never. Useful\ni.e. for direct use as a css …\n"],["store_result","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-store_result","(result)","<p>Saves the given SimpleCov::Result in the resultset cache\n"],["stored_data","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-stored_data","()","<p>Returns the contents of the resultset cache as a string or if the file is\nmissing or empty nil\n"],["synchronize_resultset","SimpleCov::ResultMerger","SimpleCov/ResultMerger.html#method-c-synchronize_resultset","()","<p>Ensure only one process is reading or writing the resultset at any given\ntime\n"],["to_hash","SimpleCov::Result","SimpleCov/Result.html#method-i-to_hash","()","<p>Returns a hash representation of this Result that can be used for\nmarshalling it into JSON\n"],["track_files","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-track_files","(glob)","<p>Coverage results will always include files matched by this glob, whether or\nnot they were explicitly …\n"],["tracked_files","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-tracked_files","()","<p>Returns the glob that will be used to include files that were not\nexplicitly required.\n"],["usable?","SimpleCov","SimpleCov.html#method-c-usable-3F","()","<p>Checks whether we&#39;re on a proper version of Ruby (likely 1.9+) which\nprovides coverage support\n"],["use_merging","SimpleCov::Configuration","SimpleCov/Configuration.html#method-i-use_merging","(use = nil)","<p>Defines whether to use result merging so all your test suites (test:units,\ntest:functionals, cucumber, …\n"],["write","SimpleCov::LastRun","SimpleCov/LastRun.html#method-c-write","(json)",""],["tasks.rake","","lib/simplecov/railties/tasks_rake.html","","<p>require “rake/testtask” Rake::TestTask.new do |t|\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">name</span> = <span class=\"ruby-string\">&quot;simplecov&quot;</span>\n<span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">loader</span> = :<span class=\"ruby-identifier\">direct</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"]]}}