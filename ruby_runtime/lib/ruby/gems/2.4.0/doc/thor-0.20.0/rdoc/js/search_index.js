var search_data = {"index":{"searchIndex":["io","object","thor","actions","capturableerb","classmethods","createfile","createlink","directory","emptydirectory","injectintofile","ambiguouscommanderror","ambiguoustaskerror","argument","arguments","base","classmethods","command","coreext","hashwithindifferentaccess","orderedhash","dynamiccommand","dynamictask","error","group","hiddencommand","hiddentask","invocation","classmethods","invocationerror","lineeditor","basic","readline","pathcompletion","malformattedargumenterror","option","options","rakecompat","rake","requiredargumentmissingerror","runner","sandbox","shell","basic","color","html","task","undefinedcommanderror","undefinedtaskerror","unknownargumenterror","util","[]=()","absolute_matches()","add_file()","add_link()","add_runtime_options!()","add_to_history?()","all_commands()","all_tasks()","append_file()","append_to_file()","apply()","argument()","arguments()","as_unicode()","ask()","ask()","ask_filtered()","ask_simply()","available?()","available?()","banner()","banner()","base_path()","basename()","best_available()","camel_case()","can_display_colors?()","can_display_colors?()","can_display_colors?()","capture()","check_default_type!()","check_unknown_options!()","check_unknown_options!()","chmod()","class_option()","class_options()","clear()","command_help()","commands()","comment_lines()","completion_options()","completion_proc()","concat()","copy_file()","create_file()","create_link()","current_command_chain()","default_command()","default_task()","delete()","delete_if()","desc()","desc()","destination_root()","destination_root=()","directory()","disable_required_check!()","dynamic_width()","dynamic_width_stty()","dynamic_width_tput()","each()","each_key()","each_pair()","each_value()","echo?()","empty_directory()","error()","escape_globs()","exit_on_failure?()","file_collision()","find_by_namespace()","find_class_and_command_by_namespace()","find_class_and_task_by_namespace()","find_command_possibilities()","find_in_source_paths()","find_task_possibilities()","formatted_usage()","formatted_usage()","from_superclass()","get()","get_input()","glob_pattern()","globs_for()","group()","gsub_file()","handle_argument_error?()","handle_argument_error?()","handle_no_method_error?()","handle_no_method_error?()","help()","help()","help()","hidden?()","hidden?()","hidden?()","hidden?()","in_root()","included()","indent()","inherited()","initialize_copy()","inject_into_class()","inject_into_file()","inject_into_module()","insert_into_file()","inside()","inspect()","invoke()","invoke()","invoke_from_option()","invoke_with_padding()","keys()","link_file()","load_thorfile()","local_method?()","local_method?()","long_desc()","lookup_color()","map()","matches()","merge()","merge!()","method_added()","method_option()","method_options()","mute()","mute?()","namespace()","namespace()","namespace_from_thor_class()","namespaces_in_content()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no?()","no_commands()","no_tasks()","not_debugging?()","not_debugging?()","option()","options()","package_name()","padding=()","prepare_message()","prepend_file()","prepend_to_file()","print_in_columns()","print_options()","print_table()","print_wrapped()","printable_commands()","printable_commands()","printable_tasks()","printable_tasks()","private_method?()","private_method?()","public_command()","public_task()","rake_classes()","rake_namespace()","readline()","readline()","readline()","register()","reject()","relative_matches()","relative_to_original_destination_root()","remove_argument()","remove_class_option()","remove_command()","remove_dir()","remove_file()","remove_invocation()","remove_task()","replace()","required_options()","required_options()","ruby_command()","run()","run()","run()","run()","run()","run_ruby_script()","say()","say_status()","set_color()","set_color()","set_eoutvar()","shell()","shell()","shift()","snake_case()","source_paths()","source_paths()","source_paths_for_search()","source_root()","start()","stderr()","stdout()","stop_on_unknown_option!()","strict_args_position!()","subclass_files()","subclasses()","subcommand()","subcommand_classes()","subcommand_help()","subcommands()","subtask()","subtask_help()","subtasks()","sync_keys!()","task()","task_help()","tasks()","template()","terminal_width()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","to_a()","to_hash()","truncate()","uncomment_lines()","unix?()","use_path_completion?()","user_home()","values()","with_padding()","yes?()"],"longSearchIndex":["io","object","thor","thor::actions","thor::actions::capturableerb","thor::actions::classmethods","thor::actions::createfile","thor::actions::createlink","thor::actions::directory","thor::actions::emptydirectory","thor::actions::injectintofile","thor::ambiguouscommanderror","thor::ambiguoustaskerror","thor::argument","thor::arguments","thor::base","thor::base::classmethods","thor::command","thor::coreext","thor::coreext::hashwithindifferentaccess","thor::coreext::orderedhash","thor::dynamiccommand","thor::dynamictask","thor::error","thor::group","thor::hiddencommand","thor::hiddentask","thor::invocation","thor::invocation::classmethods","thor::invocationerror","thor::lineeditor","thor::lineeditor::basic","thor::lineeditor::readline","thor::lineeditor::readline::pathcompletion","thor::malformattedargumenterror","thor::option","thor::options","thor::rakecompat","thor::rakecompat::rake","thor::requiredargumentmissingerror","thor::runner","thor::sandbox","thor::shell","thor::shell::basic","thor::shell::color","thor::shell::html","thor::task","thor::undefinedcommanderror","thor::undefinedtaskerror","thor::unknownargumenterror","thor::util","thor::coreext::orderedhash#[]=()","thor::lineeditor::readline::pathcompletion#absolute_matches()","thor::actions#add_file()","thor::actions#add_link()","thor::actions::classmethods#add_runtime_options!()","thor::lineeditor::readline#add_to_history?()","thor::base::classmethods#all_commands()","thor::base::classmethods#all_tasks()","thor::actions#append_file()","thor::actions#append_to_file()","thor::actions#apply()","thor::base::classmethods#argument()","thor::base::classmethods#arguments()","thor::shell::basic#as_unicode()","thor::shell::basic#ask()","thor::shell::html#ask()","thor::shell::basic#ask_filtered()","thor::shell::basic#ask_simply()","thor::lineeditor::basic::available?()","thor::lineeditor::readline::available?()","thor::banner()","thor::group::banner()","thor::lineeditor::readline::pathcompletion#base_path()","thor::base::classmethods#basename()","thor::lineeditor::best_available()","thor::util::camel_case()","thor::shell::basic#can_display_colors?()","thor::shell::color#can_display_colors?()","thor::shell::html#can_display_colors?()","thor::actions#capture()","thor::base::classmethods#check_default_type!()","thor::check_unknown_options!()","thor::base::classmethods#check_unknown_options!()","thor::actions#chmod()","thor::base::classmethods#class_option()","thor::base::classmethods#class_options()","thor::coreext::orderedhash#clear()","thor::command_help()","thor::base::classmethods#commands()","thor::actions#comment_lines()","thor::lineeditor::readline#completion_options()","thor::lineeditor::readline#completion_proc()","thor::actions#concat()","thor::actions#copy_file()","thor::actions#create_file()","thor::actions#create_link()","thor::invocation#current_command_chain()","thor::default_command()","thor::default_task()","thor::coreext::orderedhash#delete()","thor::coreext::orderedhash#delete_if()","thor::desc()","thor::group::desc()","thor::actions#destination_root()","thor::actions#destination_root=()","thor::actions#directory()","thor::disable_required_check!()","thor::shell::basic#dynamic_width()","thor::shell::basic#dynamic_width_stty()","thor::shell::basic#dynamic_width_tput()","thor::coreext::orderedhash#each()","thor::coreext::orderedhash#each_key()","thor::coreext::orderedhash#each_pair()","thor::coreext::orderedhash#each_value()","thor::lineeditor::basic#echo?()","thor::actions#empty_directory()","thor::shell::basic#error()","thor::util::escape_globs()","thor::base::classmethods#exit_on_failure?()","thor::shell::basic#file_collision()","thor::util::find_by_namespace()","thor::util::find_class_and_command_by_namespace()","thor::util::find_class_and_task_by_namespace()","thor::find_command_possibilities()","thor::actions#find_in_source_paths()","thor::find_task_possibilities()","thor::command#formatted_usage()","thor::command#formatted_usage()","thor::base::classmethods#from_superclass()","thor::actions#get()","thor::lineeditor::basic#get_input()","thor::lineeditor::readline::pathcompletion#glob_pattern()","thor::util::globs_for()","thor::base::classmethods#group()","thor::actions#gsub_file()","thor::command#handle_argument_error?()","thor::command#handle_argument_error?()","thor::command#handle_no_method_error?()","thor::command#handle_no_method_error?()","thor::help()","thor#help()","thor::group::help()","thor::command#hidden?()","thor::command#hidden?()","thor::hiddencommand#hidden?()","thor::hiddencommand#hidden?()","thor::actions#in_root()","thor::rakecompat::included()","thor::shell::basic#indent()","thor::base::classmethods#inherited()","thor::coreext::orderedhash#initialize_copy()","thor::actions#inject_into_class()","thor::actions#inject_into_file()","thor::actions#inject_into_module()","thor::actions#insert_into_file()","thor::actions#inside()","thor::coreext::orderedhash#inspect()","thor::group::invoke()","thor::invocation#invoke()","thor::group::invoke_from_option()","thor::invocation#invoke_with_padding()","thor::coreext::orderedhash#keys()","thor::actions#link_file()","thor::util::load_thorfile()","thor::command#local_method?()","thor::command#local_method?()","thor::long_desc()","thor::shell::basic#lookup_color()","thor::map()","thor::lineeditor::readline::pathcompletion#matches()","thor::coreext::orderedhash#merge()","thor::coreext::orderedhash#merge!()","thor::base::classmethods#method_added()","thor::method_option()","thor::method_options()","thor::shell::basic#mute()","thor::shell::basic#mute?()","object#namespace()","thor::base::classmethods#namespace()","thor::util::namespace_from_thor_class()","thor::util::namespaces_in_content()","thor::actions::new()","thor::base::new()","thor::command::new()","thor::command::new()","thor::coreext::orderedhash::new()","thor::dynamiccommand::new()","thor::dynamiccommand::new()","thor::lineeditor::basic::new()","thor::lineeditor::readline::pathcompletion::new()","thor::shell::new()","thor::shell::basic#no?()","thor::base::classmethods#no_commands()","thor::base::classmethods#no_tasks()","thor::command#not_debugging?()","thor::command#not_debugging?()","thor::option()","thor::options()","thor::package_name()","thor::shell::basic#padding=()","thor::shell::basic#prepare_message()","thor::actions#prepend_file()","thor::actions#prepend_to_file()","thor::shell::basic#print_in_columns()","thor::base::classmethods#print_options()","thor::shell::basic#print_table()","thor::shell::basic#print_wrapped()","thor::printable_commands()","thor::group::printable_commands()","thor::printable_tasks()","thor::group::printable_tasks()","thor::command#private_method?()","thor::command#private_method?()","thor::base::classmethods#public_command()","thor::base::classmethods#public_task()","thor::rakecompat::rake_classes()","object#rake_namespace()","thor::lineeditor::readline()","thor::lineeditor::basic#readline()","thor::lineeditor::readline#readline()","thor::register()","thor::coreext::orderedhash#reject()","thor::lineeditor::readline::pathcompletion#relative_matches()","thor::actions#relative_to_original_destination_root()","thor::base::classmethods#remove_argument()","thor::base::classmethods#remove_class_option()","thor::base::classmethods#remove_command()","thor::actions#remove_dir()","thor::actions#remove_file()","thor::group::remove_invocation()","thor::base::classmethods#remove_task()","thor::coreext::orderedhash#replace()","thor::command#required_options()","thor::command#required_options()","thor::util::ruby_command()","thor::actions#run()","thor::command#run()","thor::command#run()","thor::dynamiccommand#run()","thor::dynamiccommand#run()","thor::actions#run_ruby_script()","thor::shell::basic#say()","thor::shell::basic#say_status()","thor::shell::color#set_color()","thor::shell::html#set_color()","thor::actions::capturableerb#set_eoutvar()","thor::base::shell()","thor::shell#shell()","thor::coreext::orderedhash#shift()","thor::util::snake_case()","thor::actions#source_paths()","thor::actions::classmethods#source_paths()","thor::actions::classmethods#source_paths_for_search()","thor::actions::classmethods#source_root()","thor::base::classmethods#start()","thor::shell::basic#stderr()","thor::shell::basic#stdout()","thor::stop_on_unknown_option!()","thor::base::classmethods#strict_args_position!()","thor::base::subclass_files()","thor::base::subclasses()","thor::subcommand()","thor::subcommand_classes()","thor::subcommand_help()","thor::subcommands()","thor::subtask()","thor::subtask_help()","thor::subtasks()","thor::coreext::orderedhash#sync_keys!()","object#task()","thor::task_help()","thor::base::classmethods#tasks()","thor::actions#template()","thor::shell::basic#terminal_width()","thor::actions#thor()","thor::util::thor_classes_in()","thor::util::thor_root()","thor::util::thor_root_glob()","thor::coreext::orderedhash#to_a()","thor::coreext::orderedhash#to_hash()","thor::shell::basic#truncate()","thor::actions#uncomment_lines()","thor::shell::basic#unix?()","thor::lineeditor::readline#use_path_completion?()","thor::util::user_home()","thor::coreext::orderedhash#values()","thor::shell#with_padding()","thor::shell::basic#yes?()"],"info":[["IO","","IO.html","",""],["Object","","Object.html","",""],["Thor","","Thor.html","",""],["Thor::Actions","","Thor/Actions.html","",""],["Thor::Actions::CapturableERB","","Thor/Actions/CapturableERB.html","","<p>Thor::Actions#capture depends on what kind of buffer is used in ERB. Thus\nCapturableERB fixes ERB to …\n"],["Thor::Actions::ClassMethods","","Thor/Actions/ClassMethods.html","",""],["Thor::Actions::CreateFile","","Thor/Actions/CreateFile.html","",""],["Thor::Actions::CreateLink","","Thor/Actions/CreateLink.html","",""],["Thor::Actions::Directory","","Thor/Actions/Directory.html","",""],["Thor::Actions::EmptyDirectory","","Thor/Actions/EmptyDirectory.html","",""],["Thor::Actions::InjectIntoFile","","Thor/Actions/InjectIntoFile.html","",""],["Thor::AmbiguousCommandError","","Thor/AmbiguousCommandError.html","",""],["Thor::AmbiguousTaskError","","Thor/AmbiguousTaskError.html","",""],["Thor::Argument","","Thor/Argument.html","",""],["Thor::Arguments","","Thor/Arguments.html","",""],["Thor::Base","","Thor/Base.html","",""],["Thor::Base::ClassMethods","","Thor/Base/ClassMethods.html","",""],["Thor::Command","","Thor/Command.html","",""],["Thor::CoreExt","","Thor/CoreExt.html","",""],["Thor::CoreExt::HashWithIndifferentAccess","","Thor/CoreExt/HashWithIndifferentAccess.html","",""],["Thor::CoreExt::OrderedHash","","Thor/CoreExt/OrderedHash.html","",""],["Thor::DynamicCommand","","Thor/DynamicCommand.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Thor::DynamicTask","","Thor/DynamicTask.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Thor::Error","","Thor/Error.html","","<p>Thor::Error is raised when it&#39;s caused by wrong usage of thor classes.\nThose errors have their backtrace …\n"],["Thor::Group","","Thor/Group.html","","<p>Thor has a special class called Thor::Group. The main difference to Thor\nclass is that it invokes all …\n"],["Thor::HiddenCommand","","Thor/HiddenCommand.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Thor::HiddenTask","","Thor/HiddenTask.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Thor::Invocation","","Thor/Invocation.html","",""],["Thor::Invocation::ClassMethods","","Thor/Invocation/ClassMethods.html","",""],["Thor::InvocationError","","Thor/InvocationError.html","","<p>Raised when a command was found, but not invoked properly.\n"],["Thor::LineEditor","","Thor/LineEditor.html","",""],["Thor::LineEditor::Basic","","Thor/LineEditor/Basic.html","",""],["Thor::LineEditor::Readline","","Thor/LineEditor/Readline.html","",""],["Thor::LineEditor::Readline::PathCompletion","","Thor/LineEditor/Readline/PathCompletion.html","",""],["Thor::MalformattedArgumentError","","Thor/MalformattedArgumentError.html","",""],["Thor::Option","","Thor/Option.html","",""],["Thor::Options","","Thor/Options.html","",""],["Thor::RakeCompat","","Thor/RakeCompat.html","","<p>Adds a compatibility layer to your Thor classes which allows you to use\nrake package tasks. For example, …\n"],["Thor::RakeCompat::Rake","","Thor/RakeCompat/Rake.html","",""],["Thor::RequiredArgumentMissingError","","Thor/RequiredArgumentMissingError.html","",""],["Thor::Runner","","Thor/Runner.html","",""],["Thor::Sandbox","","Thor/Sandbox.html","",""],["Thor::Shell","","Thor/Shell.html","",""],["Thor::Shell::Basic","","Thor/Shell/Basic.html","",""],["Thor::Shell::Color","","Thor/Shell/Color.html","","<p>Inherit from Thor::Shell::Basic and add set_color behavior. Check\nThor::Shell::Basic to see all available …\n"],["Thor::Shell::HTML","","Thor/Shell/HTML.html","","<p>Inherit from Thor::Shell::Basic and add set_color behavior. Check\nThor::Shell::Basic to see all available …\n"],["Thor::Task","","Thor/Task.html","",""],["Thor::UndefinedCommandError","","Thor/UndefinedCommandError.html","","<p>Raised when a command was not found.\n"],["Thor::UndefinedTaskError","","Thor/UndefinedTaskError.html","","<p>Raised when a command was not found.\n"],["Thor::UnknownArgumentError","","Thor/UnknownArgumentError.html","",""],["Thor::Util","","Thor/Util.html","","<p>This module holds several utilities:\n<p>1) Methods to convert thor namespaces to constants and vice-versa. …\n"],["[]=","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-5B-5D-3D","(key, value)",""],["absolute_matches","Thor::LineEditor::Readline::PathCompletion","Thor/LineEditor/Readline/PathCompletion.html#method-i-absolute_matches","()",""],["add_file","Thor::Actions","Thor/Actions.html#method-i-add_file","(destination, *args, &block)",""],["add_link","Thor::Actions","Thor/Actions.html#method-i-add_link","(destination, *args)",""],["add_runtime_options!","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-add_runtime_options-21","()","<p>Add runtime options that help actions execution.\n"],["add_to_history?","Thor::LineEditor::Readline","Thor/LineEditor/Readline.html#method-i-add_to_history-3F","()",""],["all_commands","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-all_commands","()","<p>Returns the commands for this Thor class and all subclasses.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash with commands …\n"],["all_tasks","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-all_tasks","()",""],["append_file","Thor::Actions","Thor/Actions.html#method-i-append_file","(path, *args, &block)",""],["append_to_file","Thor::Actions","Thor/Actions.html#method-i-append_to_file","(path, *args, &block)","<p>Append text to a file. Since it depends on insert_into_file, it&#39;s\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["apply","Thor::Actions","Thor/Actions.html#method-i-apply","(path, config = {})","<p>Loads an external file and execute it in the instance binding.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; The path to …\n"],["argument","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-argument","(name, options = {})","<p>Adds an argument to the class and creates an attr_accessor for it.\n<p>Arguments are different from options …\n"],["arguments","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-arguments","()","<p>Returns this class arguments, looking up in the ancestors chain.\n<p>Returns\n<p>Array\n"],["as_unicode","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-as_unicode","()",""],["ask","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-ask","(statement, *args)","<p>Asks something to the user and receives a response.\n<p>If asked to limit the correct responses, you can pass …\n"],["ask","Thor::Shell::HTML","Thor/Shell/HTML.html#method-i-ask","(statement, color = nil)","<p>Ask something to the user and receives a response.\n<p>Example\n<p>ask(“What is your name?”)\n"],["ask_filtered","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-ask_filtered","(statement, color, options)",""],["ask_simply","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-ask_simply","(statement, color, options)",""],["available?","Thor::LineEditor::Basic","Thor/LineEditor/Basic.html#method-c-available-3F","()",""],["available?","Thor::LineEditor::Readline","Thor/LineEditor/Readline.html#method-c-available-3F","()",""],["banner","Thor","Thor.html#method-c-banner","(command, namespace = nil, subcommand = false)","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which …\n"],["banner","Thor::Group","Thor/Group.html#method-c-banner","()","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which …\n"],["base_path","Thor::LineEditor::Readline::PathCompletion","Thor/LineEditor/Readline/PathCompletion.html#method-i-base_path","()",""],["basename","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-basename","()","<p>The basename of the program invoking the thor class.\n"],["best_available","Thor::LineEditor","Thor/LineEditor.html#method-c-best_available","()",""],["camel_case","Thor::Util","Thor/Util.html#method-c-camel_case","(str)","<p>Receives a string and convert it to camel case. camel_case returns\nCamelCase.\n<p>Parameters\n<p>String\n"],["can_display_colors?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Thor::Shell::Color","Thor/Shell/Color.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Thor::Shell::HTML","Thor/Shell/HTML.html#method-i-can_display_colors-3F","()",""],["capture","Thor::Actions","Thor/Actions.html#method-i-capture","(*args)",""],["check_default_type!","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-check_default_type-21","()","<p>If you want to raise an error when the default value of an option does not\nmatch the type call check_default_type …\n"],["check_unknown_options!","Thor","Thor.html#method-c-check_unknown_options-21","(options = {})","<p>Extend check unknown options to accept a hash of conditions.\n<p>Parameters\n<p>options&lt;Hash&gt;: A hash containing …\n"],["check_unknown_options!","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-check_unknown_options-21","()","<p>If you want to raise an error for unknown options, call\ncheck_unknown_options! This is disabled by default …\n"],["chmod","Thor::Actions","Thor/Actions.html#method-i-chmod","(path, mode, config = {})","<p>Changes the mode of the given file or directory.\n<p>Parameters\n<p>mode&lt;Integer&gt; &mdash; the file mode\n"],["class_option","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-class_option","(name, options = {})","<p>Adds an option to the set of class options\n<p>Parameters\n<p>name&lt;Symbol&gt; &mdash; The name of the argument.\n"],["class_options","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-class_options","(options = nil)","<p>Adds a bunch of options to the set of class options.\n\n<pre>class_options :foo =&gt; false, :bar =&gt; :required, :baz ...</pre>\n"],["clear","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-clear","()",""],["command_help","Thor","Thor.html#method-c-command_help","(shell, command_name)","<p>Prints help information for the given command.\n<p>Parameters\n<p>shell&lt;Thor::Shell&gt; command_name&lt;String&gt; …\n"],["commands","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-commands","()","<p>Returns the commands for this Thor class.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash with commands names as keys …\n"],["comment_lines","Thor::Actions","Thor/Actions.html#method-i-comment_lines","(path, flag, *args)","<p>Comment all lines matching a given regex.  It will leave the space which\nexisted before the beginning …\n"],["completion_options","Thor::LineEditor::Readline","Thor/LineEditor/Readline.html#method-i-completion_options","()",""],["completion_proc","Thor::LineEditor::Readline","Thor/LineEditor/Readline.html#method-i-completion_proc","()",""],["concat","Thor::Actions","Thor/Actions.html#method-i-concat","(string)",""],["copy_file","Thor::Actions","Thor/Actions.html#method-i-copy_file","(source, *args, &block)","<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">copy_file</span> <span class=\"ruby-string\">&quot;README&quot;</span>, <span class=\"ruby-string\">&quot;doc/README&quot;</span>\n\n<span class=\"ruby-identifier\">copy_file</span> <span class=\"ruby-string\">&quot;doc/README&quot;</span>\n</pre>\n"],["create_file","Thor::Actions","Thor/Actions.html#method-i-create_file","(destination, *args, &block)","<p>Create a new file relative to the destination root with the given data,\nwhich is the return value of …\n"],["create_link","Thor::Actions","Thor/Actions.html#method-i-create_link","(destination, *args)","<p>Create a new file relative to the destination root from the given source.\n<p>Parameters\n<p>destination&lt;String&gt; … &mdash; "],["current_command_chain","Thor::Invocation","Thor/Invocation.html#method-i-current_command_chain","()","<p>Make the current command chain accessible with in a Thor-(sub)command\n"],["default_command","Thor","Thor.html#method-c-default_command","(meth = nil)","<p>Sets the default command when thor is executed without an explicit command\nto be called.\n<p>Parameters\n<p>meth&lt;Symbol&gt; … &mdash; "],["default_task","Thor","Thor.html#method-c-default_task","(meth = nil)",""],["delete","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-delete","(key)",""],["delete_if","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-delete_if","()",""],["desc","Thor","Thor.html#method-c-desc","(usage, description, options = {})","<p>Defines the usage and the description of the next command.\n<p>Parameters\n<p>usage&lt;String&gt; description&lt;String&gt; …\n"],["desc","Thor::Group","Thor/Group.html#method-c-desc","(description = nil)","<p>The description for this Thor::Group. If none is provided, but a source\nroot exists, tries to find the …\n"],["destination_root","Thor::Actions","Thor/Actions.html#method-i-destination_root","()","<p>Returns the root for this thor class (also aliased as destination root).\n"],["destination_root=","Thor::Actions","Thor/Actions.html#method-i-destination_root-3D","(root)","<p>Sets the root for this thor class. Relatives path are added to the\ndirectory where the script was invoked …\n"],["directory","Thor::Actions","Thor/Actions.html#method-i-directory","(source, *args, &block)","<p>Copies recursively the files from source directory to root directory. If\nany of the files finishes with …\n"],["disable_required_check!","Thor","Thor.html#method-c-disable_required_check-21","(*command_names)","<p>Disable the check for required options for the given commands. This is\nuseful if you have a command that …\n"],["dynamic_width","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-dynamic_width","()","<p>Calculate the dynamic width of the terminal\n"],["dynamic_width_stty","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-dynamic_width_stty","()",""],["dynamic_width_tput","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-dynamic_width_tput","()",""],["each","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-each","()",""],["each_key","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-each_key","()",""],["each_pair","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-each_pair","()",""],["each_value","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-each_value","()",""],["echo?","Thor::LineEditor::Basic","Thor/LineEditor/Basic.html#method-i-echo-3F","()",""],["empty_directory","Thor::Actions","Thor/Actions.html#method-i-empty_directory","(destination, config = {})","<p>Creates an empty directory.\n<p>Parameters\n<p>destination&lt;String&gt; &mdash; the relative path to the destination root. …\n"],["error","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-error","(statement)","<p>Called if something goes wrong during the execution. This is used by Thor\ninternally and should not be …\n"],["escape_globs","Thor::Util","Thor/Util.html#method-c-escape_globs","(path)","<p>Returns a string that has had any glob characters escaped. The glob\ncharacters are `* ? { } [ ]`.\n<p>Examples …\n"],["exit_on_failure?","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-exit_on_failure-3F","()","<p>A flag that makes the process exit with status 1 if any error happens.\n"],["file_collision","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-file_collision","(destination)","<p>Deals with file collision and returns true if the file should be\noverwritten and false otherwise. If …\n"],["find_by_namespace","Thor::Util","Thor/Util.html#method-c-find_by_namespace","(namespace)","<p>Receives a namespace and search for it in the Thor::Base subclasses.\n<p>Parameters\n<p>namespace&lt;String&gt; … &mdash; "],["find_class_and_command_by_namespace","Thor::Util","Thor/Util.html#method-c-find_class_and_command_by_namespace","(namespace, fallback = true)","<p>Receives a namespace and tries to retrieve a Thor or Thor::Group class from\nit. It first searches for …\n"],["find_class_and_task_by_namespace","Thor::Util","Thor/Util.html#method-c-find_class_and_task_by_namespace","(namespace, fallback = true)",""],["find_command_possibilities","Thor","Thor.html#method-c-find_command_possibilities","(meth)","<p>this is the logic that takes the command name passed in by the user and\ndetermines whether it is an unambiguous …\n"],["find_in_source_paths","Thor::Actions","Thor/Actions.html#method-i-find_in_source_paths","(file)","<p>Receives a file or directory and search for it in the source paths.\n"],["find_task_possibilities","Thor","Thor.html#method-c-find_task_possibilities","(meth)",""],["formatted_usage","Thor::Command","Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and\nrequired options into the given …\n"],["formatted_usage","Thor::Command","Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and\nrequired options into the given …\n"],["from_superclass","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-from_superclass","(method, default = nil)","<p>Retrieves a value from superclass. If it reaches the baseclass, returns\ndefault.\n"],["get","Thor::Actions","Thor/Actions.html#method-i-get","(source, *args, &block)","<p>Gets the content at the given address and places it at the given relative\ndestination. If a block is …\n"],["get_input","Thor::LineEditor::Basic","Thor/LineEditor/Basic.html#method-i-get_input","()",""],["glob_pattern","Thor::LineEditor::Readline::PathCompletion","Thor/LineEditor/Readline/PathCompletion.html#method-i-glob_pattern","()",""],["globs_for","Thor::Util","Thor/Util.html#method-c-globs_for","(path)","<p>Where to look for Thor files.\n"],["group","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-group","(name = nil)","<p>Defines the group. This is used when thor list is invoked so you can\nspecify that only commands from …\n"],["gsub_file","Thor::Actions","Thor/Actions.html#method-i-gsub_file","(path, flag, *args, &block)","<p>Run a regular expression replacement on a file.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed …\n"],["handle_argument_error?","Thor::Command","Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_argument_error?","Thor::Command","Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_no_method_error?","Thor::Command","Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["handle_no_method_error?","Thor::Command","Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["help","Thor","Thor.html#method-c-help","(shell, subcommand = false)","<p>Prints help information for this class.\n<p>Parameters\n<p>shell&lt;Thor::Shell&gt;\n"],["help","Thor","Thor.html#method-i-help","(command = nil, subcommand = false)",""],["help","Thor::Group","Thor/Group.html#method-c-help","(shell)","<p>Prints help information.\n<p>Options\n<p>short &mdash; When true, shows only usage.\n"],["hidden?","Thor::Command","Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Thor::Command","Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Thor::HiddenCommand","Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["hidden?","Thor::HiddenCommand","Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["in_root","Thor::Actions","Thor/Actions.html#method-i-in_root","()","<p>Goes to the root and execute the given block.\n"],["included","Thor::RakeCompat","Thor/RakeCompat.html#method-c-included","(base)",""],["indent","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-indent","(count = 1)","<p>Sets the output padding while executing a block and resets it.\n"],["inherited","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-inherited","(klass)","<p>Everytime someone inherits from a Thor class, register the klass and file\ninto baseclass.\n"],["initialize_copy","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-initialize_copy","(other)",""],["inject_into_class","Thor::Actions","Thor/Actions.html#method-i-inject_into_class","(path, klass, *args, &block)","<p>Injects text right after the class definition. Since it depends on\ninsert_into_file, it&#39;s reversible. …\n"],["inject_into_file","Thor::Actions","Thor/Actions.html#method-i-inject_into_file","(destination, *args, &block)",""],["inject_into_module","Thor::Actions","Thor/Actions.html#method-i-inject_into_module","(path, module_name, *args, &block)","<p>Injects text right after the module definition. Since it depends on\ninsert_into_file, it&#39;s reversible. …\n"],["insert_into_file","Thor::Actions","Thor/Actions.html#method-i-insert_into_file","(destination, *args, &block)","<p>Injects the given content into a file. Different from gsub_file, this\nmethod is reversible.\n<p>Parameters …\n"],["inside","Thor::Actions","Thor/Actions.html#method-i-inside","(dir = \"\", config = {}, &block)","<p>Do something in the root or on a provided subfolder. If a relative path is\ngiven it&#39;s referenced …\n"],["inspect","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-inspect","()",""],["invoke","Thor::Group","Thor/Group.html#method-c-invoke","(*names, &block)","<p>Invoke the given namespace or class given. It adds an instance method that\nwill invoke the klass and …\n"],["invoke","Thor::Invocation","Thor/Invocation.html#method-i-invoke","(name = nil, *args)","<p>Receives a name and invokes it. The name can be a string (either “command”\nor “namespace:command”), …\n"],["invoke_from_option","Thor::Group","Thor/Group.html#method-c-invoke_from_option","(*names, &block)","<p>Invoke a thor class based on the value supplied by the user to the given\noption named “name”. …\n"],["invoke_with_padding","Thor::Invocation","Thor/Invocation.html#method-i-invoke_with_padding","(*args)","<p>Invokes using shell padding.\n"],["keys","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-keys","()",""],["link_file","Thor::Actions","Thor/Actions.html#method-i-link_file","(source, *args)","<p>Links the file from the relative source to the relative destination. If the\ndestination is not given …\n"],["load_thorfile","Thor::Util","Thor/Util.html#method-c-load_thorfile","(path, content = nil, debug = false)","<p>Receives a path and load the thor file in the path. The file is evaluated\ninside the sandbox to avoid …\n"],["local_method?","Thor::Command","Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["local_method?","Thor::Command","Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["long_desc","Thor","Thor.html#method-c-long_desc","(long_description, options = {})","<p>Defines the long description of the next command.\n<p>Parameters\n<p>long description&lt;String&gt;\n"],["lookup_color","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-lookup_color","(color)",""],["map","Thor","Thor.html#method-c-map","(mappings = nil)","<p>Maps an input to a command. If you define:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map</span> <span class=\"ruby-string\">&quot;-T&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;list&quot;</span>\n</pre>\n<p>Running:\n"],["matches","Thor::LineEditor::Readline::PathCompletion","Thor/LineEditor/Readline/PathCompletion.html#method-i-matches","()",""],["merge","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-merge","(other_hash, &block)",""],["merge!","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-merge-21","(other_hash)",""],["method_added","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-method_added","(meth)","<p>Fire this callback whenever a method is added. Added methods are tracked as\ncommands by invoking the …\n"],["method_option","Thor","Thor.html#method-c-method_option","(name, options = {})","<p>Adds an option to the set of method options. If :for is given as option, it\nallows you to change the …\n"],["method_options","Thor","Thor.html#method-c-method_options","(options = nil)","<p>Declares the options for the next command to be declared.\n<p>Parameters\n<p>Hash[Symbol =&gt; Object] &mdash; The hash …\n"],["mute","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-mute","()","<p>Mute everything that&#39;s inside given block\n"],["mute?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-mute-3F","()","<p>Check if base is muted\n"],["namespace","Object","Object.html#method-i-namespace","(name)",""],["namespace","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-namespace","(name = nil)","<p>Sets the namespace for the Thor or Thor::Group class. By default the\nnamespace is retrieved from the …\n"],["namespace_from_thor_class","Thor::Util","Thor/Util.html#method-c-namespace_from_thor_class","(constant)","<p>Receives a constant and converts it to a Thor namespace. Since Thor\ncommands can be added to a sandbox, …\n"],["namespaces_in_content","Thor::Util","Thor/Util.html#method-c-namespaces_in_content","(contents, file = __FILE__)","<p>Given the contents, evaluate it inside the sandbox and returns the\nnamespaces defined in the sandbox. …\n"],["new","Thor::Actions","Thor/Actions.html#method-c-new","(args = [], options = {}, config = {})","<p>Extends initializer to add more configuration options.\n<p>Configuration\n<p>behavior&lt;Symbol&gt; &mdash; The actions …\n"],["new","Thor::Base","Thor/Base.html#method-c-new","(args = [], local_options = {}, config = {})","<p>It receives arguments in an Array and two hashes, one for options and other\nfor configuration.\n<p>Notice …\n"],["new","Thor::Command","Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Thor::Command","Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-c-new","(*args, &block)",""],["new","Thor::DynamicCommand","Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Thor::DynamicCommand","Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Thor::LineEditor::Basic","Thor/LineEditor/Basic.html#method-c-new","(prompt, options)",""],["new","Thor::LineEditor::Readline::PathCompletion","Thor/LineEditor/Readline/PathCompletion.html#method-c-new","(text)",""],["new","Thor::Shell","Thor/Shell.html#method-c-new","(args = [], options = {}, config = {})","<p>Add shell to initialize config values.\n<p>Configuration\n<p>shell&lt;Object&gt; &mdash; An instance of the shell to be …\n"],["no?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-no-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “n” or\n“no”.\n"],["no_commands","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-no_commands","()","<p>All methods defined inside the given block are not added as commands.\n<p>So you can do:\n\n<pre>class MyScript &lt; Thor ...</pre>\n"],["no_tasks","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-no_tasks","()",""],["not_debugging?","Thor::Command","Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["not_debugging?","Thor::Command","Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["option","Thor","Thor.html#method-c-option","(name, options = {})",""],["options","Thor","Thor.html#method-c-options","(options = nil)",""],["package_name","Thor","Thor.html#method-c-package_name","(name, _ = {})","<p>Allows for custom “Command” package naming.\n<p>Parameters\n<p>name&lt;String&gt; options&lt;Hash&gt; …\n"],["padding=","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-padding-3D","(value)","<p>Sets the output padding, not allowing less than zero values.\n"],["prepare_message","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-prepare_message","(message, *color)",""],["prepend_file","Thor::Actions","Thor/Actions.html#method-i-prepend_file","(path, *args, &block)",""],["prepend_to_file","Thor::Actions","Thor/Actions.html#method-i-prepend_to_file","(path, *args, &block)","<p>Prepend text to a file. Since it depends on insert_into_file, it&#39;s\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["print_in_columns","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-print_in_columns","(array)","<p>Prints values in columns\n<p>Parameters\n<p>Array[String, String, …]\n"],["print_options","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-print_options","(shell, options, group_name = nil)","<p>Receives a set of options and print them.\n"],["print_table","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-print_table","(array, options = {})","<p>Prints a table.\n<p>Parameters\n<p>Array[Array[String, String, …]]\n"],["print_wrapped","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-print_wrapped","(message, options = {})","<p>Prints a long string, word-wrapping the text to the current width of the\nterminal display. Ideal for …\n"],["printable_commands","Thor","Thor.html#method-c-printable_commands","(all = true, subcommand = false)","<p>Returns commands ready to be printed.\n"],["printable_commands","Thor::Group","Thor/Group.html#method-c-printable_commands","(*)","<p>Returns commands ready to be printed.\n"],["printable_tasks","Thor","Thor.html#method-c-printable_tasks","(all = true, subcommand = false)",""],["printable_tasks","Thor::Group","Thor/Group.html#method-c-printable_tasks","(*)",""],["private_method?","Thor::Command","Thor/Command.html#method-i-private_method-3F","(instance)",""],["private_method?","Thor::Command","Thor/Command.html#method-i-private_method-3F","(instance)",""],["public_command","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-public_command","(*names)","<p>Allows to use private methods from parent in child classes as commands.\n<p>Parameters\n\n<pre>names&lt;Array&gt;:: Method ...</pre>\n"],["public_task","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-public_task","(*names)",""],["rake_classes","Thor::RakeCompat","Thor/RakeCompat.html#method-c-rake_classes","()",""],["rake_namespace","Object","Object.html#method-i-rake_namespace","(name)",""],["readline","Thor::LineEditor","Thor/LineEditor.html#method-c-readline","(prompt, options = {})",""],["readline","Thor::LineEditor::Basic","Thor/LineEditor/Basic.html#method-i-readline","()",""],["readline","Thor::LineEditor::Readline","Thor/LineEditor/Readline.html#method-i-readline","()",""],["register","Thor","Thor.html#method-c-register","(klass, subcommand_name, usage, description, options = {})","<p>Registers another Thor subclass as a command.\n<p>Parameters\n<p>klass&lt;Class&gt; &mdash; Thor subclass to register\n"],["reject","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-reject","(&block)",""],["relative_matches","Thor::LineEditor::Readline::PathCompletion","Thor/LineEditor/Readline/PathCompletion.html#method-i-relative_matches","()",""],["relative_to_original_destination_root","Thor::Actions","Thor/Actions.html#method-i-relative_to_original_destination_root","(path, remove_dot = true)","<p>Returns the given path relative to the absolute root (ie, root where the\nscript started).\n"],["remove_argument","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_argument","(*names)","<p>Removes a previous defined argument. If :undefine is given, undefine\naccessors as well.\n<p>Parameters\n<p>names&lt;Array&gt; … &mdash; "],["remove_class_option","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_class_option","(*names)","<p>Removes a previous defined class option.\n<p>Parameters\n<p>names&lt;Array&gt; &mdash; Class options to be removed\n"],["remove_command","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_command","(*names)","<p>Removes a given command from this Thor class. This is usually done if you\nare inheriting from another …\n"],["remove_dir","Thor::Actions","Thor/Actions.html#method-i-remove_dir","(path, config = {})",""],["remove_file","Thor::Actions","Thor/Actions.html#method-i-remove_file","(path, config = {})","<p>Removes a file at the given location.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed\n"],["remove_invocation","Thor::Group","Thor/Group.html#method-c-remove_invocation","(*names)","<p>Remove a previously added invocation.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_invocation</span> :<span class=\"ruby-identifier\">test_framework</span>\n</pre>\n"],["remove_task","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_task","(*names)",""],["replace","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-replace","(other)","<p>When replacing with another hash, the initial order of our keys must come\nfrom the other hash -ordered …\n"],["required_options","Thor::Command","Thor/Command.html#method-i-required_options","()",""],["required_options","Thor::Command","Thor/Command.html#method-i-required_options","()",""],["ruby_command","Thor::Util","Thor/Util.html#method-c-ruby_command","()","<p>Return the path to the ruby interpreter taking into account multiple\ninstallations and windows extensions. …\n"],["run","Thor::Actions","Thor/Actions.html#method-i-run","(command, config = {})","<p>Executes a command returning the contents of the command.\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the command …\n"],["run","Thor::Command","Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change\nthis implementation to create …\n"],["run","Thor::Command","Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change\nthis implementation to create …\n"],["run","Thor::DynamicCommand","Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run","Thor::DynamicCommand","Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run_ruby_script","Thor::Actions","Thor/Actions.html#method-i-run_ruby_script","(command, config = {})","<p>Executes a ruby script (taking into account WIN32 platform quirks).\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the …\n"],["say","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-say","(message = \"\", color = nil, force_new_line = (message.to_s !~ /( |\\t)\\Z/))","<p>Say (print) something to the user. If the sentence ends with a whitespace\nor tab character, a new line …\n"],["say_status","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-say_status","(status, message, log_status = true)","<p>Say a status with the given color and appends the message. Since this\nmethod is used frequently by actions, …\n"],["set_color","Thor::Shell::Color","Thor/Shell/Color.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["set_color","Thor::Shell::HTML","Thor/Shell/HTML.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["set_eoutvar","Thor::Actions::CapturableERB","Thor/Actions/CapturableERB.html#method-i-set_eoutvar","(compiler, eoutvar = \"_erbout\")",""],["shell","Thor::Base","Thor/Base.html#method-c-shell","()","<p>Returns the shell used in all Thor classes. If you are in a Unix platform\nit will use a colored log, …\n"],["shell","Thor::Shell","Thor/Shell.html#method-i-shell","()","<p>Holds the shell for the given Thor instance. If no shell is given, it gets\na default shell from Thor::Base.shell …\n"],["shift","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-shift","()",""],["snake_case","Thor::Util","Thor/Util.html#method-c-snake_case","(str)","<p>Receives a string and convert it to snake case. SnakeCase returns\nsnake_case.\n<p>Parameters\n<p>String\n"],["source_paths","Thor::Actions","Thor/Actions.html#method-i-source_paths","()","<p>Holds source paths in instance so they can be manipulated.\n"],["source_paths","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-source_paths","()","<p>Hold source paths for one Thor instance. source_paths_for_search is the\nmethod responsible to gather …\n"],["source_paths_for_search","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-source_paths_for_search","()","<p>Returns the source paths in the following order:\n\n<pre>1) This class source paths\n2) Source root\n3) Parents ...</pre>\n"],["source_root","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-source_root","(path = nil)","<p>Stores and return the source root for this class\n"],["start","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-start","(given_args = ARGV, config = {})","<p>Parses the command and options from the given args, instantiate the class\nand invoke the command. This …\n"],["stderr","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-stderr","()",""],["stdout","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-stdout","()",""],["stop_on_unknown_option!","Thor","Thor.html#method-c-stop_on_unknown_option-21","(*command_names)","<p>Stop parsing of options as soon as an unknown option or a regular argument\nis encountered.  All remaining …\n"],["strict_args_position!","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-strict_args_position-21","()","<p>If you want only strict string args (useful when cascading thor classes),\ncall strict_args_position! …\n"],["subclass_files","Thor::Base","Thor/Base.html#method-c-subclass_files","()","<p>Returns the files where the subclasses are kept.\n<p>Returns\n<p>Hash[path&lt;String&gt; =&gt; Class]\n"],["subclasses","Thor::Base","Thor/Base.html#method-c-subclasses","()","<p>Returns the classes that inherits from Thor or Thor::Group.\n<p>Returns\n<p>Array\n"],["subcommand","Thor","Thor.html#method-c-subcommand","(subcommand, subcommand_class)",""],["subcommand_classes","Thor","Thor.html#method-c-subcommand_classes","()",""],["subcommand_help","Thor","Thor.html#method-c-subcommand_help","(cmd)",""],["subcommands","Thor","Thor.html#method-c-subcommands","()",""],["subtask","Thor","Thor.html#method-c-subtask","(subcommand, subcommand_class)",""],["subtask_help","Thor","Thor.html#method-c-subtask_help","(cmd)",""],["subtasks","Thor","Thor.html#method-c-subtasks","()",""],["sync_keys!","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-sync_keys-21","()",""],["task","Object","Object.html#method-i-task","(*)",""],["task_help","Thor","Thor.html#method-c-task_help","(shell, command_name)",""],["tasks","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-tasks","()",""],["template","Thor::Actions","Thor/Actions.html#method-i-template","(source, *args, &block)","<p>Gets an ERB template at the relative source, executes it and makes a copy\nat the relative destination. …\n"],["terminal_width","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-terminal_width","()","<p>This code was copied from Rake, available under MIT-LICENSE Copyright ©\n2003, 2004 Jim Weirich\n"],["thor","Thor::Actions","Thor/Actions.html#method-i-thor","(command, *args)","<p>Run a thor command. A hash of options can be given and it&#39;s converted\nto switches.\n<p>Parameters\n<p>command&lt;String&gt; … &mdash; "],["thor_classes_in","Thor::Util","Thor/Util.html#method-c-thor_classes_in","(klass)","<p>Returns the thor classes declared inside the given class.\n"],["thor_root","Thor::Util","Thor/Util.html#method-c-thor_root","()","<p>Returns the root where thor files are located, depending on the OS.\n"],["thor_root_glob","Thor::Util","Thor/Util.html#method-c-thor_root_glob","()","<p>Returns the files in the thor root. On Windows thor_root will be something\nlike this:\n\n<pre>C:\\Documents and ...</pre>\n"],["to_a","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-to_a","()",""],["to_hash","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-to_hash","()",""],["truncate","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-truncate","(string, width)",""],["uncomment_lines","Thor::Actions","Thor/Actions.html#method-i-uncomment_lines","(path, flag, *args)","<p>Uncomment all lines matching a given regex.  It will leave the space which\nexisted before the comment …\n"],["unix?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-unix-3F","()",""],["use_path_completion?","Thor::LineEditor::Readline","Thor/LineEditor/Readline.html#method-i-use_path_completion-3F","()",""],["user_home","Thor::Util","Thor/Util.html#method-c-user_home","()",""],["values","Thor::CoreExt::OrderedHash","Thor/CoreExt/OrderedHash.html#method-i-values","()",""],["with_padding","Thor::Shell","Thor/Shell.html#method-i-with_padding","()","<p>Yields the given block with padding.\n"],["yes?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-yes-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “y” or\n“yes”.\n"]]}}