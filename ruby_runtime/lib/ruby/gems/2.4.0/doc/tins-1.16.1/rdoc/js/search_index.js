var search_data = {"index":{"searchIndex":["array","dslkit","date","datetime","enumerable","file","hash","io","irb","method","module","object","proc","range","spruz","string","time","tins","annotate","askandsend","attempt","bijection","blank","array","falseclass","hash","nilclass","numeric","object","string","trueclass","blankslate","blockself","casepredicate","classmethod","complete","concern","modulemixin","constant","constantmaker","countby","dslaccessor","datedummy","modul","datetimedummy","modul","deepconstget","deepdup","deflect","deflecterror","deflector","deflectorcollection","delegate","duration","dynamicscope","context","eigenclass","expose","extractlastargumentoptions","filebinary","classmethods","constants","encoding","find","finder","pathextension","frommodule","full","go","enumerableextension","generator","hashsymbolizekeysrecursive","hashunion","ifpredicate","implement","instanceexec","interpreter","limited","linesfile","lineextension","memoize","cachemethods","methoddescription","parameters","blockparameter","genericparameter","keyparameter","keyreqparameter","keyrestparameter","optparameter","parameter","reqparameter","restparameter","signature","methodmissingdelegator","delegatorclass","delegatormodule","minimize","modulegroup","namedset","null","kernel","nullclass","nullplus","once","p","parameterizedmodule","partialapplication","proccompose","procprelude","rangeplus","requiremaybe","responding","scope","securewrite","sexysingleton","singletonclassmethods","klass;","stringbyteordermark","stringcamelize","stringunderscore","stringversion","version","subhash","symbolmaker","tempio","terminal","threadglobal","threadlocal","timedummy","modul","timefreezer","to","toproc","token","uniqby","unit","formatparser","parsererror","unitparser","write","modul;","unboundmethod","*()","+()","<<()","<=>()","<=>()","==()","==()","==()","===()","null()","nullplus()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","__memoize_cache__()","__old_singleton_included__()","add()","add_dimension()","all_full?()","annotate()","append_features()","apply()","array()","array()","as_json()","ascii?()","ascii?()","ask_and_send()","ask_and_send!()","ask_and_send_or_self()","ask_and_send_or_self!()","attempt()","binary?()","binary?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","block_self()","bom_encoding()","build()","bump()","call()","camelcase()","camelize()","case?()","class_attr_accessor()","class_attr_reader()","class_attr_writer()","class_define_method()","cols()","columns()","complete()","compose()","compute_duration_base()","const()","const_defined_in?()","const_missing()","const_missing()","constant()","count_by()","days?()","deep_const_get()","deep_const_get()","deep_dup()","deflect()","deflect?()","deflect?()","deflect_start()","deflect_stop()","delegate()","delete()","description()","directory?()","dsl_accessor()","dsl_reader()","dynamic_defined?()","dynamic_scope()","each()","each()","each()","eigenclass()","eigenclass_eval()","empty?()","eql?()","examine()","examine()","execute()","exist?()","expose()","extended()","extended()","extract_last_argument_options()","file()","file?()","file_linenumber()","filename()","fill()","find()","find()","find()","find()","finder_stat()","first()","for_file()","for_filename()","for_lines()","format()","format()","format_smart()","fractional_seconds?()","freeze()","freeze()","from()","full?()","go()","head()","hours?()","id1()","if?()","implement()","implement_in_submodule()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","initialize_copy()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance_thread_global()","instance_thread_local()","interpret()","interpret_sleep()","interpret_with_binding()","last()","last_line_number()","level_of()","line()","line_number=()","lines()","location()","lstat()","map_apply()","match_backward()","match_forward()","member?()","memoize_apply_visibility()","memoize_cache_clear()","memoize_function()","memoize_method()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","minimize()","minimize!()","minutes?()","named()","named()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next!()","nil?()","nth()","null()","null_plus()","only_once()","p!()","parameterize()","parameterize_for()","parse()","parse()","parse()","parse?()","partial()","pathname()","pp!()","pred!()","prefixes()","prepare_path()","present?()","previous!()","protect_from_errors()","prune()","prune()","push()","recurse()","require_maybe()","reset()","respond_to?()","respond_to_missing?()","responding?()","rewind()","rotate()","rows()","scan()","scan_char()","scan_number()","scan_unit()","scope()","scope_block()","scope_get()","scope_pop()","scope_push()","scope_reverse()","scope_top()","second()","seconds?()","secure_write()","signature()","size()","sleep_duration()","stat()","subhash()","subhash!()","succ!()","suffix()","swap()","symbolize_keys_recursive()","symbolize_keys_recursive!()","tail()","temp_io()","thread_global()","thread_local()","tins_concern_args()","tins_concern_configure()","to()","to_a()","to_a()","to_ary()","to_f()","to_f()","to_i()","to_int()","to_json()","to_proc()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","try_only_once()","underscore()","uniq_by()","uniq_by!()","unit_re()","unminimize()","unminimize!()","version()","visit_path?()","winsize()","with()","|()","readme"],"longSearchIndex":["array","dslkit","date","datetime","enumerable","file","hash","io","irb","method","module","object","proc","range","spruz","string","time","tins","tins::annotate","tins::askandsend","tins::attempt","tins::bijection","tins::blank","tins::blank::array","tins::blank::falseclass","tins::blank::hash","tins::blank::nilclass","tins::blank::numeric","tins::blank::object","tins::blank::string","tins::blank::trueclass","tins::blankslate","tins::blockself","tins::casepredicate","tins::classmethod","tins::complete","tins::concern","tins::concern::modulemixin","tins::constant","tins::constantmaker","tins::countby","tins::dslaccessor","tins::datedummy","tins::datedummy::modul","tins::datetimedummy","tins::datetimedummy::modul","tins::deepconstget","tins::deepdup","tins::deflect","tins::deflect::deflecterror","tins::deflect::deflector","tins::deflect::deflectorcollection","tins::delegate","tins::duration","tins::dynamicscope","tins::dynamicscope::context","tins::eigenclass","tins::expose","tins::extractlastargumentoptions","tins::filebinary","tins::filebinary::classmethods","tins::filebinary::constants","tins::filebinary::constants::encoding","tins::find","tins::find::finder","tins::find::finder::pathextension","tins::frommodule","tins::full","tins::go","tins::go::enumerableextension","tins::generator","tins::hashsymbolizekeysrecursive","tins::hashunion","tins::ifpredicate","tins::implement","tins::instanceexec","tins::interpreter","tins::limited","tins::linesfile","tins::linesfile::lineextension","tins::memoize","tins::memoize::cachemethods","tins::methoddescription","tins::methoddescription::parameters","tins::methoddescription::parameters::blockparameter","tins::methoddescription::parameters::genericparameter","tins::methoddescription::parameters::keyparameter","tins::methoddescription::parameters::keyreqparameter","tins::methoddescription::parameters::keyrestparameter","tins::methoddescription::parameters::optparameter","tins::methoddescription::parameters::parameter","tins::methoddescription::parameters::reqparameter","tins::methoddescription::parameters::restparameter","tins::methoddescription::signature","tins::methodmissingdelegator","tins::methodmissingdelegator::delegatorclass","tins::methodmissingdelegator::delegatormodule","tins::minimize","tins::modulegroup","tins::namedset","tins::null","tins::null::kernel","tins::nullclass","tins::nullplus","tins::once","tins::p","tins::parameterizedmodule","tins::partialapplication","tins::proccompose","tins::procprelude","tins::rangeplus","tins::requiremaybe","tins::responding","tins::scope","tins::securewrite","tins::sexysingleton","tins::sexysingleton::singletonclassmethods","tins::sexysingleton::klass;","tins::stringbyteordermark","tins::stringcamelize","tins::stringunderscore","tins::stringversion","tins::stringversion::version","tins::subhash","tins::symbolmaker","tins::tempio","tins::terminal","tins::threadglobal","tins::threadlocal","tins::timedummy","tins::timedummy::modul","tins::timefreezer","tins::to","tins::toproc","tins::token","tins::uniqby","tins::unit","tins::unit::formatparser","tins::unit::parsererror","tins::unit::unitparser","tins::write","tins::write::modul;","unboundmethod","tins::proccompose#*()","tins::rangeplus#+()","tins::go::enumerableextension#<<()","tins::duration#<=>()","tins::stringversion::version#<=>()","tins::methoddescription::parameters::parameter#==()","tins::methoddescription::signature#==()","tins::stringversion::version#==()","tins::methoddescription::signature#===()","tins::null::kernel#null()","tins::null::kernel#nullplus()","tins::bijection::[]()","tins::dynamicscope::context#[]()","tins::generator::[]()","tins::modulegroup::[]()","tins::stringversion::version#[]()","tins::bijection#[]=()","tins::dynamicscope::context#[]=()","tins::stringversion::version#[]=()","tins::memoize::cachemethods#__memoize_cache__()","tins::sexysingleton::__old_singleton_included__()","tins::deflect::deflectorcollection#add()","tins::generator#add_dimension()","tins::full#all_full?()","tins::annotate#annotate()","tins::concern#append_features()","tins::procprelude#apply()","tins::procprelude#array()","tins::stringversion::version#array()","tins::null#as_json()","tins::filebinary#ascii?()","tins::filebinary::classmethods#ascii?()","tins::askandsend#ask_and_send()","tins::askandsend#ask_and_send!()","tins::askandsend#ask_and_send_or_self()","tins::askandsend#ask_and_send_or_self!()","tins::attempt#attempt()","tins::filebinary#binary?()","tins::filebinary::classmethods#binary?()","tins::blank::falseclass#blank?()","tins::blank::nilclass#blank?()","tins::blank::numeric#blank?()","tins::blank::object#blank?()","tins::blank::string#blank?()","tins::blank::trueclass#blank?()","tins::null#blank?()","tins::blockself#block_self()","tins::stringbyteordermark#bom_encoding()","tins::methoddescription::parameters::build()","tins::stringversion::version#bump()","tins::procprelude#call()","tins::stringcamelize#camelcase()","tins::stringcamelize#camelize()","tins::casepredicate#case?()","tins::classmethod#class_attr_accessor()","tins::classmethod#class_attr_reader()","tins::classmethod#class_attr_writer()","tins::classmethod#class_define_method()","tins::terminal#cols()","tins::terminal#columns()","tins::complete#complete()","tins::proccompose#compose()","tins::attempt#compute_duration_base()","tins::procprelude#const()","tins::deepconstget::const_defined_in?()","tins::constantmaker#const_missing()","tins::null#const_missing()","tins::constant#constant()","tins::countby#count_by()","tins::duration#days?()","tins::deepconstget#deep_const_get()","tins::deepconstget::deep_const_get()","tins::deepdup#deep_dup()","tins::deflect#deflect()","tins::deflect#deflect?()","tins::deflect::deflect?()","tins::deflect#deflect_start()","tins::deflect#deflect_stop()","tins::delegate#delegate()","tins::deflect::deflectorcollection#delete()","tins::methoddescription#description()","tins::find::finder::pathextension#directory?()","tins::dslaccessor#dsl_accessor()","tins::dslaccessor#dsl_reader()","tins::dynamicscope#dynamic_defined?()","tins::dynamicscope#dynamic_scope()","tins::go::enumerableextension#each()","tins::generator#each()","tins::linesfile#each()","tins::eigenclass#eigenclass()","tins::eigenclass#eigenclass_eval()","tins::linesfile#empty?()","tins::methoddescription::signature#eql?()","irb::examine()","object#examine()","tins::limited#execute()","tins::find::finder::pathextension#exist?()","tins::expose#expose()","tins::concern::extended()","tins::write::extended()","tins::extractlastargumentoptions#extract_last_argument_options()","tins::find::finder::pathextension#file()","tins::find::finder::pathextension#file?()","tins::linesfile#file_linenumber()","tins::linesfile::lineextension#filename()","tins::bijection#fill()","tins::deflect::deflectorcollection#find()","tins::find::find()","tins::find#find()","tins::find::finder#find()","tins::find::finder::pathextension#finder_stat()","tins::procprelude#first()","tins::linesfile::for_file()","tins::linesfile::for_filename()","tins::linesfile::for_lines()","tins::duration#format()","tins::unit#format()","tins::duration#format_smart()","tins::duration#fractional_seconds?()","tins::bijection#freeze()","tins::timefreezer::freeze()","tins::procprelude#from()","tins::full#full?()","tins::go#go()","tins::procprelude#head()","tins::duration#hours?()","tins::procprelude#id1()","tins::ifpredicate#if?()","tins::implement#implement()","tins::implement#implement_in_submodule()","tins::blank::array::included()","tins::blank::hash::included()","tins::concern#included()","tins::datedummy::included()","tins::datetimedummy::included()","tins::filebinary::included()","tins::instanceexec::included()","tins::partialapplication::included()","tins::sexysingleton::included()","tins::timedummy::included()","tins::stringversion::version#initialize_copy()","method#inspect()","tins::linesfile#inspect()","tins::methoddescription::parameters::parameter#inspect()","tins::methoddescription::signature#inspect()","tins::null#inspect()","tins::stringversion::version#inspect()","unboundmethod#inspect()","tins::threadglobal#instance_thread_global()","tins::threadlocal#instance_thread_local()","tins::interpreter#interpret()","tins::attempt#interpret_sleep()","tins::interpreter#interpret_with_binding()","tins::procprelude#last()","tins::linesfile#last_line_number()","tins::stringversion::version#level_of()","tins::linesfile#line()","tins::linesfile#line_number=()","tins::terminal#lines()","tins::unit::formatparser#location()","tins::find::finder::pathextension#lstat()","tins::procprelude#map_apply()","tins::linesfile#match_backward()","tins::linesfile#match_forward()","tins::deflect::deflectorcollection#member?()","tins::memoize::cachemethods#memoize_apply_visibility()","tins::memoize::cachemethods#memoize_cache_clear()","module#memoize_function()","module#memoize_method()","tins::dynamicscope#method_missing()","tins::methodmissingdelegator#method_missing()","tins::null#method_missing()","tins::sexysingleton::method_missing()","tins::symbolmaker#method_missing()","tins::minimize#minimize()","tins::minimize#minimize!()","tins::duration#minutes?()","module#named()","object#named()","tins::bijection::new()","tins::deflect::deflectorcollection::new()","tins::duration::new()","tins::find::finder::new()","tins::generator::new()","tins::limited::new()","tins::linesfile::new()","tins::methoddescription::signature::new()","tins::methodmissingdelegator::delegatormodule::new()","tins::namedset::new()","tins::nullplus::new()","tins::stringversion::version::new()","tins::token::new()","tins::unit::formatparser::new()","tins::unit::unitparser::new()","tins::linesfile#next!()","tins::null#nil?()","tins::procprelude#nth()","tins::null::kernel#null()","tins::null::kernel#null_plus()","tins::once#only_once()","tins::p#p!()","tins::frommodule#parameterize()","tins::parameterizedmodule#parameterize_for()","tins::unit#parse()","tins::unit::formatparser#parse()","tins::unit::unitparser#parse()","tins::unit#parse?()","tins::partialapplication#partial()","tins::find::finder::pathextension#pathname()","tins::p#pp!()","tins::stringversion::version#pred!()","tins::unit#prefixes()","tins::find::finder#prepare_path()","tins::blank::object#present?()","tins::linesfile#previous!()","tins::find::finder#protect_from_errors()","tins::find#prune()","tins::find::prune()","tins::go::enumerableextension#push()","tins::generator#recurse()","tins::requiremaybe#require_maybe()","tins::unit::formatparser#reset()","tins::sexysingleton::respond_to?()","tins::sexysingleton::respond_to_missing?()","tins::responding#responding?()","tins::linesfile#rewind()","tins::procprelude#rotate()","tins::terminal#rows()","tins::unit::unitparser#scan()","tins::unit::unitparser#scan_char()","tins::unit::unitparser#scan_number()","tins::unit::unitparser#scan_unit()","tins::scope#scope()","tins::scope#scope_block()","tins::scope#scope_get()","tins::scope#scope_pop()","tins::scope#scope_push()","tins::scope#scope_reverse()","tins::scope#scope_top()","tins::procprelude#second()","tins::duration#seconds?()","tins::securewrite#secure_write()","tins::methoddescription#signature()","tins::generator#size()","tins::attempt#sleep_duration()","tins::find::finder::pathextension#stat()","tins::subhash#subhash()","hash#subhash!()","tins::stringversion::version#succ!()","tins::find::finder::pathextension#suffix()","tins::procprelude#swap()","tins::hashsymbolizekeysrecursive#symbolize_keys_recursive()","tins::hashsymbolizekeysrecursive#symbolize_keys_recursive!()","tins::procprelude#tail()","tins::tempio#temp_io()","tins::threadglobal#thread_global()","tins::threadlocal#thread_local()","tins::concern::modulemixin#tins_concern_args()","tins::concern::modulemixin#tins_concern_configure()","tins::to#to()","tins::null#to_a()","tins::stringversion::version#to_a()","tins::null#to_ary()","tins::duration#to_f()","tins::null#to_f()","tins::null#to_i()","tins::null#to_int()","tins::null#to_json()","tins::toproc#to_proc()","tins::duration#to_s()","tins::linesfile#to_s()","tins::methoddescription::parameters::blockparameter#to_s()","tins::methoddescription::parameters::genericparameter#to_s()","tins::methoddescription::parameters::keyparameter#to_s()","tins::methoddescription::parameters::keyreqparameter#to_s()","tins::methoddescription::parameters::keyrestparameter#to_s()","tins::methoddescription::parameters::optparameter#to_s()","tins::methoddescription::parameters::reqparameter#to_s()","tins::methoddescription::parameters::restparameter#to_s()","tins::methoddescription::signature#to_s()","tins::null#to_s()","tins::stringversion::version#to_s()","tins::null#to_str()","tins::once#try_only_once()","tins::stringunderscore#underscore()","tins::uniqby#uniq_by()","array#uniq_by!()","tins::unit::unitparser#unit_re()","tins::minimize#unminimize()","tins::minimize#unminimize!()","tins::stringversion#version()","tins::find::finder#visit_path?()","tins::terminal#winsize()","tins::blankslate::with()","tins::hashunion#|()",""],"info":[["Array","","Array.html","",""],["DSLKit","","DSLKit.html","",""],["Date","","Date.html","",""],["DateTime","","DateTime.html","",""],["Enumerable","","Enumerable.html","",""],["File","","File.html","",""],["Hash","","Hash.html","",""],["IO","","IO.html","","<p>class ::Object\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">Tins</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">SecureWrite</span>\n</pre>\n<p>end\n"],["IRB","","IRB.html","",""],["Method","","Method.html","",""],["Module","","Module.html","",""],["Object","","Object.html","",""],["Proc","","Proc.html","",""],["Range","","Range.html","",""],["Spruz","","Spruz.html","",""],["String","","String.html","",""],["Time","","Time.html","",""],["Tins","","Tins.html","",""],["Tins::Annotate","","Tins/Annotate.html","",""],["Tins::AskAndSend","","Tins/AskAndSend.html","",""],["Tins::Attempt","","Tins/Attempt.html","",""],["Tins::Bijection","","Tins/Bijection.html","",""],["Tins::Blank","","Tins/Blank.html","",""],["Tins::Blank::Array","","Tins/Blank/Array.html","",""],["Tins::Blank::FalseClass","","Tins/Blank/FalseClass.html","",""],["Tins::Blank::Hash","","Tins/Blank/Hash.html","",""],["Tins::Blank::NilClass","","Tins/Blank/NilClass.html","",""],["Tins::Blank::Numeric","","Tins/Blank/Numeric.html","",""],["Tins::Blank::Object","","Tins/Blank/Object.html","",""],["Tins::Blank::String","","Tins/Blank/String.html","",""],["Tins::Blank::TrueClass","","Tins/Blank/TrueClass.html","",""],["Tins::BlankSlate","","Tins/BlankSlate.html","",""],["Tins::BlockSelf","","Tins/BlockSelf.html","","<p>This module includes the block_self module_function.\n"],["Tins::CasePredicate","","Tins/CasePredicate.html","",""],["Tins::ClassMethod","","Tins/ClassMethod.html","",""],["Tins::Complete","","Tins/Complete.html","",""],["Tins::Concern","","Tins/Concern.html","",""],["Tins::Concern::ModuleMixin","","Tins/Concern/ModuleMixin.html","",""],["Tins::Constant","","Tins/Constant.html","","<p>This module contains the <em>constant</em> method. For small example of its\nusage see the documentation of the …\n"],["Tins::ConstantMaker","","Tins/ConstantMaker.html","","<p>This module can be used to extend another module/class. It generates\nsymbols for every missing constant …\n"],["Tins::CountBy","","Tins/CountBy.html","",""],["Tins::DSLAccessor","","Tins/DSLAccessor.html","","<p>The DSLAccessor module contains some methods, that can be used to make\nsimple accessors for a DSL.\n\n<pre>class ...</pre>\n"],["Tins::DateDummy","","Tins/DateDummy.html","",""],["Tins::DateDummy::modul","","Tins/DateDummy/modul.html","",""],["Tins::DateTimeDummy","","Tins/DateTimeDummy.html","",""],["Tins::DateTimeDummy::modul","","Tins/DateTimeDummy/modul.html","",""],["Tins::DeepConstGet","","Tins/DeepConstGet.html","",""],["Tins::DeepDup","","Tins/DeepDup.html","",""],["Tins::Deflect","","Tins/Deflect.html","","<p>See examples/recipe.rb and examples/recipe2.rb how this works at the\nmoment.\n"],["Tins::Deflect::DeflectError","","Tins/Deflect/DeflectError.html","","<p>The basic Deflect exception\n"],["Tins::Deflect::Deflector","","Tins/Deflect/Deflector.html","","<p>A deflector is called with a <em>class</em>, a method <em>id</em>, and its\n<em>*args</em>.\n"],["Tins::Deflect::DeflectorCollection","","Tins/Deflect/DeflectorCollection.html","","<p>This class implements a collection of deflectors, to make them available by\nemulating Ruby&#39;s message …\n"],["Tins::Delegate","","Tins/Delegate.html","","<p>This module can be included into modules/classes to make the delegate\nmethod available.\n"],["Tins::Duration","","Tins/Duration.html","",""],["Tins::DynamicScope","","Tins/DynamicScope.html","",""],["Tins::DynamicScope::Context","","Tins/DynamicScope/Context.html","",""],["Tins::Eigenclass","","Tins/Eigenclass.html","","<p>This module contains some handy methods to deal with eigenclasses. Those\nare also known as virtual classes, …\n"],["Tins::Expose","","Tins/Expose.html","",""],["Tins::ExtractLastArgumentOptions","","Tins/ExtractLastArgumentOptions.html","",""],["Tins::FileBinary","","Tins/FileBinary.html","",""],["Tins::FileBinary::ClassMethods","","Tins/FileBinary/ClassMethods.html","",""],["Tins::FileBinary::Constants","","Tins/FileBinary/Constants.html","",""],["Tins::FileBinary::Constants::Encoding","","Tins/FileBinary/Constants/Encoding.html","",""],["Tins::Find","","Tins/Find.html","",""],["Tins::Find::Finder","","Tins/Find/Finder.html","",""],["Tins::Find::Finder::PathExtension","","Tins/Find/Finder/PathExtension.html","",""],["Tins::FromModule","","Tins/FromModule.html","",""],["Tins::Full","","Tins/Full.html","",""],["Tins::GO","","Tins/GO.html","",""],["Tins::GO::EnumerableExtension","","Tins/GO/EnumerableExtension.html","",""],["Tins::Generator","","Tins/Generator.html","","<p>This class can create generator objects, that can produce all tuples, that\nwould be created by as many …\n"],["Tins::HashSymbolizeKeysRecursive","","Tins/HashSymbolizeKeysRecursive.html","",""],["Tins::HashUnion","","Tins/HashUnion.html","",""],["Tins::IfPredicate","","Tins/IfPredicate.html","",""],["Tins::Implement","","Tins/Implement.html","",""],["Tins::InstanceExec","","Tins/InstanceExec.html","",""],["Tins::Interpreter","","Tins/Interpreter.html","",""],["Tins::Limited","","Tins/Limited.html","",""],["Tins::LinesFile","","Tins/LinesFile.html","",""],["Tins::LinesFile::LineExtension","","Tins/LinesFile/LineExtension.html","",""],["Tins::Memoize","","Tins/Memoize.html","",""],["Tins::Memoize::CacheMethods","","Tins/Memoize/CacheMethods.html","",""],["Tins::MethodDescription","","Tins/MethodDescription.html","",""],["Tins::MethodDescription::Parameters","","Tins/MethodDescription/Parameters.html","",""],["Tins::MethodDescription::Parameters::BlockParameter","","Tins/MethodDescription/Parameters/BlockParameter.html","",""],["Tins::MethodDescription::Parameters::GenericParameter","","Tins/MethodDescription/Parameters/GenericParameter.html","",""],["Tins::MethodDescription::Parameters::KeyParameter","","Tins/MethodDescription/Parameters/KeyParameter.html","",""],["Tins::MethodDescription::Parameters::KeyreqParameter","","Tins/MethodDescription/Parameters/KeyreqParameter.html","",""],["Tins::MethodDescription::Parameters::KeyrestParameter","","Tins/MethodDescription/Parameters/KeyrestParameter.html","",""],["Tins::MethodDescription::Parameters::OptParameter","","Tins/MethodDescription/Parameters/OptParameter.html","",""],["Tins::MethodDescription::Parameters::Parameter","","Tins/MethodDescription/Parameters/Parameter.html","",""],["Tins::MethodDescription::Parameters::ReqParameter","","Tins/MethodDescription/Parameters/ReqParameter.html","",""],["Tins::MethodDescription::Parameters::RestParameter","","Tins/MethodDescription/Parameters/RestParameter.html","",""],["Tins::MethodDescription::Signature","","Tins/MethodDescription/Signature.html","",""],["Tins::MethodMissingDelegator","","Tins/MethodMissingDelegator.html","","<p>This module contains a configurable method missing delegator and can be\nmixed into a module/class.\n"],["Tins::MethodMissingDelegator::DelegatorClass","","Tins/MethodMissingDelegator/DelegatorClass.html","","<p>This class includes DelegatorModule and can be used as a superclass instead\nof including DelegatorModule …\n"],["Tins::MethodMissingDelegator::DelegatorModule","","Tins/MethodMissingDelegator/DelegatorModule.html","","<p>Including this module in your classes makes an <em>initialize</em> method\navailable, whose first argument is used …\n"],["Tins::Minimize","","Tins/Minimize.html","","<p>This module can be mixed into all classes, whose instances respond to the\n<p>and size-methods, like for …\n\n"],["Tins::ModuleGroup","","Tins/ModuleGroup.html","",""],["Tins::NamedSet","","Tins/NamedSet.html","",""],["Tins::Null","","Tins/Null.html","","<p>Implementation of the null object pattern in Ruby.\n"],["Tins::Null::Kernel","","Tins/Null/Kernel.html","",""],["Tins::NullClass","","Tins/NullClass.html","",""],["Tins::NullPlus","","Tins/NullPlus.html","",""],["Tins::Once","","Tins/Once.html","",""],["Tins::P","","Tins/P.html","",""],["Tins::ParameterizedModule","","Tins/ParameterizedModule.html","",""],["Tins::PartialApplication","","Tins/PartialApplication.html","",""],["Tins::ProcCompose","","Tins/ProcCompose.html","",""],["Tins::ProcPrelude","","Tins/ProcPrelude.html","",""],["Tins::RangePlus","","Tins/RangePlus.html","",""],["Tins::RequireMaybe","","Tins/RequireMaybe.html","",""],["Tins::Responding","","Tins/Responding.html","",""],["Tins::Scope","","Tins/Scope.html","",""],["Tins::SecureWrite","","Tins/SecureWrite.html","",""],["Tins::SexySingleton","","Tins/SexySingleton.html","",""],["Tins::SexySingleton::SingletonClassMethods","","Tins/SexySingleton/SingletonClassMethods.html","",""],["Tins::SexySingleton::klass;","","Tins/SexySingleton/klass;.html","",""],["Tins::StringByteOrderMark","","Tins/StringByteOrderMark.html","",""],["Tins::StringCamelize","","Tins/StringCamelize.html","",""],["Tins::StringUnderscore","","Tins/StringUnderscore.html","",""],["Tins::StringVersion","","Tins/StringVersion.html","",""],["Tins::StringVersion::Version","","Tins/StringVersion/Version.html","",""],["Tins::Subhash","","Tins/Subhash.html","",""],["Tins::SymbolMaker","","Tins/SymbolMaker.html","","<p>This module can be included in another module/class. It generates a symbol\nfor every missing method that …\n"],["Tins::TempIO","","Tins/TempIO.html","",""],["Tins::Terminal","","Tins/Terminal.html","",""],["Tins::ThreadGlobal","","Tins/ThreadGlobal.html","",""],["Tins::ThreadLocal","","Tins/ThreadLocal.html","",""],["Tins::TimeDummy","","Tins/TimeDummy.html","",""],["Tins::TimeDummy::modul","","Tins/TimeDummy/modul.html","",""],["Tins::TimeFreezer","","Tins/TimeFreezer.html","",""],["Tins::To","","Tins/To.html","",""],["Tins::ToProc","","Tins/ToProc.html","",""],["Tins::Token","","Tins/Token.html","",""],["Tins::UniqBy","","Tins/UniqBy.html","",""],["Tins::Unit","","Tins/Unit.html","",""],["Tins::Unit::FormatParser","","Tins/Unit/FormatParser.html","",""],["Tins::Unit::ParserError","","Tins/Unit/ParserError.html","",""],["Tins::Unit::UnitParser","","Tins/Unit/UnitParser.html","",""],["Tins::Write","","Tins/Write.html","",""],["Tins::Write::modul;","","Tins/Write/modul;.html","",""],["UnboundMethod","","UnboundMethod.html","",""],["*","Tins::ProcCompose","Tins/ProcCompose.html#method-i-2A","(other)",""],["+","Tins::RangePlus","Tins/RangePlus.html#method-i-2B","(other)",""],["<<","Tins::GO::EnumerableExtension","Tins/GO/EnumerableExtension.html#method-i-3C-3C","(argument)",""],["<=>","Tins::Duration","Tins/Duration.html#method-i-3C-3D-3E","(other)",""],["<=>","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-3C-3D-3E","(other)",""],["==","Tins::MethodDescription::Parameters::Parameter","Tins/MethodDescription/Parameters/Parameter.html#method-i-3D-3D","(other)",""],["==","Tins::MethodDescription::Signature","Tins/MethodDescription/Signature.html#method-i-3D-3D","(other)",""],["==","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-3D-3D","(other)",""],["===","Tins::MethodDescription::Signature","Tins/MethodDescription/Signature.html#method-i-3D-3D-3D","(method)",""],["Null","Tins::Null::Kernel","Tins/Null/Kernel.html#method-i-Null","(value = nil)",""],["NullPlus","Tins::Null::Kernel","Tins/Null/Kernel.html#method-i-NullPlus","(opts = {})",""],["[]","Tins::Bijection","Tins/Bijection.html#method-c-5B-5D","(*pairs)",""],["[]","Tins::DynamicScope::Context","Tins/DynamicScope/Context.html#method-i-5B-5D","(name)",""],["[]","Tins::Generator","Tins/Generator.html#method-c-5B-5D","(*enums)","<p>Create a new Generator object from the enumberables <em>enums</em>.\n"],["[]","Tins::ModuleGroup","Tins/ModuleGroup.html#method-c-5B-5D","(*modules)",""],["[]","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-5B-5D","(level)",""],["[]=","Tins::Bijection","Tins/Bijection.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Tins::DynamicScope::Context","Tins/DynamicScope/Context.html#method-i-5B-5D-3D","(name, value)",""],["[]=","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-5B-5D-3D","(level, value)",""],["__memoize_cache__","Tins::Memoize::CacheMethods","Tins/Memoize/CacheMethods.html#method-i-__memoize_cache__","()","<p>Return the cache object.\n"],["__old_singleton_included__","Tins::SexySingleton","Tins/SexySingleton.html#method-c-__old_singleton_included__","(klass)",""],["add","Tins::Deflect::DeflectorCollection","Tins/Deflect/DeflectorCollection.html#method-i-add","(klass, id, deflector)","<p>Add a new deflector <em>deflector</em> for class <em>klass</em> and method\nname <em>id</em>, and return self.\n"],["add_dimension","Tins::Generator","Tins/Generator.html#method-i-add_dimension","(enum, iterator = :each)","<p>Add another dimension to this generator. <em>enum</em> is an object, that\nought to respond to the <em>iterator</em> method …\n"],["all_full?","Tins::Full","Tins/Full.html#method-i-all_full-3F","()",""],["annotate","Tins::Annotate","Tins/Annotate.html#method-i-annotate","(name)",""],["append_features","Tins::Concern","Tins/Concern.html#method-i-append_features","(base)",""],["apply","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-apply","(&my_proc)",""],["array","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-array","()",""],["array","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-array","()",""],["as_json","Tins::Null","Tins/Null.html#method-i-as_json","(*)",""],["ascii?","Tins::FileBinary","Tins/FileBinary.html#method-i-ascii-3F","(options = {})","<p>Returns true if FileBinary#binary? returns false, false if\nFileBinary#binary? returns true, and nil otherwise. …\n"],["ascii?","Tins::FileBinary::ClassMethods","Tins/FileBinary/ClassMethods.html#method-i-ascii-3F","(name, options = {})","<p>Returns true if the file with name <code>name</code> is considered to be\nascii using the FileBinary#ascii? method. …\n"],["ask_and_send","Tins::AskAndSend","Tins/AskAndSend.html#method-i-ask_and_send","(method_name, *args, &block)",""],["ask_and_send!","Tins::AskAndSend","Tins/AskAndSend.html#method-i-ask_and_send-21","(method_name, *args, &block)",""],["ask_and_send_or_self","Tins::AskAndSend","Tins/AskAndSend.html#method-i-ask_and_send_or_self","(method_name, *args, &block)",""],["ask_and_send_or_self!","Tins::AskAndSend","Tins/AskAndSend.html#method-i-ask_and_send_or_self-21","(method_name, *args, &block)",""],["attempt","Tins::Attempt","Tins/Attempt.html#method-i-attempt","(opts = {}, &block)",""],["binary?","Tins::FileBinary","Tins/FileBinary.html#method-i-binary-3F","(options = {})","<p>Returns true if this file is considered to be binary, false if it is not\nconsidered to be binary, and …\n"],["binary?","Tins::FileBinary::ClassMethods","Tins/FileBinary/ClassMethods.html#method-i-binary-3F","(name, options = {})","<p>Returns true if the file with name <code>name</code> is considered to be\nbinary using the FileBinary#binary? method. …\n"],["blank?","Tins::Blank::FalseClass","Tins/Blank/FalseClass.html#method-i-blank-3F","()",""],["blank?","Tins::Blank::NilClass","Tins/Blank/NilClass.html#method-i-blank-3F","()",""],["blank?","Tins::Blank::Numeric","Tins/Blank/Numeric.html#method-i-blank-3F","()",""],["blank?","Tins::Blank::Object","Tins/Blank/Object.html#method-i-blank-3F","()",""],["blank?","Tins::Blank::String","Tins/Blank/String.html#method-i-blank-3F","()",""],["blank?","Tins::Blank::TrueClass","Tins/Blank/TrueClass.html#method-i-blank-3F","()",""],["blank?","Tins::Null","Tins/Null.html#method-i-blank-3F","()",""],["block_self","Tins::BlockSelf","Tins/BlockSelf.html#method-i-block_self","(&block)","<p>This method returns the receiver <em>self</em> of the context in which\n<em>block</em> was created.\n"],["bom_encoding","Tins::StringByteOrderMark","Tins/StringByteOrderMark.html#method-i-bom_encoding","()",""],["build","Tins::MethodDescription::Parameters","Tins/MethodDescription/Parameters.html#method-c-build","(type, name)",""],["bump","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-bump","(level = array.size - 1)",""],["call","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-call","(obj, &my_proc)",""],["camelcase","Tins::StringCamelize","Tins/StringCamelize.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","Tins::StringCamelize","Tins/StringCamelize.html#method-i-camelize","(first_letter = :upper)",""],["case?","Tins::CasePredicate","Tins/CasePredicate.html#method-i-case-3F","(*args)",""],["class_attr_accessor","Tins::ClassMethod","Tins/ClassMethod.html#method-i-class_attr_accessor","(*ids)","<p>Define reader and writer attribute methods for all <em>*ids</em>.\n"],["class_attr_reader","Tins::ClassMethod","Tins/ClassMethod.html#method-i-class_attr_reader","(*ids)","<p>Define reader attribute methods for all <em>*ids</em>.\n"],["class_attr_writer","Tins::ClassMethod","Tins/ClassMethod.html#method-i-class_attr_writer","(*ids)","<p>Define writer attribute methods for all <em>*ids</em>.\n"],["class_define_method","Tins::ClassMethod","Tins/ClassMethod.html#method-i-class_define_method","(name, &block)","<p>Define a class method named <em>name</em> using <em>block</em>.\n"],["cols","Tins::Terminal","Tins/Terminal.html#method-i-cols","()",""],["columns","Tins::Terminal","Tins/Terminal.html#method-i-columns","()",""],["complete","Tins::Complete","Tins/Complete.html#method-i-complete","(prompt: '', add_hist: false, &block)",""],["compose","Tins::ProcCompose","Tins/ProcCompose.html#method-i-compose","(other)",""],["compute_duration_base","Tins::Attempt","Tins/Attempt.html#method-i-compute_duration_base","(sleep, attempts)",""],["const","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-const","(konst = nil, &my_proc)",""],["const_defined_in?","Tins::DeepConstGet","Tins/DeepConstGet.html#method-c-const_defined_in-3F","(modul, constant)","<p>:nocov:  We do not create coverage on 1.8\n"],["const_missing","Tins::ConstantMaker","Tins/ConstantMaker.html#method-i-const_missing","(id)","<p>Returns a symbol (<em>id</em>) for every missing constant named\n<em>id</em>.\n"],["const_missing","Tins::Null","Tins/Null.html#method-i-const_missing","(*)",""],["constant","Tins::Constant","Tins/Constant.html#method-i-constant","(name, value = name)","<p>Create a constant named <em>name</em>, that refers to value <em>value</em>.\n_value is frozen, if this is possible. If you …\n"],["count_by","Tins::CountBy","Tins/CountBy.html#method-i-count_by","(&b)",""],["days?","Tins::Duration","Tins/Duration.html#method-i-days-3F","()",""],["deep_const_get","Tins::DeepConstGet","Tins/DeepConstGet.html#method-i-deep_const_get","(path, start_module = Object)",""],["deep_const_get","Tins::DeepConstGet","Tins/DeepConstGet.html#method-c-deep_const_get","(path, start_module = Object)",""],["deep_dup","Tins::DeepDup","Tins/DeepDup.html#method-i-deep_dup","()",""],["deflect","Tins::Deflect","Tins/Deflect.html#method-i-deflect","(from, id, deflector)","<p>Start deflecting method calls named <em>id</em> to the <em>from</em> class\nusing the Deflector instance deflector. After …\n"],["deflect?","Tins::Deflect","Tins/Deflect.html#method-i-deflect-3F","(from, id)","<p>Return true if method <em>id</em> is deflected from class <em>from</em>,\notherwise return false.\n"],["deflect?","Tins::Deflect","Tins/Deflect.html#method-c-deflect-3F","(from, id)","<p>Return true if method <em>id</em> is deflected from class <em>from</em>,\notherwise return false.\n"],["deflect_start","Tins::Deflect","Tins/Deflect.html#method-i-deflect_start","(from, id, deflector)","<p>Start deflecting method calls named <em>id</em> to the <em>from</em> class\nusing the Deflector instance deflector.\n"],["deflect_stop","Tins::Deflect","Tins/Deflect.html#method-i-deflect_stop","(from, id)","<p>Stop deflection method calls named <em>id</em> to class <em>from</em>.\n"],["delegate","Tins::Delegate","Tins/Delegate.html#method-i-delegate","(method_name, opts = {})","\n<pre>A method to easily delegate methods to an object, stored in an\ninstance variable or returned by a method ...</pre>\n"],["delete","Tins::Deflect::DeflectorCollection","Tins/Deflect/DeflectorCollection.html#method-i-delete","(klass, id)","<p>Delete the deflecotor class <em>klass</em> and method name <em>id</em>.\nReturns the deflector if any was found, otherwise …\n"],["description","Tins::MethodDescription","Tins/MethodDescription.html#method-i-description","(style: :namespace)",""],["directory?","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-directory-3F","()",""],["dsl_accessor","Tins::DSLAccessor","Tins/DSLAccessor.html#method-i-dsl_accessor","(name, *default, &block)","<p>This method creates a dsl accessor named <em>name</em>. If nothing else is\ngiven as argument it defaults to nil. …\n"],["dsl_reader","Tins::DSLAccessor","Tins/DSLAccessor.html#method-i-dsl_reader","(name, *default, &block)","<p>This method creates a dsl reader accessor, that behaves exactly like a\n#dsl_accessor but can only be …\n"],["dynamic_defined?","Tins::DynamicScope","Tins/DynamicScope.html#method-i-dynamic_defined-3F","(id)",""],["dynamic_scope","Tins::DynamicScope","Tins/DynamicScope.html#method-i-dynamic_scope","(&block)",""],["each","Tins::GO::EnumerableExtension","Tins/GO/EnumerableExtension.html#method-i-each","(&block)",""],["each","Tins::Generator","Tins/Generator.html#method-i-each","()","<p>Iterate over all tuples produced by this generator and yield to them.\n"],["each","Tins::LinesFile","Tins/LinesFile.html#method-i-each","(&block)",""],["eigenclass","Tins::Eigenclass","Tins/Eigenclass.html#method-i-eigenclass","()","<p>Returns the eigenclass of this object.\n"],["eigenclass_eval","Tins::Eigenclass","Tins/Eigenclass.html#method-i-eigenclass_eval","(&block)","<p>Evaluates the <em>block</em> in context of the eigenclass of this object.\n"],["empty?","Tins::LinesFile","Tins/LinesFile.html#method-i-empty-3F","()",""],["eql?","Tins::MethodDescription::Signature","Tins/MethodDescription/Signature.html#method-i-eql-3F","(other)",""],["examine","IRB","IRB.html#method-c-examine","(binding = TOPLEVEL_BINDING)",""],["examine","Object","Object.html#method-i-examine","(binding = TOPLEVEL_BINDING)",""],["execute","Tins::Limited","Tins/Limited.html#method-i-execute","()","<p>Execute <em>maximum</em> number of threads in parallel.\n"],["exist?","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-exist-3F","()",""],["expose","Tins::Expose","Tins/Expose.html#method-i-expose","(method_name = nil, *args, &block)","<p>Expose any (private/protected) method or internal state of this object\nreturning the result for specing …\n"],["extended","Tins::Concern","Tins/Concern.html#method-c-extended","(base)",""],["extended","Tins::Write","Tins/Write.html#method-c-extended","(modul)",""],["extract_last_argument_options","Tins::ExtractLastArgumentOptions","Tins/ExtractLastArgumentOptions.html#method-i-extract_last_argument_options","()",""],["file","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-file","()",""],["file?","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-file-3F","()",""],["file_linenumber","Tins::LinesFile","Tins/LinesFile.html#method-i-file_linenumber","()",""],["filename","Tins::LinesFile::LineExtension","Tins/LinesFile/LineExtension.html#method-i-filename","()",""],["fill","Tins::Bijection","Tins/Bijection.html#method-i-fill","()",""],["find","Tins::Deflect::DeflectorCollection","Tins/Deflect/DeflectorCollection.html#method-i-find","(klass, id)","<p>Try to find a deflector for class <em>klass</em> and method <em>id</em> and\nreturn it. If none was found, return nil instead. …\n"],["find","Tins::Find","Tins/Find.html#method-c-find","(*paths)","<p>Calls the associated block with the name of every path and directory listed\nas arguments, then recursively …\n"],["find","Tins::Find","Tins/Find.html#method-i-find","(*paths)","<p>Calls the associated block with the name of every path and directory listed\nas arguments, then recursively …\n"],["find","Tins::Find::Finder","Tins/Find/Finder.html#method-i-find","(*paths)",""],["finder_stat","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-finder_stat","()",""],["first","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-first","()",""],["for_file","Tins::LinesFile","Tins/LinesFile.html#method-c-for_file","(file, line_number = nil)",""],["for_filename","Tins::LinesFile","Tins/LinesFile.html#method-c-for_filename","(filename, line_number = nil)",""],["for_lines","Tins::LinesFile","Tins/LinesFile.html#method-c-for_lines","(lines, line_number = nil)",""],["format","Tins::Duration","Tins/Duration.html#method-i-format","(template = '%d+%h:%m:%s.%f', precision: nil)",""],["format","Tins::Unit","Tins/Unit.html#method-i-format","(value, format: '%f %U', prefix: 1024, unit: ?b)",""],["format_smart","Tins::Duration","Tins/Duration.html#method-i-format_smart","()",""],["fractional_seconds?","Tins::Duration","Tins/Duration.html#method-i-fractional_seconds-3F","()",""],["freeze","Tins::Bijection","Tins/Bijection.html#method-i-freeze","()",""],["freeze","Tins::TimeFreezer","Tins/TimeFreezer.html#method-c-freeze","(time)",""],["from","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-from","(&block)",""],["full?","Tins::Full","Tins/Full.html#method-i-full-3F","(dispatch = nil, *args)","<p>Returns the object if it isn&#39;t blank (as in Object#blank?), otherwise\nit returns nil. If a block …\n"],["go","Tins::GO","Tins/GO.html#method-i-go","(s, args = ARGV)","<p>Parses the argument array <em>args</em>, according to the pattern\n<em>s</em>, to retrieve the single character command …\n"],["head","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-head","()",""],["hours?","Tins::Duration","Tins/Duration.html#method-i-hours-3F","()",""],["id1","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-id1","()",""],["if?","Tins::IfPredicate","Tins/IfPredicate.html#method-i-if-3F","()",""],["implement","Tins::Implement","Tins/Implement.html#method-i-implement","(method_name, msg = :default)",""],["implement_in_submodule","Tins::Implement","Tins/Implement.html#method-i-implement_in_submodule","(method_name)",""],["included","Tins::Blank::Array","Tins/Blank/Array.html#method-c-included","(modul)",""],["included","Tins::Blank::Hash","Tins/Blank/Hash.html#method-c-included","(modul)",""],["included","Tins::Concern","Tins/Concern.html#method-i-included","(base = nil, &block)",""],["included","Tins::DateDummy","Tins/DateDummy.html#method-c-included","(modul)",""],["included","Tins::DateTimeDummy","Tins/DateTimeDummy.html#method-c-included","(modul)",""],["included","Tins::FileBinary","Tins/FileBinary.html#method-c-included","(modul)",""],["included","Tins::InstanceExec","Tins/InstanceExec.html#method-c-included","(*)",""],["included","Tins::PartialApplication","Tins/PartialApplication.html#method-c-included","(modul)","<p>If this module is included into a Proc (or similar object), it tampers with\nits Proc#arity method.\n"],["included","Tins::SexySingleton","Tins/SexySingleton.html#method-c-included","(klass)",""],["included","Tins::TimeDummy","Tins/TimeDummy.html#method-c-included","(modul)",""],["initialize_copy","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-initialize_copy","(source)",""],["inspect","Method","Method.html#method-i-inspect","()",""],["inspect","Tins::LinesFile","Tins/LinesFile.html#method-i-inspect","()",""],["inspect","Tins::MethodDescription::Parameters::Parameter","Tins/MethodDescription/Parameters/Parameter.html#method-i-inspect","()",""],["inspect","Tins::MethodDescription::Signature","Tins/MethodDescription/Signature.html#method-i-inspect","()",""],["inspect","Tins::Null","Tins/Null.html#method-i-inspect","()",""],["inspect","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-inspect","()",""],["inspect","UnboundMethod","UnboundMethod.html#method-i-inspect","()",""],["instance_thread_global","Tins::ThreadGlobal","Tins/ThreadGlobal.html#method-i-instance_thread_global","(name, value = nil)","<p>Define a thread global variable for the current instance with name\n<em>name</em>. If the value <em>value</em> is given, …\n"],["instance_thread_local","Tins::ThreadLocal","Tins/ThreadLocal.html#method-i-instance_thread_local","(name, value = nil)","<p>Define a thread local variable for the current instance with name\n<em>name</em>. If the value <em>value</em> is given, …\n"],["interpret","Tins::Interpreter","Tins/Interpreter.html#method-i-interpret","(source, *args)","<p>Interpret the string <em>source</em> as a body of a block, while passing\n<em>*args</em> into the block.\n<p>A small example …\n"],["interpret_sleep","Tins::Attempt","Tins/Attempt.html#method-i-interpret_sleep","(sleep, attempts)",""],["interpret_with_binding","Tins::Interpreter","Tins/Interpreter.html#method-i-interpret_with_binding","(source, my_binding, *args)","<p>Interpret the string <em>source</em> as a body of a block, while passing\n<em>*args</em> into the block and using <em>my_binding</em> …\n"],["last","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-last","()",""],["last_line_number","Tins::LinesFile","Tins/LinesFile.html#method-i-last_line_number","()",""],["level_of","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-level_of","(specifier)",""],["line","Tins::LinesFile","Tins/LinesFile.html#method-i-line","()",""],["line_number=","Tins::LinesFile","Tins/LinesFile.html#method-i-line_number-3D","(number)",""],["lines","Tins::Terminal","Tins/Terminal.html#method-i-lines","()",""],["location","Tins::Unit::FormatParser","Tins/Unit/FormatParser.html#method-i-location","()",""],["lstat","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-lstat","()",""],["map_apply","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-map_apply","(my_method, *args, &my_proc)",""],["match_backward","Tins::LinesFile","Tins/LinesFile.html#method-i-match_backward","(regexp, previous_after_match = false)",""],["match_forward","Tins::LinesFile","Tins/LinesFile.html#method-i-match_forward","(regexp, next_after_match = false)",""],["member?","Tins::Deflect::DeflectorCollection","Tins/Deflect/DeflectorCollection.html#method-i-member-3F","(klass, id)","<p>Return true if messages are deflected for class <em>klass</em> and method\nname <em>id</em>, otherwise return false.\n"],["memoize_apply_visibility","Tins::Memoize::CacheMethods","Tins/Memoize/CacheMethods.html#method-i-memoize_apply_visibility","(id)",""],["memoize_cache_clear","Tins::Memoize::CacheMethods","Tins/Memoize/CacheMethods.html#method-i-memoize_cache_clear","()","<p>Clear cached values for all methods/functions.\n"],["memoize_function","Module","Module.html#method-i-memoize_function","(*function_ids)","<p>Automatically memoize calls of the functions <code>function_ids</code>. The\nmemoized result does ONLY depend on the …\n"],["memoize_method","Module","Module.html#method-i-memoize_method","(*method_ids)","<p>Automatically memoize calls of the the methods <code>method_ids</code>. The\nmemoized results do NOT ONLY depend on …\n"],["method_missing","Tins::DynamicScope","Tins/DynamicScope.html#method-i-method_missing","(id, *args)",""],["method_missing","Tins::MethodMissingDelegator","Tins/MethodMissingDelegator.html#method-i-method_missing","(id, *a, &b)","<p>Delegates all missing method calls to <em>method_missing_delegator</em> if\nthis attribute has been set. Otherwise …\n"],["method_missing","Tins::Null","Tins/Null.html#method-i-method_missing","(*)",""],["method_missing","Tins::SexySingleton","Tins/SexySingleton.html#method-c-method_missing","(name, *args, &block)",""],["method_missing","Tins::SymbolMaker","Tins/SymbolMaker.html#method-i-method_missing","(id, *args)","<p>Returns a symbol (<em>id</em>) for every missing method named <em>id</em>.\n"],["minimize","Tins::Minimize","Tins/Minimize.html#method-i-minimize","()","<p>Returns a minimized version of this object, that is successive elements are\nsubstituted with ranges  …\n"],["minimize!","Tins::Minimize","Tins/Minimize.html#method-i-minimize-21","()","<p>First minimizes this object, then calls the replace method with the result.\n"],["minutes?","Tins::Duration","Tins/Duration.html#method-i-minutes-3F","()",""],["named","Module","Module.html#method-i-named","(name, method, *args, &named_block)",""],["named","Object","Object.html#method-i-named","(name, method, *args, &named_block)",""],["new","Tins::Bijection","Tins/Bijection.html#method-c-new","(inverted = Bijection.new(self))",""],["new","Tins::Deflect::DeflectorCollection","Tins/Deflect/DeflectorCollection.html#method-c-new","()",""],["new","Tins::Duration","Tins/Duration.html#method-c-new","(seconds)",""],["new","Tins::Find::Finder","Tins/Find/Finder.html#method-c-new","(opts = {})",""],["new","Tins::Generator","Tins/Generator.html#method-c-new","(enums)","<p>Create a new Generator instance. Use the objects in the Array\n<em>enums</em> as dimensions. The should all respond …\n"],["new","Tins::Limited","Tins/Limited.html#method-c-new","(maximum)","<p>Create a Limited instance, that runs <em>maximum</em> threads at most.\n"],["new","Tins::LinesFile","Tins/LinesFile.html#method-c-new","(lines, line_number = nil)",""],["new","Tins::MethodDescription::Signature","Tins/MethodDescription/Signature.html#method-c-new","(*parameters)",""],["new","Tins::MethodMissingDelegator::DelegatorModule","Tins/MethodMissingDelegator/DelegatorModule.html#method-c-new","(delegator, *a, &b)",""],["new","Tins::NamedSet","Tins/NamedSet.html#method-c-new","(name)",""],["new","Tins::NullPlus","Tins/NullPlus.html#method-c-new","(opts = {})",""],["new","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-c-new","(string)",""],["new","Tins::Token","Tins/Token.html#method-c-new","(bits: 128, length: nil, alphabet: DEFAULT_ALPHABET, random: SecureRandom)",""],["new","Tins::Unit::FormatParser","Tins/Unit/FormatParser.html#method-c-new","(format, unit_parser)",""],["new","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-c-new","(source, unit, prefixes = nil)",""],["next!","Tins::LinesFile","Tins/LinesFile.html#method-i-next-21","()",""],["nil?","Tins::Null","Tins/Null.html#method-i-nil-3F","()",""],["nth","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-nth","(n)",""],["null","Tins::Null::Kernel","Tins/Null/Kernel.html#method-i-null","(value = nil)",""],["null_plus","Tins::Null::Kernel","Tins/Null/Kernel.html#method-i-null_plus","(opts = {})",""],["only_once","Tins::Once","Tins/Once.html#method-i-only_once","(lock_filename = nil, locking_constant = nil)",""],["p!","Tins::P","Tins/P.html#method-i-p-21","(*objs)","<p>Raise a runtime error with the inspected objects <code>objs</code>\n(obtained by calling the #inspect method) as their …\n"],["parameterize","Tins::FromModule","Tins/FromModule.html#method-i-parameterize","(opts = {})",""],["parameterize_for","Tins::ParameterizedModule","Tins/ParameterizedModule.html#method-i-parameterize_for","(*args, &block)","<p>Pass <em>args</em> and <em>block</em> to configure the module and then\nreturn it after calling the parameterize method …\n"],["parse","Tins::Unit","Tins/Unit.html#method-i-parse","(string, format: '%f %U', unit: ?b, prefix: nil)","<p>Parse the string <code>string</code> if it matches <code>format</code> with\nthe unit <code>unit</code> and the prefixes specified by\n<code>prefix</code> …\n"],["parse","Tins::Unit::FormatParser","Tins/Unit/FormatParser.html#method-i-parse","()",""],["parse","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-i-parse","()",""],["parse?","Tins::Unit","Tins/Unit.html#method-i-parse-3F","(string, **options)",""],["partial","Tins::PartialApplication","Tins/PartialApplication.html#method-i-partial","(*args)","<p>Create a partial application of this Proc (or similar object) using\n<em>args</em> as the already applied arguments. …\n"],["pathname","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-pathname","()",""],["pp!","Tins::P","Tins/P.html#method-i-pp-21","(*objs)","<p>Raise a runtime error with the inspected objects <code>objs</code>\n(obtained by calling the #pretty_inspect method) …\n"],["pred!","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-pred-21","()",""],["prefixes","Tins::Unit","Tins/Unit.html#method-i-prefixes","(identifier)",""],["prepare_path","Tins::Find::Finder","Tins/Find/Finder.html#method-i-prepare_path","(path)",""],["present?","Tins::Blank::Object","Tins/Blank/Object.html#method-i-present-3F","()",""],["previous!","Tins::LinesFile","Tins/LinesFile.html#method-i-previous-21","()",""],["protect_from_errors","Tins::Find::Finder","Tins/Find/Finder.html#method-i-protect_from_errors","(errors = Find::EXPECTED_STANDARD_ERRORS)",""],["prune","Tins::Find","Tins/Find.html#method-i-prune","()","<p>Skips the current path or directory, restarting the loop with the next\nentry. If the current path is …\n"],["prune","Tins::Find","Tins/Find.html#method-c-prune","()","<p>Skips the current path or directory, restarting the loop with the next\nentry. If the current path is …\n"],["push","Tins::GO::EnumerableExtension","Tins/GO/EnumerableExtension.html#method-i-push","(argument)",""],["recurse","Tins::Generator","Tins/Generator.html#method-i-recurse","(tuple = [ nil ] * @n, i = 0, &block)",""],["require_maybe","Tins::RequireMaybe","Tins/RequireMaybe.html#method-i-require_maybe","(library)",""],["reset","Tins::Unit::FormatParser","Tins/Unit/FormatParser.html#method-i-reset","()",""],["respond_to?","Tins::SexySingleton","Tins/SexySingleton.html#method-c-respond_to-3F","(name, *args)",""],["respond_to_missing?","Tins::SexySingleton","Tins/SexySingleton.html#method-c-respond_to_missing-3F","(name, *args)",""],["responding?","Tins::Responding","Tins/Responding.html#method-i-responding-3F","(*method_names)",""],["rewind","Tins::LinesFile","Tins/LinesFile.html#method-i-rewind","()",""],["rotate","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-rotate","(n = 1)",""],["rows","Tins::Terminal","Tins/Terminal.html#method-i-rows","()",""],["scan","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-i-scan","(re)",""],["scan_char","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-i-scan_char","(char)",""],["scan_number","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-i-scan_number","()",""],["scan_unit","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-i-scan_unit","()",""],["scope","Tins::Scope","Tins/Scope.html#method-i-scope","(name = :default)",""],["scope_block","Tins::Scope","Tins/Scope.html#method-i-scope_block","(scope_frame, name = :default)",""],["scope_get","Tins::Scope","Tins/Scope.html#method-i-scope_get","(name = :default)",""],["scope_pop","Tins::Scope","Tins/Scope.html#method-i-scope_pop","(name = :default)",""],["scope_push","Tins::Scope","Tins/Scope.html#method-i-scope_push","(scope_frame, name = :default)",""],["scope_reverse","Tins::Scope","Tins/Scope.html#method-i-scope_reverse","(name = :default, &block)",""],["scope_top","Tins::Scope","Tins/Scope.html#method-i-scope_top","(name = :default)",""],["second","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-second","()",""],["seconds?","Tins::Duration","Tins/Duration.html#method-i-seconds-3F","()",""],["secure_write","Tins::SecureWrite","Tins/SecureWrite.html#method-i-secure_write","(filename, content = nil, mode = 'w')","<p>Write to a file atomically\n"],["signature","Tins::MethodDescription","Tins/MethodDescription.html#method-i-signature","()",""],["size","Tins::Generator","Tins/Generator.html#method-i-size","()","<p>Return the size of this generator, that is the number of its dimensions.\n"],["sleep_duration","Tins::Attempt","Tins/Attempt.html#method-i-sleep_duration","(duration, count)",""],["stat","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-stat","()",""],["subhash","Tins::Subhash","Tins/Subhash.html#method-i-subhash","(*patterns)","<p>Create a subhash from this hash, that only contains key-value pairs\nmatching <code>patterns</code> and return it. …\n"],["subhash!","Hash","Hash.html#method-i-subhash-21","(*patterns)",""],["succ!","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-succ-21","()",""],["suffix","Tins::Find::Finder::PathExtension","Tins/Find/Finder/PathExtension.html#method-i-suffix","()",""],["swap","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-swap","(n = 1)",""],["symbolize_keys_recursive","Tins::HashSymbolizeKeysRecursive","Tins/HashSymbolizeKeysRecursive.html#method-i-symbolize_keys_recursive","()",""],["symbolize_keys_recursive!","Tins::HashSymbolizeKeysRecursive","Tins/HashSymbolizeKeysRecursive.html#method-i-symbolize_keys_recursive-21","()",""],["tail","Tins::ProcPrelude","Tins/ProcPrelude.html#method-i-tail","()",""],["temp_io","Tins::TempIO","Tins/TempIO.html#method-i-temp_io","(content = nil)",""],["thread_global","Tins::ThreadGlobal","Tins/ThreadGlobal.html#method-i-thread_global","(name, default_value = nil)","<p>Define a thread global variable named <em>name</em> in this module/class.\nIf the value <em>value</em> is given, it is used …\n"],["thread_local","Tins::ThreadLocal","Tins/ThreadLocal.html#method-i-thread_local","(name, default_value = nil)","<p>Define a thread local variable named <em>name</em> in this module/class. If\nthe value <em>value</em> is given, it is used …\n"],["tins_concern_args","Tins::Concern::ModuleMixin","Tins/Concern/ModuleMixin.html#method-i-tins_concern_args","()",""],["tins_concern_configure","Tins::Concern::ModuleMixin","Tins/Concern/ModuleMixin.html#method-i-tins_concern_configure","(*args)",""],["to","Tins::To","Tins/To.html#method-i-to","(string)",""],["to_a","Tins::Null","Tins/Null.html#method-i-to_a","()",""],["to_a","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-to_a","()",""],["to_ary","Tins::Null","Tins/Null.html#method-i-to_ary","()",""],["to_f","Tins::Duration","Tins/Duration.html#method-i-to_f","()",""],["to_f","Tins::Null","Tins/Null.html#method-i-to_f","()",""],["to_i","Tins::Null","Tins/Null.html#method-i-to_i","()",""],["to_int","Tins::Null","Tins/Null.html#method-i-to_int","()",""],["to_json","Tins::Null","Tins/Null.html#method-i-to_json","(*)",""],["to_proc","Tins::ToProc","Tins/ToProc.html#method-i-to_proc","()","<p>:nocov:\n"],["to_s","Tins::Duration","Tins/Duration.html#method-i-to_s","()",""],["to_s","Tins::LinesFile","Tins/LinesFile.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::BlockParameter","Tins/MethodDescription/Parameters/BlockParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::GenericParameter","Tins/MethodDescription/Parameters/GenericParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::KeyParameter","Tins/MethodDescription/Parameters/KeyParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::KeyreqParameter","Tins/MethodDescription/Parameters/KeyreqParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::KeyrestParameter","Tins/MethodDescription/Parameters/KeyrestParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::OptParameter","Tins/MethodDescription/Parameters/OptParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::ReqParameter","Tins/MethodDescription/Parameters/ReqParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Parameters::RestParameter","Tins/MethodDescription/Parameters/RestParameter.html#method-i-to_s","()",""],["to_s","Tins::MethodDescription::Signature","Tins/MethodDescription/Signature.html#method-i-to_s","()",""],["to_s","Tins::Null","Tins/Null.html#method-i-to_s","()",""],["to_s","Tins::StringVersion::Version","Tins/StringVersion/Version.html#method-i-to_s","()",""],["to_str","Tins::Null","Tins/Null.html#method-i-to_str","()",""],["try_only_once","Tins::Once","Tins/Once.html#method-i-try_only_once","(lock_filename = nil, locking_constant = nil, &block)",""],["underscore","Tins::StringUnderscore","Tins/StringUnderscore.html#method-i-underscore","()",""],["uniq_by","Tins::UniqBy","Tins/UniqBy.html#method-i-uniq_by","(&b)",""],["uniq_by!","Array","Array.html#method-i-uniq_by-21","(&b)",""],["unit_re","Tins::Unit::UnitParser","Tins/Unit/UnitParser.html#method-i-unit_re","(prefixes, unit)",""],["unminimize","Tins::Minimize","Tins/Minimize.html#method-i-unminimize","()","<p>Invert a minimized version of an object. Some small examples:\n\n<pre>[ &#39;A&#39;..&#39;C&#39;, &#39;G&#39;..&#39;G&#39;, &#39;K&#39;..&#39;M&#39; ].unminimize ...</pre>\n"],["unminimize!","Tins::Minimize","Tins/Minimize.html#method-i-unminimize-21","()","<p>Invert a minimized version of this object in place.\n"],["version","Tins::StringVersion","Tins/StringVersion.html#method-i-version","()",""],["visit_path?","Tins::Find::Finder","Tins/Find/Finder.html#method-i-visit_path-3F","(path)",""],["winsize","Tins::Terminal","Tins/Terminal.html#method-i-winsize","()",""],["with","Tins::BlankSlate","Tins/BlankSlate.html#method-c-with","(*ids)","<p>Creates an anonymous blank slate class, that only responds to the methods\n<em>*ids</em>. ids can be Symbols,  …\n"],["|","Tins::HashUnion","Tins/HashUnion.html#method-i-7C","(other)",""],["README","","README_md.html","","<p>Tins - Useful tools library in Ruby\n<p>Description\n<p>Non yet.\n"]]}}