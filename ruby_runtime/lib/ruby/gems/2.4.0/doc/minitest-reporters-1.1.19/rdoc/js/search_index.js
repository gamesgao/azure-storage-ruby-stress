var search_data = {"index":{"searchIndex":["activesupport","testing","setupandteardown","forminitest","minitest","extensiblebacktracefilter","relativeposition","reporters","ansi","code","basereporter","defaultreporter","delegatereporter","htmlreporter","junitreporter","meantimereporter","invalidorder","invalidsortcolumn","progressreporter","rubymatereporter","rubyminereporter","specreporter","add_defaults()","add_filter()","after_suite()","after_suite()","after_suite()","after_suite()","after_suite()","after_teardown()","after_test()","all_reporters()","analyze_suite()","asc?()","avg_label()","before_setup()","before_suite()","before_suite()","before_suite()","before_suite()","before_test()","before_test()","before_test()","black()","choose_reporters()","clock_time()","color()","color=()","color?()","color?()","colored_for()","column_sorted_body()","compare_suites()","compare_suites_by_name()","compare_tests()","compare_tests_by_name()","create_new_report!()","create_or_update_previous_runs!()","current_run()","default_filter()","defaults()","des_label()","desc?()","filename_for()","filter()","filter_backtrace()","filters?()","friendly_name()","green()","guard_reporter()","html_file()","init_all_reporters()","io()","location()","location()","location()","log()","max_label()","message_for()","message_for()","message_for()","min_label()","minitest_version()","new()","new()","new()","new()","new()","new()","new()","new()","new()","on_record()","on_record()","on_report()","on_report()","on_start()","on_start()","options()","order()","order_sorted_body()","pad()","pad_mark()","pad_test()","passed?()","passes()","percent_errors_failures()","percent_passes()","percent_skipps()","plugin_minitest_reporter_init()","previous_run()","previous_runs_filename()","previously_ran?()","print()","print_colored_status()","print_failure()","print_info()","print_test_with_time()","print_test_with_time()","print_with_info_padding()","puts()","rate()","record()","record()","record()","record()","record()","record()","record()","record_failure()","record_pass()","record_print_failures_if_any()","record_print_status()","record_skip()","red()","report()","report()","report()","report()","report()","report()","report()","report()","report()","report()","report_body()","report_filename()","report_title()","reset_statistics!()","reset_statistics!()","result()","result_line()","run_label()","run_with_hooks()","samples()","show()","show_count()","sort_column()","start()","start()","start()","start()","start()","start()","start()","suite_duration()","suite_result()","summarize_suite()","test_fail_or_error?()","to_s()","total_count()","total_count()","total_time()","total_time_to_hms()","use!()","use_around_test_hooks!()","use_old_activesupport_fix!()","use_runner!()","with_result()","write_to_screen!()","write_xml_file_for()","xml_message_for()","yellow()"],"longSearchIndex":["activesupport","activesupport::testing","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::forminitest","minitest","minitest::extensiblebacktracefilter","minitest::relativeposition","minitest::reporters","minitest::reporters::ansi","minitest::reporters::ansi::code","minitest::reporters::basereporter","minitest::reporters::defaultreporter","minitest::reporters::delegatereporter","minitest::reporters::htmlreporter","minitest::reporters::junitreporter","minitest::reporters::meantimereporter","minitest::reporters::meantimereporter::invalidorder","minitest::reporters::meantimereporter::invalidsortcolumn","minitest::reporters::progressreporter","minitest::reporters::rubymatereporter","minitest::reporters::rubyminereporter","minitest::reporters::specreporter","minitest::reporters::basereporter#add_defaults()","minitest::extensiblebacktracefilter#add_filter()","minitest::reporters::basereporter#after_suite()","minitest::reporters::defaultreporter#after_suite()","minitest::reporters::meantimereporter#after_suite()","minitest::reporters::rubyminereporter#after_suite()","minitest::reporters::specreporter#after_suite()","activesupport::testing::setupandteardown::forminitest#after_teardown()","minitest::reporters::basereporter#after_test()","minitest::reporters::delegatereporter#all_reporters()","minitest::reporters::junitreporter#analyze_suite()","minitest::reporters::meantimereporter#asc?()","minitest::reporters::meantimereporter#avg_label()","activesupport::testing::setupandteardown::forminitest#before_setup()","minitest::reporters::basereporter#before_suite()","minitest::reporters::defaultreporter#before_suite()","minitest::reporters::rubyminereporter#before_suite()","minitest::reporters::specreporter#before_suite()","minitest::reporters::basereporter#before_test()","minitest::reporters::defaultreporter#before_test()","minitest::reporters::rubyminereporter#before_test()","minitest::reporters::ansi::code#black()","minitest::reporters::choose_reporters()","minitest::reporters::clock_time()","minitest::reporters::progressreporter#color()","minitest::reporters::progressreporter#color=()","minitest::reporters::ansi::code::color?()","minitest::reporters::defaultreporter#color?()","minitest::reporters::defaultreporter#colored_for()","minitest::reporters::meantimereporter#column_sorted_body()","minitest::reporters::htmlreporter#compare_suites()","minitest::reporters::htmlreporter#compare_suites_by_name()","minitest::reporters::htmlreporter#compare_tests()","minitest::reporters::htmlreporter#compare_tests_by_name()","minitest::reporters::meantimereporter#create_new_report!()","minitest::reporters::meantimereporter#create_or_update_previous_runs!()","minitest::reporters::meantimereporter#current_run()","minitest::extensiblebacktracefilter::default_filter()","minitest::reporters::meantimereporter#defaults()","minitest::reporters::meantimereporter#des_label()","minitest::reporters::meantimereporter#desc?()","minitest::reporters::junitreporter#filename_for()","minitest::extensiblebacktracefilter#filter()","minitest::reporters::basereporter#filter_backtrace()","minitest::extensiblebacktracefilter#filters?()","minitest::reporters::htmlreporter#friendly_name()","minitest::reporters::defaultreporter#green()","minitest::reporters::delegatereporter#guard_reporter()","minitest::reporters::htmlreporter#html_file()","minitest::reporters::delegatereporter#init_all_reporters()","minitest::reporters::delegatereporter#io()","minitest::reporters::defaultreporter#location()","minitest::reporters::htmlreporter#location()","minitest::reporters::junitreporter#location()","minitest::reporters::rubyminereporter#log()","minitest::reporters::meantimereporter#max_label()","minitest::reporters::defaultreporter#message_for()","minitest::reporters::htmlreporter#message_for()","minitest::reporters::junitreporter#message_for()","minitest::reporters::meantimereporter#min_label()","minitest::reporters::minitest_version()","minitest::extensiblebacktracefilter::new()","minitest::reporters::basereporter::new()","minitest::reporters::defaultreporter::new()","minitest::reporters::delegatereporter::new()","minitest::reporters::htmlreporter::new()","minitest::reporters::junitreporter::new()","minitest::reporters::meantimereporter::new()","minitest::reporters::progressreporter::new()","minitest::reporters::rubyminereporter::new()","minitest::reporters::defaultreporter#on_record()","minitest::reporters::meantimereporter#on_record()","minitest::reporters::defaultreporter#on_report()","minitest::reporters::meantimereporter#on_report()","minitest::reporters::defaultreporter#on_start()","minitest::reporters::meantimereporter#on_start()","minitest::reporters::meantimereporter#options()","minitest::reporters::meantimereporter#order()","minitest::reporters::meantimereporter#order_sorted_body()","minitest::relativeposition#pad()","minitest::relativeposition#pad_mark()","minitest::relativeposition#pad_test()","minitest::reporters::delegatereporter#passed?()","minitest::reporters::htmlreporter#passes()","minitest::reporters::htmlreporter#percent_errors_failures()","minitest::reporters::htmlreporter#percent_passes()","minitest::reporters::htmlreporter#percent_skipps()","minitest::plugin_minitest_reporter_init()","minitest::reporters::meantimereporter#previous_run()","minitest::reporters::meantimereporter#previous_runs_filename()","minitest::reporters::meantimereporter#previously_ran?()","minitest::reporters::basereporter#print()","minitest::reporters::basereporter#print_colored_status()","minitest::reporters::defaultreporter#print_failure()","minitest::reporters::basereporter#print_info()","minitest::reporters::progressreporter#print_test_with_time()","minitest::reporters::rubymatereporter#print_test_with_time()","minitest::relativeposition#print_with_info_padding()","minitest::reporters::basereporter#puts()","minitest::reporters::meantimereporter#rate()","minitest::reporters::basereporter#record()","minitest::reporters::defaultreporter#record()","minitest::reporters::delegatereporter#record()","minitest::reporters::progressreporter#record()","minitest::reporters::rubymatereporter#record()","minitest::reporters::rubyminereporter#record()","minitest::reporters::specreporter#record()","minitest::reporters::defaultreporter#record_failure()","minitest::reporters::defaultreporter#record_pass()","minitest::reporters::specreporter#record_print_failures_if_any()","minitest::reporters::specreporter#record_print_status()","minitest::reporters::defaultreporter#record_skip()","minitest::reporters::defaultreporter#red()","minitest::reporters::basereporter#report()","minitest::reporters::defaultreporter#report()","minitest::reporters::delegatereporter#report()","minitest::reporters::htmlreporter#report()","minitest::reporters::junitreporter#report()","minitest::reporters::meantimereporter#report()","minitest::reporters::progressreporter#report()","minitest::reporters::rubymatereporter#report()","minitest::reporters::rubyminereporter#report()","minitest::reporters::specreporter#report()","minitest::reporters::meantimereporter#report_body()","minitest::reporters::meantimereporter#report_filename()","minitest::reporters::meantimereporter#report_title()","minitest::reporters::meantimereporter#reset_statistics!()","minitest::reporters::meantimereporter::reset_statistics!()","minitest::reporters::basereporter#result()","minitest::reporters::defaultreporter#result_line()","minitest::reporters::meantimereporter#run_label()","minitest::reporters#run_with_hooks()","minitest::reporters::meantimereporter#samples()","minitest::reporters::progressreporter#show()","minitest::reporters::meantimereporter#show_count()","minitest::reporters::meantimereporter#sort_column()","minitest::reporters::defaultreporter#start()","minitest::reporters::delegatereporter#start()","minitest::reporters::htmlreporter#start()","minitest::reporters::progressreporter#start()","minitest::reporters::rubymatereporter#start()","minitest::reporters::rubyminereporter#start()","minitest::reporters::specreporter#start()","minitest::reporters::defaultreporter#suite_duration()","minitest::reporters::defaultreporter#suite_result()","minitest::reporters::htmlreporter#summarize_suite()","minitest::reporters::htmlreporter#test_fail_or_error?()","minitest::reporters::defaultreporter#to_s()","minitest::reporters::basereporter#total_count()","minitest::reporters::delegatereporter#total_count()","minitest::reporters::basereporter#total_time()","minitest::reporters::htmlreporter#total_time_to_hms()","minitest::reporters::use!()","minitest::reporters::use_around_test_hooks!()","minitest::reporters::use_old_activesupport_fix!()","minitest::reporters::use_runner!()","minitest::reporters::rubyminereporter#with_result()","minitest::reporters::meantimereporter#write_to_screen!()","minitest::reporters::junitreporter#write_xml_file_for()","minitest::reporters::junitreporter#xml_message_for()","minitest::reporters::defaultreporter#yellow()"],"info":[["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::Testing","","ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html","",""],["Minitest","","Minitest.html","",""],["Minitest::ExtensibleBacktraceFilter","","Minitest/ExtensibleBacktraceFilter.html","","<p>Filters backtraces of exceptions that may arise when running tests.\n"],["Minitest::RelativePosition","","Minitest/RelativePosition.html","",""],["Minitest::Reporters","","Minitest/Reporters.html","",""],["Minitest::Reporters::ANSI","","Minitest/Reporters/ANSI.html","",""],["Minitest::Reporters::ANSI::Code","","Minitest/Reporters/ANSI/Code.html","",""],["Minitest::Reporters::BaseReporter","","Minitest/Reporters/BaseReporter.html","",""],["Minitest::Reporters::DefaultReporter","","Minitest/Reporters/DefaultReporter.html","","<p>A reporter identical to the standard Minitest reporter except with more\ncolors.\n<p>Based upon Ryan Davis …\n"],["Minitest::Reporters::DelegateReporter","","Minitest/Reporters/DelegateReporter.html","",""],["Minitest::Reporters::HtmlReporter","","Minitest/Reporters/HtmlReporter.html","","<p>A reporter for generating HTML test reports This is recommended to be used\nwith a CI server, where the …\n"],["Minitest::Reporters::JUnitReporter","","Minitest/Reporters/JUnitReporter.html","","<p>A reporter for writing JUnit test reports Intended for easy integration\nwith CI servers - tested on  …\n"],["Minitest::Reporters::MeanTimeReporter","","Minitest/Reporters/MeanTimeReporter.html","","<p>This reporter creates a report providing the average (mean), minimum and\nmaximum times for a test to …\n"],["Minitest::Reporters::MeanTimeReporter::InvalidOrder","","Minitest/Reporters/MeanTimeReporter/InvalidOrder.html","",""],["Minitest::Reporters::MeanTimeReporter::InvalidSortColumn","","Minitest/Reporters/MeanTimeReporter/InvalidSortColumn.html","",""],["Minitest::Reporters::ProgressReporter","","Minitest/Reporters/ProgressReporter.html","","<p>Fuubar-like reporter with a progress bar.\n<p>Based upon Jeff Kreefmeijer&#39;s Fuubar (MIT License) and paydro&#39;s …\n"],["Minitest::Reporters::RubyMateReporter","","Minitest/Reporters/RubyMateReporter.html","","<p>Simple reporter designed for RubyMate.\n"],["Minitest::Reporters::RubyMineReporter","","Minitest/Reporters/RubyMineReporter.html","",""],["Minitest::Reporters::SpecReporter","","Minitest/Reporters/SpecReporter.html","","<p>Turn-like reporter that reads like a spec.\n<p>Based upon TwP&#39;s turn (MIT License) and paydro&#39;s monkey-patch. …\n"],["add_defaults","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-add_defaults","(defaults)",""],["add_filter","Minitest::ExtensibleBacktraceFilter","Minitest/ExtensibleBacktraceFilter.html#method-i-add_filter","(regex)","<p>Adds a filter.\n<p>@param [Regex] regex the filter\n"],["after_suite","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-after_suite","(test)",""],["after_suite","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-after_suite","(suite)",""],["after_suite","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-after_suite","(suite)","<p>Copies the suite times from the\n{Minitest::Reporters::DefaultReporter#after_suite} method, making them …\n"],["after_suite","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-after_suite","(suite)",""],["after_suite","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-after_suite","(suite)",""],["after_teardown","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-after_teardown","()",""],["after_test","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-after_test","(test)","<p>called by our own after hooks\n"],["all_reporters","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-all_reporters","()",""],["analyze_suite","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-analyze_suite","(tests)",""],["asc?","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-asc-3F","()","<p>@return [Boolean] Whether the given :order option is :asc.\n"],["avg_label","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-avg_label","()","<p>@return [String] A yellow &#39;Avg:&#39; label.\n"],["before_setup","ActiveSupport::Testing::SetupAndTeardown::ForMiniTest","ActiveSupport/Testing/SetupAndTeardown/ForMiniTest.html#method-i-before_setup","()",""],["before_suite","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-before_suite","(test)",""],["before_suite","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-before_suite","(suite)",""],["before_suite","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-before_suite","(suite)",""],["before_suite","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-before_suite","(suite)",""],["before_test","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-before_test","(test)","<p>called by our own before hooks\n"],["before_test","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-before_test","(test)",""],["before_test","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-before_test","(test)",""],["black","Minitest::Reporters::ANSI::Code","Minitest/Reporters/ANSI/Code.html#method-i-black","(s = nil)",""],["choose_reporters","Minitest::Reporters","Minitest/Reporters.html#method-c-choose_reporters","(console_reporters, env)",""],["clock_time","Minitest::Reporters","Minitest/Reporters.html#method-c-clock_time","()",""],["color","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-color","()",""],["color=","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-color-3D","(color)",""],["color?","Minitest::Reporters::ANSI::Code","Minitest/Reporters/ANSI/Code.html#method-c-color-3F","()",""],["color?","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-color-3F","()",""],["colored_for","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-colored_for","(result, string)",""],["column_sorted_body","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-column_sorted_body","()","<p>@return [Array&lt;Hash&lt;Symbol =&gt; String&gt;&gt;] All of the results\nsorted by\n\n<pre>the :sort_column option. ...</pre>\n"],["compare_suites","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-compare_suites","(suite_a, suite_b)","<p>Test suites are first ordered by evaluating the results of the tests, then\nby test suite name Test suites …\n"],["compare_suites_by_name","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-compare_suites_by_name","(suite_a, suite_b)",""],["compare_tests","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-compare_tests","(test_a, test_b)","<p>Tests are first ordered by evaluating the results of the tests, then by\ntests names Tess which fail are …\n"],["compare_tests_by_name","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-compare_tests_by_name","(test_a, test_b)",""],["create_new_report!","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-create_new_report-21","()","<p>Creates a new report file in the &#39;report_filename&#39;. This file\ncontains a line for each test of …\n"],["create_or_update_previous_runs!","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-create_or_update_previous_runs-21","()","<p>Creates a new &#39;previous runs&#39; file, or updates the existing one\nwith the latest timings.\n<p>@return …\n"],["current_run","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-current_run","()","<p>@return [Hash&lt;String =&gt; Float&gt;]\n"],["default_filter","Minitest::ExtensibleBacktraceFilter","Minitest/ExtensibleBacktraceFilter.html#method-c-default_filter","()","<p>Returns the default filter.\n<p>The default filter will filter out all Minitest and minitest-reporters\nlines. …\n"],["defaults","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-defaults","()","<p>@return [Hash] Sets default values for the filenames used by this class,\n\n<pre>and the number of tests to output ...</pre>\n"],["des_label","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-des_label","()","<p>@return [String] A blue &#39;Description:&#39; label.\n"],["desc?","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-desc-3F","()","<p>@return [Boolean] Whether the given :order option is :desc (default).\n"],["filename_for","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-filename_for","(suite)",""],["filter","Minitest::ExtensibleBacktraceFilter","Minitest/ExtensibleBacktraceFilter.html#method-i-filter","(backtrace)","<p>Filters a backtrace.\n<p>This will add new lines to the new backtrace until a filtered line is\nencountered. …\n"],["filter_backtrace","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-filter_backtrace","(backtrace)",""],["filters?","Minitest::ExtensibleBacktraceFilter","Minitest/ExtensibleBacktraceFilter.html#method-i-filters-3F","(str)","<p>Determines if the string would be filtered.\n<p>@param [String] str @return [Boolean]\n"],["friendly_name","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-friendly_name","(test)","<p>Trims off the number prefix on test names when using Minitest Specs\n"],["green","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-green","(string)",""],["guard_reporter","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-guard_reporter","(reporters)",""],["html_file","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-html_file","()",""],["init_all_reporters","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-init_all_reporters","()",""],["io","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-io","()",""],["location","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-location","(exception)",""],["location","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-location","(exception)","<p>taken from the JUnit reporter\n"],["location","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-location","(exception)",""],["log","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-log","(msg)",""],["max_label","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-max_label","()","<p>@return [String] A red &#39;Max:&#39; label.\n"],["message_for","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-message_for","(test)",""],["message_for","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-message_for","(test)","<p>based on message_for(test) from the JUnit reporter\n"],["message_for","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-message_for","(test)",""],["min_label","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-min_label","()","<p>@return [String] A green &#39;Min:&#39; label.\n"],["minitest_version","Minitest::Reporters","Minitest/Reporters.html#method-c-minitest_version","()",""],["new","Minitest::ExtensibleBacktraceFilter","Minitest/ExtensibleBacktraceFilter.html#method-c-new","()","<p>Creates a new backtrace filter.\n"],["new","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-c-new","(options={})",""],["new","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-c-new","(options = {})",""],["new","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-c-new","(reporters, options = {})",""],["new","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-c-new","(args = {})","<p>The constructor takes a hash, and uses the following keys: :title - the\ntitle that will be used in the …\n"],["new","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-c-new","(reports_dir = \"test/reports\", empty = true, options = {})",""],["new","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-c-new","(options = {})","<p>@param options [Hash] @option previous_runs_filename [String] Contains the\ntimes for each test\n\n<pre>by description. ...</pre>\n"],["new","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-c-new","(options = {})",""],["new","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-c-new","(options = {})",""],["on_record","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-on_record","(test)",""],["on_record","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-on_record","(test)",""],["on_report","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-on_report","()",""],["on_report","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-on_report","()",""],["on_start","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-on_start","()",""],["on_start","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-on_start","()",""],["options","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-options","()","<p>@return [Hash]\n"],["order","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-order","()","<p>@raise [Minitest::Reporters::MeanTimeReporter::InvalidOrder]\n\n<pre>When the given :order option is invalid.</pre>\n"],["order_sorted_body","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-order_sorted_body","()","<p>@return [String] All of the column-sorted results sorted by the :order\n\n<pre>option. (Defaults to :desc).</pre>\n"],["pad","Minitest::RelativePosition","Minitest/RelativePosition.html#method-i-pad","(str, size = INFO_PADDING)",""],["pad_mark","Minitest::RelativePosition","Minitest/RelativePosition.html#method-i-pad_mark","(str)",""],["pad_test","Minitest::RelativePosition","Minitest/RelativePosition.html#method-i-pad_test","(str)",""],["passed?","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-passed-3F","()",""],["passes","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-passes","()","<p>The number of tests that passed\n"],["percent_errors_failures","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-percent_errors_failures","()","<p>The percentage of tests that failed\n"],["percent_passes","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-percent_passes","()","<p>The percentage of tests that passed, calculated in a way that avoids\nrounding errors\n"],["percent_skipps","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-percent_skipps","()","<p>The percentage of tests that were skipped\n"],["plugin_minitest_reporter_init","Minitest","Minitest.html#method-c-plugin_minitest_reporter_init","(options)",""],["previous_run","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-previous_run","()","<p>@return [Hash&lt;String =&gt; Array&lt;Float&gt;]\n"],["previous_runs_filename","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-previous_runs_filename","()","<p>@return [String] The path to the file which contains all the durations\n\n<pre>for each test run. The previous ...</pre>\n"],["previously_ran?","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-previously_ran-3F","()","<p>Returns a boolean indicating whether a previous runs file exists.\n<p>@return [Boolean]\n"],["print","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-print","(*args)",""],["print_colored_status","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-print_colored_status","(test)",""],["print_failure","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-print_failure","(test)",""],["print_info","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-print_info","(e, name=true)",""],["print_test_with_time","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-print_test_with_time","(test)",""],["print_test_with_time","Minitest::Reporters::RubyMateReporter","Minitest/Reporters/RubyMateReporter.html#method-i-print_test_with_time","(test)",""],["print_with_info_padding","Minitest::RelativePosition","Minitest/RelativePosition.html#method-i-print_with_info_padding","(line)",""],["puts","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-puts","(*args)",""],["rate","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-rate","(run, min, max)","<p>@param run [Float] The last run time. @param min [Float] The minimum run\ntime. @param max [Float] The …\n"],["record","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-record","(test)",""],["record","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-record","(test)",""],["record","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-record","(result)",""],["record","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-record","(test)",""],["record","Minitest::Reporters::RubyMateReporter","Minitest/Reporters/RubyMateReporter.html#method-i-record","(test)",""],["record","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-record","(test)",""],["record","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-record","(test)",""],["record_failure","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-record_failure","(record)",""],["record_pass","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-record_pass","(record)",""],["record_print_failures_if_any","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-record_print_failures_if_any","(test)",""],["record_print_status","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-record_print_status","(test)",""],["record_skip","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-record_skip","(record)",""],["red","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-red","(string)",""],["report","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-report","()",""],["report","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-report","()",""],["report","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-report","()",""],["report","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-report","()","<p>Called by the framework to generate the report\n"],["report","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-report","()",""],["report","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-report","()","<p>Runs the {Minitest::Reporters::DefaultReporter#report} method and then\nenhances it by storing the results …\n"],["report","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-report","()",""],["report","Minitest::Reporters::RubyMateReporter","Minitest/Reporters/RubyMateReporter.html#method-i-report","()",""],["report","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-report","()",""],["report","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-report","()",""],["report_body","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-report_body","()","<p>The report itself. Displays statistics about all runs, ideal for use with\nthe Unix &#39;head&#39; command. …\n"],["report_filename","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-report_filename","()","<p>@return [String] The path to the file which contains the parsed test\n\n<pre>results. The results file contains ...</pre>\n"],["report_title","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-report_title","()","<p>Added to the top of the report file and to the screen output.\n<p>@return [String]\n"],["reset_statistics!","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-reset_statistics-21","()","<p>Resets the &#39;previous runs&#39; file, essentially removing all previous\nstatistics gathered.\n<p>@return …\n"],["reset_statistics!","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-c-reset_statistics-21","()","<p>Reset the statistics file for this reporter. Called via a rake task:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rake</span> <span class=\"ruby-identifier\">reset_statistics</span>\n</pre>\n<p>@return [Boolean] …\n"],["result","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-result","(test)",""],["result_line","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-result_line","()",""],["run_label","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-run_label","(rating)","<p>@param rating [Symbol] One of :faster, :slower or :inconclusive. @return\n[String] A purple &#39;Last:&#39; …\n"],["run_with_hooks","Minitest::Reporters","Minitest/Reporters.html#method-i-run_with_hooks","(*args)",""],["samples","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-samples","()","<p>A barbaric way to find out how many runs are in the previous runs file;\nthis method takes the first test …\n"],["show","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-show","()",""],["show_count","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-show_count","()","<p>@return [Fixnum] The number of tests to output to output to the screen\n\n<pre>after each run.</pre>\n"],["sort_column","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-sort_column","()","<p>@raise [Minitest::Reporters::MeanTimeReporter::InvalidSortColumn]\n\n<pre>When the given :sort_column option is ...</pre>\n"],["start","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-start","()",""],["start","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-start","()",""],["start","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-start","()",""],["start","Minitest::Reporters::ProgressReporter","Minitest/Reporters/ProgressReporter.html#method-i-start","()",""],["start","Minitest::Reporters::RubyMateReporter","Minitest/Reporters/RubyMateReporter.html#method-i-start","()",""],["start","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-start","()",""],["start","Minitest::Reporters::SpecReporter","Minitest/Reporters/SpecReporter.html#method-i-start","()",""],["suite_duration","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-suite_duration","(suite)",""],["suite_result","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-suite_result","()",""],["summarize_suite","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-summarize_suite","(suite, tests)","<p>based on analyze_suite from the JUnit reporter\n"],["test_fail_or_error?","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-test_fail_or_error-3F","(test)",""],["to_s","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-to_s","()",""],["total_count","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-total_count","()",""],["total_count","Minitest::Reporters::DelegateReporter","Minitest/Reporters/DelegateReporter.html#method-i-total_count","(options)","<p>stolen from minitest self.run\n"],["total_time","Minitest::Reporters::BaseReporter","Minitest/Reporters/BaseReporter.html#method-i-total_time","()",""],["total_time_to_hms","Minitest::Reporters::HtmlReporter","Minitest/Reporters/HtmlReporter.html#method-i-total_time_to_hms","()",""],["use!","Minitest::Reporters","Minitest/Reporters.html#method-c-use-21","(console_reporters = ProgressReporter.new, env = ENV, backtrace_filter = nil)",""],["use_around_test_hooks!","Minitest::Reporters","Minitest/Reporters.html#method-c-use_around_test_hooks-21","()",""],["use_old_activesupport_fix!","Minitest::Reporters","Minitest/Reporters.html#method-c-use_old_activesupport_fix-21","()",""],["use_runner!","Minitest::Reporters","Minitest/Reporters.html#method-c-use_runner-21","(console_reporters, env)",""],["with_result","Minitest::Reporters::RubyMineReporter","Minitest/Reporters/RubyMineReporter.html#method-i-with_result","(test)",""],["write_to_screen!","Minitest::Reporters::MeanTimeReporter","Minitest/Reporters/MeanTimeReporter.html#method-i-write_to_screen-21","()","<p>Writes a number of tests (configured via the &#39;show_count&#39; option)\nto the screen after creating …\n"],["write_xml_file_for","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-write_xml_file_for","(suite, tests)",""],["xml_message_for","Minitest::Reporters::JUnitReporter","Minitest/Reporters/JUnitReporter.html#method-i-xml_message_for","(test)",""],["yellow","Minitest::Reporters::DefaultReporter","Minitest/Reporters/DefaultReporter.html#method-i-yellow","(string)",""]]}}