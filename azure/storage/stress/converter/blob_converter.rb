require "azure/storage"
require_relative "core_converter"
require_relative "../infrastructure/logging_aspect"
require_relative "../auto_generated/blob_types_types"
require_relative "../utils"


module Azure
  module Storage
    module Converter
      class BlobConverter
        def self.getBlobService(handler, accountInfo, filters = [])
          storageService = XS::Converter::CoreConverter.getStorageService(handler, accountInfo)
          blob_client = storageService.blob_client
          filters.each { |filter| blob_client.with_filter(filter) }
          blob_client
        end

        def self.buildCloudBlobResponseFromInternalRequestInfo(rInfo)
          result = XS::AutoGenerated::CloudBlobResponse
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.lastModified = XS::Utilities::timeStringToInteger(rInfo.responseHeaders["last-modified"]) unless rInfo.responseHeaders["last-modified"].nil?
          result.metadata = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
          result.etag = rInfo.responseHeaders["etag"] unless rInfo.responseHeaders["etag"].nil?
        end
      end
    end
  end
end
